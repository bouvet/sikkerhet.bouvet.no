[{"body":"Bouvet gjennomfører utviklingsprosjekter på mange ulike måter, der vi tar mer eller mindre ansvar for prosjektledelse, planlegging, utviklingsfasen, kvalitetssikring og ikke minst drift og forvaltning av løsningen. Vi har også ulike innslag av eget, kundens og tredjepartsutstyr, både under utvikling og forvaltning av løsningen.\nUavhengig av hvordan prosjektet gjennomføres er det viktig at vi har kontroll på ansvarsfordelingen. Denne skal være regulert i avtalen med kunden, og vi må sikre at vi\nHar kontroll på ansvar og rollefordeling At vi har kontaktpunkt hos alle involverte parter Kan følge opp avvik raskt slik at vi unngår misforståelser eller problemer senere i prosjektløpet Drift og forvaltning av løsning Bouvet Dersom vi er ansvarlige for drift og forvaltning av løsning i vår infrastruktur, vil denne komme inn under vår sertifisering på ISO 27001 - Informasjonssikkerhet. Dette medfører at vi har et større helhetlig ansvar for sikkerheten rundt løsningen, og det er viktig at leveranseteamet er klar over dette.\nAlle ressurser driftet av leveranseteamet må håndteres på linje med all annen infrastruktur, så teamet må ha rutiner for patching og vedlikehold eller sikre at dette blir håndtert. Sjekk gjerne med Intern-IT \u0026 Sikkerhet for å se hva de kan levere og dermed drifte på vegne av teamet for å forenkle forvaltningen.\nBouvets Statement of Applicability/Anvendelseserklæring (SOA) tar for seg ulike kontroller relatert til informasjonssikkerheten og hvordan vi skal forholde oss til disse. SOA kan finnes i det interne ledelsessystemet. Dersom vi tar på oss denne rollen vil din regionale kvalitetsleder kunne bistå med råd og veiledning for å sikre at alt ansvar er ivaretatt.\nKunde eller tredjepart Dersom vi kun har ansvar for utvikling av løsningen, er det viktig at vi har gått opp grensesnittet mellom oss og organisasjonen som overtar og drifter løsningen videre:\nHvordan skal handover skje Hvordan håndterer vi at nødvendig hardware og kapasitet er satt opp Hvordan sikrer vi at behov for deployments, driftshendelser, feilrettinger og liknende kommuniseres til begge parter? Tips Dokumenter ansvarsfordeling og annen relevant informasjon i kildekodesystemet sammen med resten av det som produseres i prosjektet. Det øker synligheten og alle vet til enhver tid hvor informasjonen finnes. Veien videre Bouvet: Statement of Applicability (intern lenke) ","categories":"","description":"Manglende klarhet i hvem som er ansvarlig for hva kan få store konsekvenser. Dette gjelder alle prosjekter, men er spesielt viktig dersom andre selskaper enn oss og kunden er involvert. Å ha en tydelig ansvarsfordeling med tilhørende varslingsrutiner og roller er avgjørende.\n","excerpt":"Manglende klarhet i hvem som er ansvarlig for hva kan få store …","ref":"/no/planlegge/ansvarsfordeling/","tags":"","title":"Ansvarsfordeling"},{"body":"Why “Security Champion” The term “Security Champion” has become an established concept to encompass people who do not necessarily work directly with security but can act as a bridge between formal security roles and development teams.\nThere are many ways to implement a Security Champion program; OWASP has a relatively comprehensive list of points for a program where Security Champions have a more formal role. At Bouvet, we have chosen a different solution inspired by NAV and Equinor where it is more informal, and each person can contribute as much as they can and have the capacity for.\nWhat does a Security Champion do? This will vary between regions, units, and teams, but largely it is up to each Security Champion to decide how much they can engage beyond their own project. The Slack channel #security-champions is used to announce events, share useful information and anything else related to Security Champions in Bouvet.\nIn addition, many use the Slack channel #sikkerhet to share news, ask questions, or post tips and tricks. Some regions also have regular meetings for all Security Champions, in addition to arranging courses, meetups, lectures, and much more.\nBouvet is becoming a large company with a wide range of projects we work on, and security is a vast area where everyone has something new to learn every day. We love sharing knowledge, so it’s great if YOU want to get involved and share what you know with others - no matter how low or high the threshold for understanding might be.\nAnd most importantly, we primarily sell competence, and more engaged Security Champions is never a negative thing. If you are unsure about what you are allowed to do or not, talk to your nearest manager and other Security Champions in the region, and you will surely find a solution.\nMore information OWASP: Security Culture Bouvet: Security Champion (BLS) (Requires Bouvet user) NAV: Security Champion Equinor: Security Champion ","categories":"","description":"A Security Champion is not a defined role in Bouvet; it is simply a person who is passionate about security and helps to focus on security in our deliveries. Anyone can become a Security Champion - if you want to, you can!\n","excerpt":"A Security Champion is not a defined role in Bouvet; it is simply a …","ref":"/security-champion/what-is-a-security-champion/","tags":"","title":"Bouvet Security Champion"},{"body":"Hvorfor “Security Champion” Begrepet “Security Champion” har etterhvert blitt et etablert begrep for å favne om folk som ikke nødvendigvis jobber direkte med sikkerhet, men som kan være en brobygger mellom de formelle sikkerhetsrollene og utviklerteamene.\nDet finnes mange måter å implementere et Security Champion-program på; OWASP har en forholdsvis utfyllende liste med punkter for et program der Security Champions har en mer formell rolle. I Bouvet har vi valgt en annen løsning inspirert av NAV og Equinor der det hele er mer uformellt, og hver enkelt kan bidra med det en kan og har kapasitet til.\nHva gjør en Security Champion? Her vil det variere mellom regioner, enheter og team, men i stor grad er det opp til hver enkelt Security Champion å vurdere hvor mye en kan engasjere seg utover eget prosjekt. Slack-kanalen #security-champions brukes for å annonsere eventer, dele nyttig informasjon og liknende som angår Security Champions i Bouvet.\nI tillegg er det mange som bruker Slack-kanalen #sikkerhet for å dele nyheter, stille spørsmål eller poste tips og triks. Noen regioner har også faste samlinger for alle Security Champions, i tillegg til at det arrangeres kurs, meetups, foredrag og mye annet.\nBouvet begynner å bli et stort selskap med stort spenn i prosjektene vi jobber med, og sikkerhet er et gedigent område der alle har noe nytt å lære hver dag. Vi digger kompetansedeling, så det er kjempekult om akkurat DU har lyst til å engasjere deg og dele det du vet med andre - uansett hvor lav eller høy terskelen for å forstå det måtte være.\nOg viktigst av alt; vi selger primært kompetanse, og flere engasjerte Security Champions er aldri negativt. Dersom du er usikker på hva du får lov til å gjøre eller ikke, prat med nærmeste leder og andre Security Champions i regionen så finner dere helt sikkert en løsning.\nVeien videre OWASP: Security Culture Bouvet: Security Champion (BLS) (Krever Bouvet-bruker) NAV: Security Champion Equinor: Security Champion ","categories":"","description":"En Security Champion er ikke en definert rolle i Bouvet, det er rett og slett en person som engasjerer seg for sikkerhet og som bidrar til å sette fokus på sikkerhet i leveransene våre. Alle kan bli en Security Champion - om du vil får du lov!\n","excerpt":"En Security Champion er ikke en definert rolle i Bouvet, det er rett …","ref":"/no/security-champion/hva_er_en_security_champion/","tags":"","title":"Bouvet Security Champion"},{"body":"When setting up runtime environments, it is important to consider how the solution we are developing can be built and deployed in a way that makes it easy and removes the need for a person to spend time and energy doing the same thing each time.\nUsing CI/CD Continuous Integration and Continuous Delivery, often abbreviated as CI/CD, are common approaches for how software is built and deployed to runtime environments, often using scripts in the form of pipelines or actions. Names and terms here depend on the tools used, but the principle is much the same.\nSuch a pipeline can do much more than just build; it can also perform other tasks such as running automated testing, vulnerability scanning, secret scanning, and much more. Regardless of what it is used for, it is important to be aware of the risk elements associated with CI/CD.\nThe big advantage of CI/CD is the automation built into the solution. Each time you run a pipeline, the run and all artifacts are archived and linked to the version control system so you can go back and see which commit was used. Running CI/CD should be safe as long as you have control over and protect the branch used as the basis for deployment to the production environment.\nMore Information Microsoft: Azure Pipelines Github: Github Actions OWASP: Top 10 CI/CD Security Risks OWASP: CI/CD Security Cheat Sheet ","categories":"","description":"When we create solutions, they need to be built and deployed consistently. Using CI/CD eliminates human errors from the process and ensures that we can reliably reproduce both artifacts and deployments.\n","excerpt":"When we create solutions, they need to be built and deployed …","ref":"/deploy/cicd/","tags":"","title":"CI/CD"},{"body":"Når vi setter opp kjøremiljøer er det viktig å også tenke på hvordan løsningen vi utvikler kan bygges og deployes til disse på en måte som både gjør det enkelt og fjerner behovet for at en person skal måtte bruke tid og energi på å gjøre det samme hver gang.\nBruk av CI/CD Continuous Integration og Continuous Delivery, ofte forkortet CI/CD er vanlige tilnærminger for hvordan software bygges og deployes til kjøremiljø, ofte ved hjelp av skript i form av pipelines eller actions. Navn og begreper her avhenger av hvilke verktøy en bruker, men prinsippet er mye det samme.\nEn slik pipeline kan gjøre mye mer enn bare å bygge, den kan også utføre andre oppgaver som å kjøre automatisert testing, sårbarhetsskanning, skanning av hemmeligheter og mye annet. Uavhengig av hva en bruker den til, er det viktig å være klar over risikoelementene assosiert med CI/CD.\nDen store fordelen med CI/CD er automatikken bygd inn i løsningen. Hver gang du kjører igang en pipeline arkiveres kjøringen og alle artifakter og kobles mot versjonskontrollsystemet slik at du kan gå tilbake og se hvilken comitt som ble brukt. Kjøring av CI/CD bør i utgangspunktet være ufarlig gitt at en har kontroll på, og beskytter branchen som brukes som basis for deployment til produksjonsmiljøet.\nVeien videre Microsoft: Azure Pipelines Github: Github Actions OWASP: Top 10 CI/CD Security Risks OWASP: CI/CD Security Cheat Sheet ","categories":"","description":"Når vi lager løsninger må disse bygges og deployes på en konsistent måte. Bruk av CI/CD fjerner menneskelige feil fra prosessen, og sikrer at vi kan reprodusere både artifakter og deployments på en god måte.  \n","excerpt":"Når vi lager løsninger må disse bygges og deployes på en konsistent …","ref":"/no/deploye/cicd/","tags":"","title":"CI/CD"},{"body":"The development environment and build environment are some of the most important aspects of a development project, and it is crucial that we have control over these dependencies.\nThere are many different ways to approach these environments; some develop and build locally on their own laptop, while others use a combination of dedicated development and build environments - based on cloud services like Azure DevBox or on-prem development servers.\nRegardless of the solution chosen, there are some important points that should be documented and maintained - both to have a basis that can be threat modeled and validated, but also so that new team members can quickly onboard and get a “right” environment.\nTools Developers often have different preferences regarding the use of IDEs and extensions, and many have likely created a workflow that works for them. Remember that all tools must be kept up to date, and each new tool introduced increases the attack surface, especially when it comes to using extensions, such as those from Visual Studio Marketplace and similar sources.\nDevelopment Environment and Build Environment One of the major risk elements in all development is if\nunauthorized persons can access a machine where development or building is taking place the machine can access the internet without significant restrictions such machines lack monitoring All developers who write code today have many dependencies on libraries and packages fetched from open-source ecosystems. Few of these have any relationship to security, and as we have seen time and again, malicious actors can take over such components or create their own copies under similar names. Such packages represent a significant risk as they can introduce backdoors that open up for unauthorized access or exfiltrate data from the machine to an external recipient.\nImportant measures to mitigate risk include:\nblocking all incoming network traffic blocking all outgoing network traffic only opening up the accesses that are absolutely necessary avoiding the use of general machines for internet browsing, office activities, and similar for development It is clear that one cannot always justify setting up dedicated machines used only for development based on cost/benefit, but this should be considered on a case-by-case basis to ensure that one is aware of how this choice affects the risk profile of the project.\nMore Information Wikipedia: Programming tools ","categories":"","description":"The environments and tools we work with are essential for the project, and it is important that we have control over which tools are used and how they are configured.\n","excerpt":"The environments and tools we work with are essential for the project, …","ref":"/develop/dev_environments/","tags":"","title":"Development Environment, Tools, and Build Environment"},{"body":"The goal of sikkerhet.bouvet.no is not to cover everything, but to give you suggestions for measures and a vocabulary that will help you move forward. All topics presented will also point to external resources that can provide even more information.\nBouvet is certified under ISO27001, which also sets requirements for security in deliveries. The checklist will provide you with a good starting point for measures that cover common security gaps and help ensure quality in the delivery. Each point in the checklist is covered by more detailed information to make it easy to get started without prior knowledge of a topic.\nFor many projects, a more thorough review may be necessary. In that case, we recommend OWASP ASVS.\nRemember We will do our best to deliver the safest services and solutions. What is Information Security? Information security is about securing these aspects of an IT system:\nConfidentiality\nThe data processed by the system should not be accessible to unauthorized individuals.\nExamples of challenges here can include a misconfigured access control system, known in OWASP Top 10 as “Broken Access Control.”\nIntegrity\nThe data processed by the system is correct.\nIntegrity can be compromised through, for example, an SQL injection attack or a poorly secured SSH server where unauthorized individuals gain access to alter data.\nAvailability\nThe functions offered by the system are available when users need them.\nConsiderations range from a virtual machine freezing due to a full disk to a targeted DDoS attack.\nHow to use sikkerhet.bouvet.no? sikkerhet.bouvet.no is organized into chapters based on the domains they cover.\nYou can either click through and read about a single topic you are unsure about or seek tips on. Alternatively, you and your team can systematically go through each chapter and note what is in order and what needs improvement in your project.\nThe Security Checklist can be used as a starting point to assess the project’s security. Each point refers to more detailed information. It can also be downloaded and implemented as part of the source code in your project.\n","categories":"","description":"Here, Security Champions, system developers, infrastructure engineers, DevOps practitioners, and others at Bouvet will find information to support the operation, development, and maintenance of secure IT systems for our customers. The overarching content and themes discussed on these pages are also supportive for project managers, advisors, and others who need to follow up on security in projects.\n","excerpt":"Here, Security Champions, system developers, infrastructure engineers, …","ref":"/introduction/","tags":"","title":"Introduction"},{"body":"Det overordnede innholdet og temaene som diskuteres på disse sidene er også støttende for prosjektledere, rådgivere og andre som skal følge opp sikkerhet i prosjekter.\nBouvet er sertifisert under ISO27001, som også stiller krav til sikkerhet i leveranser. Sjekklista vil gi deg et godt utgangspunkt for tiltak som dekker vanlige sikkerhetshull og hjelper til å sikre kvalitet i leveransen. Hvert av punktene i sjekklista dekkes av mer utfyllende informasjon slik at det skal være lett å komme igang uten forkunnskaper om et tema.\nMålet er ikke at sikkerhet.bouvet.no skal dekke absolutt alt, men du skal sitte igjen med forslag til tiltak og et vokabular som hjelper deg videre. Alle tema som presenteres skal også peke videre på eksterne ressurser som kan gi enda mer informasjon.\nFor mange prosjekter kan en grundigere gjennomgang være nødvendig. Da vil vi anbefale OWASP ASVS.\nHusk Vi skal gjøre vårt beste for å levere de sikreste tjenestene og løsningene Hva er Informasjonssikkerhet? Informasjonssikkerhet handler om å sikre disse aspektene ved et IT-system:\nKonfidensialitet\nDataene systemet behandler skal ikke være tilgjengelig for uautoriserte.\nEksempel på utfordringer her kan være et miskonfigurert adgangskontrollsystem, det som i OWASP Top 10 kalles - “Broken Access Control”\nTilgjengelighet\nFunksjonene systemet tilbyr er tilgjengelige når brukerne trenger det.\nHer vil alt fra at en virtuell maskin fryser pga. en full disk, til et målrettet DDoS-angrep være ting å tenke på\nIntegritet\nDataene systemet behandler er korrekte.\nIntegriteten kan bli kompromitert for eksempel via et SQL-injeksjons angrep, eller en svakt sikret SSH-server, hvor uautoriserte får tilgang til å endre datene.\nHvordan bruke sikkerhet.bouvet.no? sikkerhet.bouvet.no er bygd opp i kapitler avgrenset av domenene de omhandler.\nDu kan enten klikke deg inn å lese om et enkelt emne du er usikker på, eller ønsker tips rundt.\nEventuelt kan du og ditt team kan gå systematisk gjennom hvert kapittel og notere hva som er i orden og hva som bør utbedres i deres prosjekt.\nSjekklisten for sikkerhet kan brukes som et startpunkt for å vurdere prosjektets sikkerhet. Hvert punkt refererer videre til mer utfyllende informasjon. Den kan også lastes ned og implementeres som en del av kildekoden i ditt prosjektet.\n","categories":"","description":"Her vil Security Champions, systemutviklere, infrastruktur-ingeniører, DevOpsere og andre i Bouvet finne informasjon til støtte for å drifte, utvikle og forvalte sikre IT-systemer for våre kunder. \n","excerpt":"Her vil Security Champions, systemutviklere, infrastruktur-ingeniører, …","ref":"/no/introduksjon/","tags":"","title":"Introduksjon"},{"body":"Bouvet conducts development projects in many different ways, where we take more or less responsibility for project management, planning, development, quality assurance, and not least the operation and management of the solution. We also involve our own, the client’s, and third-party equipment both during development and management of the solution.\nRegardless of how the project is executed, it is important that we are aware of how responsibilities are divided. This should be regulated in the agreement with the client, so we must ensure that we:\nHave control over our roles and responsibilities Have contact points with all involved parties Can follow up on deviations quickly so as to avoid misunderstandings or problems later in the project cycle Operation and Management - Bouvet If we are responsible for the operation and management of the solution in our infrastructure, our certification for ISO 27001 - Information Security will apply to it. This means that we have a greater overall responsibility for the security of the solution, and it is important that the delivery team is aware of this.\nAll resources managed by the delivery team must be handled in line with all other infrastructure in Bouvet, so the team must have routines for patching and maintenance or ensure that this is handled. Feel free to check with Internal IT \u0026 Security to see what they can deliver and thus manage on behalf of the team to simplify management.\nBouvet’s Statement of Applicability/Declaration of Application (SOA) addresses various controls related to information security and how we should relate to them. The SOA can be found in the internal management system. If we take on responsibility for operation and management, your regional quality manager can assist with advice and guidance to ensure that all responsibilities are covered.\nOperation and Management - Client or Third Party If we are only responsible for the development of the solution, it is important that we have defined the interface between us and the organization that takes over and continues to operate the solution:\nHow should handover occur How do we ensure that the necessary hardware and systems have been set up and configured correctly How do we ensure that all parties are aware of the requirements related to deployment, operational incidents, error corrections and similar Tip Document the roles and responsibilities and other relevant information in the source code system along with other documentation. This increases its visibility and and becomes the single source of up-to-date information for the whole team. More information Bouvet: Statement of Applicability (internal link) ","categories":"","description":"A lack of clarity in our responsibilities and those of others can have huge consequences for a project, so this must be clarified beforehand. It is especially important if companies other than us and the client are involved, as tasks and roles tend to fall through the cracks because everyone thinks \"someone else\" will handle it.\n","excerpt":"A lack of clarity in our responsibilities and those of others can have …","ref":"/plan/roles-and-responsibilities/","tags":"","title":"Roles and responsibilities"},{"body":"Some requirements are implicit, such as the use of HTTPS/TLS, while others will be explicit and defined by customers or third parties. Even if the customer has no specific requirements, it is still important for the delivery team to create a list of requirements to ensure that the project’s framework is documented.\nMost projects must adhere to various requirements from Bouvet, the customer, and external parties. All development teams must have control over the requirements that apply to the delivery:\nFrom Bouvet (where applicable) From the customer Legal requirements Legal requirements can include general requirements related to privacy, but many industries operate with more specific regulations that impose additional requirements.\nIn many cases, it is clear to both Bouvet and the customer what applies, but it is important that the team verifies this before starting to develop the solution to avoid costly and time-consuming surprises. Regardless of what is defined and where, the team should document the requirements they adhere to so that this information is preserved for the future.\nMore Information Lovdata: Lov om digital sikkerhet (digitalsikkerhetsloven, in Norwegian) Datatilsynet: Programvareutvikling med innebygd personvern - Krav (in Norwegian) ","categories":"","description":"How can one build security into a solution if there are no well-defined security requirements?\n","excerpt":"How can one build security into a solution if there are no …","ref":"/design/security-requirements/","tags":"","title":"Security Requirements"},{"body":" Welcome! Here, system developers, infrastructure engineers, DevOps practitioners, and others at Bouvet will find information to support the operation, development, and maintenance of secure IT systems for our customers. The overarching content and themes discussed on these pages also supports project managers, advisors, and others who need to follow up on security in projects. The information on this site is by no means exhaustive on any subject, but aims to use simple language to describe various measures that covers the most common weaknesses. \"We will do our utmost to deliver the safest services and solutions\"\nWhat are you looking for? Introduction Plan Design Develop Deploy Manage Security Champions Information Security is about securing these aspects of an IT system: Confidentiality The data processed by the system should not be accessible to unauthorized individuals.\nAvailability The functions offered by the system are available when users need them.\nIntegrity The data processed by the system is correct.\nSecurity Champion Are you, or do you want to be a hero? A Security Champion is a person who acts as a driving force and motivator for security work in a team or department/unit. Responsibility for security lies with the team as a whole, but as a Security Champion, you contribute to awareness and focus within the team.\nA good place to start, whether you are or want to be a hero, is our info package for Security Champions ","categories":"","description":"Sikkerhet.bouvet.no is used by system developers, infrastructure engineers, DevOps practitioners, and others in Bouvet to find information to support the operation, development, and maintenance of secure IT systems for our customers.\n","excerpt":"Sikkerhet.bouvet.no is used by system developers, infrastructure …","ref":"/","tags":"","title":"sikkerhet.bouvet.no"},{"body":" Velkommen! Her vil systemutviklere, infrastruktur-ingeniører, DevOpsere og andre i Bouvet finne informasjon til støtte for å drifte, utvikle og forvalte sikre IT-systemer for våre kunder. Det overordnede innholdet og temaene som diskuteres på disse sidene er også støttende for prosjektledere, rådgivere og andre som skal følge opp sikkerhet i prosjekter. Informasjonen på denne siden er på ingen måte uttømmende om et emne, men har som mål å bruke et enkelt språk til å beskrive ulike tiltak som kan dekke de vanligste svakhetene. Hvis du er ny til sikkerhet.bouvet.no, anbefaler vi at du leser introduksjonen først \"Vi skal gjøre vårt ytterste for å levere de sikreste tjenestene og løsningene\"\nHva ser du etter? Introduksjon Planlegge Designe Utvikle Deploye Forvalte Security Champions Informasjonssikkerhet handler om å sikre disse aspektene ved et IT-system: Konfidensialitet Dataene systemet behandler skal ikke være tilgjengelig for uautoriserte.\nTilgjengelighet Funksjonene systemet tilbyr er tilgjengelige når brukerne trenger det.\nIntegritet Dataene systemet behandler er korrekte.\nSecurity Champion Er du, eller vil du bli en helt? En Security Champion er en person som fungerer som en pådriver og motivator for sikkerhetsarbeidet i et team eller en avdeling/enhet. Ansvaret for sikkerheten ligger på teamet i sin helhet, men som Security Champion bidrar du til bevisstgjøring og fokus.\nEt godt sted å starte, uavhengig om du er eller vil bli en helt - er vår infopakke for Security Champions ","categories":"","description":"Sikkerhet.bouvet.no brukes av systemutviklere, infrastruktur-ingeniører, DevOpsere og andre i Bouvet for å finne informasjon relatert til drift, utvikling og forvaltning av sikre IT-systemer for våre kunder.\n","excerpt":"Sikkerhet.bouvet.no brukes av systemutviklere, …","ref":"/no/","tags":"","title":"sikkerhet.bouvet.no"},{"body":"Noen krav er implisitte, som eksempelvis bruk av HTTPS/TLS, mens andre vil være eksplisitte og definert av lovverk, kunde eller tredjepart. Dersom kunden ikke har noen spesifikke krav er det likevel viktig at leveranseteamet lager en kravliste slik at rammene for prosjektet er dokumentert.\nDe fleste prosjekter må forholde seg til ulike krav fra Bouvet, kunden og eksterne parter. Alle utviklingsteam må ha kontroll på hvilke krav som stilles til leveransen:\nFra Bouvet (der dette er aktuelt) Fra kunden Lovpålagte krav Av lovpålagte krav kan en ha generelle krav eksempelvis knyttet til personvern, men mange bransjer opererer med mer spesifikke forskrifter som stiller andre krav som vil gjelde i tillegg.\nI mange tilfeller er det klart både for Bouvet og kunde hva som gjelder, men det er viktig at teamet verifiserer dette før en begynner å utvikle løsningen, slik at kostbare og tidkrevende overraskelser kan unngås. Uavhengig av hva som er definert hvor, bør teamet uansett dokumentere hvilke krav en forholder seg til slik at dette er bevart for ettertiden.\nVeien videre Lovdata: Lov om digital sikkerhet (digitalsikkerhetsloven) Datatilsynet: Programvareutvikling med innebygd personvern - Krav ","categories":"","description":"Hvordan kan en bygge sikkerhet i en løsning dersom en ikke har veldefinerte sikkerhetskrav? \n","excerpt":"Hvordan kan en bygge sikkerhet i en løsning dersom en ikke har …","ref":"/no/designe/sikkerhetskrav/","tags":"","title":"Sikkerhetskrav"},{"body":"Utviklingsmiljøet og byggmiljøet er noe av det viktigste vi har i et utviklingsprosjekt, og er en avhengighet det er utrolig viktig at vi har kontroll på.\nDet finnes mange ulike måter å forholde seg til disse miljøene; noen utvikler og bygger lokalt på egen laptop, mens andre bruker en kombinasjon av dedikerte utvikling- og byggmiljø - basert på skytjenester som Azure DevBox eller on-prem utviklingsservere.\nUavhengig av hvilken løsning en går for, er det noen viktige momenter som bør dokumenteres og vedlikeholdes - både for å ha et utgangspunkt som kan trusselmodelleres og valideres, men også for at nye teammedlemmer raskt kan onboardes og få et miljø som er “rett”.\nVerktøy Utviklere har ofte ulike preferanser rundt bruk av IDE og utvidelser, og mange har gjerne laget seg en arbeidsflyt som funker for dem. Husk på at alle verktøy må holdes oppdatert, og hvert nytt verktøy som introduseres øker angrepsflaten, spesielt når det kommer til bruk av utvidelser som eksempelvis fra Visual Studio Marketplace og liknende.\nUtviklingsmiljø og byggmiljø Et av de store risikoelementene ved all utvikling er dersom\nuvedkommende kan nå en maskin der det foregår utvikling eller bygging på maskinen kan nå internett uten særlige begrensninger slike maskiner mangler monitorering Alle utviklere som skriver kode idag har mange avhengigheter til biblioteker og pakker som hentes fra open-source økosystemer. De færreste av disse har noe forhold til sikkerhet, og som vi har sett gang på gang finnes det ondsinnede aktører som overtar slike komponenter eller lager sine egne kopier under liknende navn. Slike pakker representerer en kjemperisiko, da de kan introdusere bakdører som åpner opp for uvedkommende eller eksfiltrerer data fra maskinen til en ekstern mottaker.\nViktige tiltak for å ta ned risiko vil være å\nstenge for all innkommende nettverkstrafikk stenge for all utgående nettverkstrafikk kun åpne opp for de tilgangene som absolutt trengs unngå bruk av generelle maskiner som brukes til surfing på nett, kontoraktiviteter og liknende til utvikling Det er klart at en ikke alltid kan forsvare å sette opp dedikerte maskiner som kun brukes til utvikling ut fra kost/nytte, men dette bør vurderes fra tilfelle til tilfelle for å sikre at en er kjent hvordan dette valget påvirker risikobildet i prosjektet.\nVeien videre Wikipedia: Programming tools ","categories":"","description":"Miljøene og verktøyene vi jobber med er essensielle for prosjektet, og det er viktig at vi har kontroll på hvilke verktøy som brukes og hvordan disse konfigureres. \n","excerpt":"Miljøene og verktøyene vi jobber med er essensielle for prosjektet, og …","ref":"/no/utvikle/utviklingsmiljoer/","tags":"","title":"Utviklingsmiljø, verktøy og byggmiljø"},{"body":"Når vi lager et design for en ny løsning hender det at det er detaljer vi ikke kjenner, eller at det oppstår uventede komplikasjoner underveis i implementeringen. Dette kan resultere i at designet vi opprinnelig laget avviker fra den ferdige løsningen.\nDokumentasjonen er viktig for å forstå hvordan en løsning er satt opp og hvordan den fungerer, spesielt om det oppstår en hendelse som krever redeployment eller disaster recovery. For å sikre at gapet mellom dokumentasjon og ferdig produkt ikke er for stort bør vi derfor alltid validere designet i etterkant.\nHva bør vi sjekke? Noe av det viktigste er alt rundt som ikke nødvendigvis kommer i kodeform. Hvilke ressurser vi bruker, nettverksoppsett og brannmuråpninger er grunnleggende, men vi bør også se på IAM og hvilke tilganger som er gitt til ressurser og applikasjon. Dersom det er elementer i designet som ikke er implementert bør dette fjernes, dersom vi har implementert elementer som ikke er i designet må designet enten oppdateres eller elementene fjernes fra løsningen.\nHvordan kan vi sjekke? Dette avhenger veldig av form og farge på prosjektet, men i mange tilfeller vil IT-organisasjonen hos kunden (for prosjekter hostet hos kunde) kunne hjelpe. Dersom løsningen kjører hos Bouvet vil helt sikkert Intern IT \u0026 Sikkerhet kunne være behjelpelige på å sjekke ting som nettverkskonfigurasjoner og liknende, eventuelt peke deg i riktig retning. Det er mye du kan gjøre selv også, men sjekk med Intern IT \u0026 Sikkerhet før du installerer verktøy og kjører scans eller liknende.\nVeien videre Wikipedia: Secure by design CISA: Secure by design ","categories":"","description":"Når vi utvikler en løsning bør vi alltid validere at løsningen er i henhold til designet. Dersom den avviker må vi enten korrigere løsningen eller oppdatere designet.  \n","excerpt":"Når vi utvikler en løsning bør vi alltid validere at løsningen er i …","ref":"/no/forvalte/verifisering-av-design/","tags":"","title":"Verifiser designet"},{"body":"When we create a design for a new solution, there may be details we do not know, or unexpected complications may arise during implementation. This can result in the original design deviating from the final solution.\nDocumentation is crucial for understanding how a solution is set up and how it works, especially if an incident occurs that requires redeployment or disaster recovery. To ensure that the gap between documentation and the final product is not too large, we should always validate the design afterward.\nWhat Should We Check? One of the most important aspects is everything around the code that may not necessarily be in code form. This includes the resources we use, network setup, and firewall openings. We should also review IAM and the permissions granted to resources and applications. If there are elements in the design that are not implemented, these should be removed. If we have implemented elements not in the design, the design should either be updated, or the elements should be removed from the solution.\nHow Can We Check? This depends greatly on the form and nature of the project, but in many cases, the IT organization at the customer (for projects hosted at the customer) can help. If the solution runs at Bouvet, Intern IT \u0026 Security can certainly assist with checking things like network configurations or point you in the right direction. There is a lot you can do yourself as well, but check with Intern IT \u0026 Security before installing tools and running scans or similar actions.\nMore Information Wikipedia: Secure by design CISA: Secure by design ","categories":"","description":"When developing a solution, we should always validate that the solution adheres to the design. If it deviates, we must either correct the solution or update the design.\n","excerpt":"When developing a solution, we should always validate that the …","ref":"/manage/verify-the-design/","tags":"","title":"Verify the Design"},{"body":"Det er langt fra alle leveranser som er aktuelle for revisjon eller audit fra kundens side, dette vil typisk gjelde leveranser der Bouvet har tatt styring og kunden i større grad mottar en løsning uten at de er tungt involvert i driften av prosjektet. En revisjon er verktøy kunden kan benytte for å sikre at Bouvet har gjort jobben som avtalt, der kunden har mulighet til å gjennomgå våre rutiner og arbeidsprosesser for å sikre at vi har levert som vi skal.\nEn slik revisjon vil være avklart i kontrakten vi jobber mot, men det er langt ifra alle kunder som benytter seg av denne muligheten. I mange tilfeller vil det være mest aktuelt med en revisjon når prosjektet leveres eller på et tidspunkt etter levering når det er i drift. Målet vil da være å verifisere at kravene til prosjektet er oppfylt, og at det forvaltes og driftes på en måte som er i samsvar med det kunden forventer og krever.\nHva kreves av oss? Her vil det kunne variere fra kontrakt til kontrakt, men helt overordnet bør man sikre at prosjektet har den nødvendige dokumentasjonen som kreves og forventes slik at man kan vise at sikkerheten i leveransen er ivaretatt. Vi bør alltid levere et minimum av sikkerhet, men dersom kunden har valgt å ikke ta hensyn til anbefalinger eller har valgt å takke nei til eventuelle tilleggstjenester må vi sikre at dette er dokumentert på en skikkelig måte.\nVeien videre ","categories":"","description":"Uavhengig av egne kontroller kommer vi noen ganger i situasjoner der kunde eller mottaker ønsker å gjennomgå kvalitet og rutiner rundt det som leveres. Sikkerhet og kvalitet i en løsning krever andre tiltak enn det funksjonelle, som typisk er lettere å verifisere opp mot kundens krav.  \n","excerpt":"Uavhengig av egne kontroller kommer vi noen ganger i situasjoner der …","ref":"/no/forvalte/audit/","tags":"","title":"Audit eller revisjon av prosjekt eller leveranse"},{"body":"Not all deliveries are subject to audits or reviews from the customer’s side. This typically applies to deliveries where Bouvet has taken the lead, and the customer receives a solution without being heavily involved in the project’s operations. An audit is a tool the customer can use to ensure that Bouvet has done the job as agreed, giving the customer the opportunity to review our routines and work processes to ensure we have delivered as expected.\nSuch an audit will be agreed upon in the contract we are working against, but not all customers will take advantage of this opportunity. In many cases, an audit is most relevant when the project is delivered or at a point after delivery when it is in operation. The goal will then be to verify that the project’s requirements are met and that it is managed and operated in a way that aligns with what the customer expects and demands.\nWhat Is Required of Us? This will vary from contract to contract, but overall, we should ensure that the project has the necessary documentation required and expected so that we can demonstrate that the security of the delivery is maintained. We should always deliver a minimum level of security, but if the customer has chosen not to heed recommendations or declined additional services, we must ensure that this is documented properly.\nMore Information ","categories":"","description":"Regardless of our own controls, we sometimes find ourselves in situations where the customer or recipient wants to review the quality and procedures of what is being delivered. Security and quality in a solution require different measures than the functional aspects, which are typically easier to verify against customer requirements.\n","excerpt":"Regardless of our own controls, we sometimes find ourselves in …","ref":"/manage/audit/","tags":"","title":"Audit or Review of Project or Delivery"},{"body":"Building is often the first step in the process and is typically done only once per release. The build environments used in a CI/CD process, often called build agents, usually come in two forms:\nCloud provider-managed agents Self-hosted agents - these can be hosted both in the cloud or on-premise With cloud provider-managed agents, standard images pre-configured for this task are used. They are deployed when you start a build process and contain all the tools needed for building. Once deployed, they check out your source code, build it, store the artifact in a suitable system, and then the instance is stopped and deleted.\nSelf-hosted agents are more complex because you are responsible for all maintenance and configuration. In return, you have dedicated agents used only by the teams or projects granted access to them.\nAlthough the first option is often good enough, it is important to be aware of the possibilities that exist and when to consider them. Regardless of the solution, it is important to remember that the build environment is a very vulnerable point; if compromised, an attacker could potentially make changes that affect everything built there.\nThis is especially important when using third-party packages, and a minimum here should be that packages are pinned to specific versions and that you never fetch the latest version of a package automatically.\nMore Information Microsoft: Azure Pipelines Github: Github Actions OWASP: Top 10 CI/CD Security Risks OWASP: CI/CD Security Cheat Sheet ","categories":"","description":"When building a solution, various considerations must be taken. Is it acceptable for the customer to build in third-party managed cloud environments, or must this happen in our or the customer's own environments?\n","excerpt":"When building a solution, various considerations must be taken. Is it …","ref":"/deploy/building/","tags":"","title":"Building"},{"body":"Bygging er ofte det første steget i prosessen, og gjøres typisk bare en gang per release. Byggmiljøene brukt i en CI/CD prosess, ofte kalt byggagenter kommer ofte i to former:\nskyleverandørstyrte agenter selvstyrte agenter - disse kan hostes både i sky eller on-premise Med agenter styrt av skyleverandøren brukes standardimages ferdig konfigurert for denne oppgaven. De deployes når du starter en byggeprosess, og inneholder alt av verktøy som trengs for byggingen. Når de er ferdig deployet sjekker de ut kildekoden din, bygger den, lagrer artifakten i et egnet system før instansen stanses og slettes.\nSelvstyrte agenter er mer komplekse da du har ansvar for alt av vedlikehold og konfigurasjon selv. Til gjengjeld har du da dedikerte agenter som kun brukes av teamene eller prosjektene som gis tilgang til disse.\nSelv om det første alternativet somoftest er godt nok, er det viktig å være klar over mulighetene som finnes, og når en bør vurdere disse. Uansett løsning er det viktig å tenke på at byggmiljøet er et veldig sårbart punkt; dersom dette kompromitteres kan en angriper potensielt utføre endringer som påvirker alt som bygges der.\nDette er spesielt viktig med bruk av tredjepartspakker, og et minimum her bør være at pakker pinnes til spesifikke versjoner og at en aldri henter siste versjon av en pakke automatisk.\nVeien videre Microsoft: Azure Pipelines Github: Github Actions OWASP: Top 10 CI/CD Security Risks OWASP: CI/CD Security Cheat Sheet ","categories":"","description":"Når vi bygger en løsning er det ulike hensyn som må tas. Er det innafor for kunden å bygge i skymiljøer administrert av tredjepart, eller må dette skje i egne miljø styrt av oss elle kunden?    \n","excerpt":"Når vi bygger en løsning er det ulike hensyn som må tas. Er det …","ref":"/no/deploye/bygg/","tags":"","title":"Bygging"},{"body":"Classification Most organizations have routines and processes for data classification, typically distinguishing between these or similar levels:\nOpen Internal Confidential Restricted Depending on this classification, there may be different requirements for securing data. Open data typically has no restrictions, while data classified as “restricted” may have limitations such as:\nstrict requirements for access information can only be processed or stored in approved systems requires multi-factor authentication before access has restrictions regarding the use of cloud services or the geographical location of where data is stored This needs to be clarified with the client at the start of the project to ensure compliance. If the client does not use data classifications, one should still assess the sensitivity of the data to be processed to ensure that necessary measures are implemented.\nPrivacy If the delivery team is to handle personally sensitive information, it is important that the team familiarizes itself with the requirements surrounding this. The Norwegian Data Protection Authority has published a guide for “Software development with built-in privacy” (in Norwegian) which provides useful insight into the issue.\nImportant points one must be aware of are that:\ninformation should not be stored longer than the purpose of collecting it implies certain types of information should not be registered under any circumstance we must consider the use of-, and restrictions on using production data for testing users have the “right to be forgotten” where they can demand that personal information is deleted we must deal with privacy also in the context of backup - we don’t necessarily need to delete individuals from backups, but we must ensure that “the right to be forgotten” is maintained during a restore. If we process this type of information on behalf of clients, they will normally require that we sign a data processing agreement. If this is not in place, it must be discussed with the client’s representative.\nData for Use During Development and Testing If data is used in connection with development and testing, it is important to consider classification and sensitivity. Development environments often have a different level of security than production environments, and this practically means that we cannot always use real data for development.\nThe team must check the need for anonymizing the data before it is used outside the production environment, so as to maintain the need for data amount, filling rate, and quality while ensuring that the client’s data does not go astray.\nThis is especially important if development occurs in Bouvet’s infrastructure but with a production environment located at the client’s site. In such cases, it is vital that Bouvet has documented routines regulating where and how data is stored and used, and how and when it should be deleted. This must be clarified in consultation with the client so that there is no doubt about responsibility, duties, and risk.\nMore Information Datatilsynet: Programvareutvikling med innebygd personvern (in Norwegian) NSM: Kartlegg enheter og programvare (in Norwegian) ","categories":"","description":"Most organizations operate with various classification levels for both data and systems. The classification level dictates how data is used, where it is stored, and who can access it. These are key requirements for any development project and must be clarified in advance.\n","excerpt":"Most organizations operate with various classification levels for both …","ref":"/plan/data-and-classification/","tags":"","title":"Data and Classification"},{"body":" Kort oppsummert De fleste organisasjoner opererer med ulike klassifikasjonsnivå på både data og systemer. Klassifiseringen gjøres ofte med bakgrunn i hvordan data brukes, hvor det lagres og hvem som kan aksessere disse. Dette er nøkkelkrav for ethvert utviklingsprosjekt og må avklares i forkant. Klassifisering De aller fleste organisasjoner har rutiner og prosesser for klassifisering av data, for eksempel i følgende nivå:\nÅpent Internt Konfidensielt Begrenset Avhengig av denne klassifiseringen kan det foreligge ulike krav til sikring av data. Åpne data har typisk ingen begrensninger, mens data klassifisert som “begrenset” kan ha begrensninger som at en\nhar strenge krav til innsyn kun kan behandle informasjonen i egne systemer krever flerfaktor autentisering før aksess har restriksjoner i forhold til bruk av skytjenester eller hvor data lagres Dette avklares med kunde i oppstarten av prosjektet slik at en kan sikre nødvendig etterlevelse. Dersom kunden ikke har et forhold til dataklassifisering, bør en likevel kartlegge sensitiviteten til dataene som skal behandles for å sikre at vi innfører nødvendige tiltak.\nPersonvern Dersom leveranseteamet skal behandle personsensitive opplysninger, er det viktig at teamet setter seg inn i kravene rundt dette. Datatilsynet har publisert en egen veileder for “Programvareutvikling med innebygd personvern” som gir nyttig innblikk i problemstillingen.\nViktige punkter en er nødt å være klar over er at\ninformasjon ikke skal lagres lenger enn hensikten med å samle den inn tilsier enkelte typer informasjon ikke skal registreres under noen omstendighet vi må ha et forhold til bruk av produksjonsdata i testsammenheng og restriksjoner på dette brukere har “retten til å bli glemt” der personinformasjon kan kreves slettet vi må forholde oss til personvern også i backupsammenhenger - vi trenger ikke nødvendigvis å slette enkeltpersoner fra backup, men vi må sikre at “retten til å bli glemt” ivaretas ved en restore. Dersom vi behandler denne type informasjon på vegne av kunder skal de normalt kreve at vi signerer en databehandleravtale. Dersom dette ikke er på plass må det følges opp mot kundeansvarlig.\nData til bruk under utvikling og testing Dersom en bruker data i forbindelse med utvikling og testing, er det viktig å ha et forhold til klassifisering og sensitivitet. Dev-miljøer har ofte et annet sikringsnivå enn produksjonsmiljøet, og dette gjør i praksis at vi ikke alltid kan bruke relle data til utvikling.\nTeamet må sjekke behovet for anonymisering av dataene før disse brukes utenfor produksjonsmiljøet, slik at en ivaretar behovet for mengden data, fyllingsgrad og kvalitet samtidig som at en ikke risikerer at kundens data kommer på avveie.\nDette er spesielt viktig dersom utvikling skjer i Bouvets infrastruktur, men med produksjonsmiljø plassert hos kunden. I slike tilfeller er det viktig at Bouvet har dokumenterte rutiner som regulerer hvor og hvordan data oppbevares og brukes, og hvordan og når disse skal slettes. Dette må gås opp i samråd med kunde slik at det ikke er noe tvil rundt ansvar, plikter og risiko.\nVeien videre Datatilsynet: Innebygd personvern NSM: Kartlegg enheter og programvare ","categories":"","description":"En introduksjon til data og dataklassifisering \n","excerpt":"En introduksjon til data og dataklassifisering \n","ref":"/no/planlegge/data-og-klassifisering/","tags":"","title":"Data og Klassifisering"},{"body":"Hemmeligheter er representert i utviklingsprosjekter i form av connection strings, passord, nøkler, sertifikater og alt annet som regnes som sensitiv informasjon vi ikke ønsker at andre skal få kjennskap til.\nDet finnes mange ulike tilnærminger til hvordan disse skal håndteres, og dette har også endret seg etter hvert som nye tjenester dukker opp. For skyløsninger har tjenester som Azure Key Vault og liknende nærmest blitt en standard, da disse tjenestene håndterer flere aspekter av hvordan en bruker og forvalter hemmeligheter.\nGrunnprinsipper for håndtering av hemmeligheter Hemmeligheter skal aldri hardkodes eller sjekkes inn i versjonskontrollsystemer Verifiser etterlevelse ved å skanne koden - avvis commits med hemmeligheter og roter disse øyeblikkelig! Ha kontroll på hvilke hemmeligheter du har og hvilke tilganger disse har Begrens levetiden på hemmelighetene - ingen hemmeligheter bør leve mer enn et år, passord og nøkler mye kortere Teammedlemmer bør ikke ha tilgang til alle hemmeligheter alltid, elever eller legg på tilgang ved behov Kryptografi og hashing Kryptografi og hashalgoritmer er komplekse tema, og det krever store ressurser og mye kompetanse for å bygge gode algoritmer som er sikre. Av denne enkle grunn skal du aldri lage egne, uansett hvor finurlig og sikker den ser ut til å være.\nDet du derimot skal gjøre, er å:\nSette deg inn i best-practices for ditt programmeringsspråk, rammeverk og plattform Sikre at du ikke bruker sårbare algoritmer som f.eks. SHA1, MD5 eller DES For kryptografi; sett deg inn i hvilke anbefalinger som gjelder for nøkkellengder og anbefalinger ift bruk Husk Hemmeligheter skal aldri sjekkes inn i kildekodesystemet! Veien videre Azure Key Vault - Quickstart for .NET ","categories":"","description":"Alle utviklingsprosjekter har behov for hemmeligheter som connection strings, identiteter, passord, sertifikater og annet. Disse må oppbevares på en trygg måte, og vi må sikre at vi bruker dem i en sikker kontekst med riktige støtteverktøy og prosesser.\n","excerpt":"Alle utviklingsprosjekter har behov for hemmeligheter som connection …","ref":"/no/utvikle/hemmeligheter/","tags":"","title":"Hemmeligheter"},{"body":"1. Skap bevissthet i leveranseteamet Du kan gjerne begynne med å stille deg selv noen spørsmål?\nHva gjør dette prosjektet jeg jobber med egentlig? Hva er kritisk for at systemet skal fungerer? Hvordan kan dette systemet misbrukes, hvilke angrepsflater eksisterer i systemet? Eksisterer det en oppdatert trusselmodell med dertil tiltak for å forhindre utnyttelse av svakhetene? Når du begynner å skape deg en bevissthet så kan vi gå videre å finne ut av mer. Nå kan du begynne å ta litt initiativ i teamet ditt.\nEt godt startsted er å organisere en trusselmodellerings-øvelse. Du trenger ikke kunne noe om trusselmodellering, men du kan få litt støtte her Threatmodeling manifesto. Målet med denne trusselmodelleringen er at du og teamet skal få et bevisst forhold til trusler og kanskje få i gang tankeprosessen rundt mottiltak.\nVurder å etablere et bug bounty program (premiering for å finne bugs) eller noe som får teamet ditt med på å aktive finne utfordringer som bør/må løses.\nVær litt kreativ og forsøk å få med teamet, en Security Champion som ikke får med seg teamet får ofte ikke gjort så mye som han/hun ønsker.\n2. Har vi kontroll på hele prosjektet vårt? Hvis svaret er ja, så retter vi på det til nei. Det er alltid mer som kan gjøres. Vi har laget en sjekkliste som bør sjekkes ut for hvert eneste prosjekt vi er involvert i; alle leveranseteamene våre bør ha et forhold til punktene i denne og hvilken risiko de utgjør dersom en ikke innfører nyttige tiltak. Listen finner du her.\nGår man gjennom den listen får man støtte til å få kontroll på blant annet:\nAnsvar og rutiner Tredjepartsprogramvare Bygg og deploy av løsninger Disaster recovery Business Continuity Infrastruktur Kildekode Husk du trenger ikke ta alt på en gang få med deg teamet og gjør del for del til dere har enda bedre kontroll på prosjektet. Du trenger ikke kunne alt om dette her men sammen i teamet ditt bør dere klare å finne ut av det.\n3. Beskytte brukere og bedriftens rykte Basert på etikken som læres bort i forsvaret får vi noen lure spørsmål vi kan bruke som utgangspunkt.\nEr det lov? Er løsningen vår lovlig, eller risikerer vi f.eks bøter fra datatilsynet? Burde vi utbedre dette? Er det taktisk lurt? Vi stryker taktisk her og endrer til lurt. Er det lurt å lage denne featuren eller er det lurt å sette det opp slik? Kan jeg leve med det? Eksempel tåler vi å lage en løsning som kan brukes til trakasering? ref =\u003e Lett å trakassere via vipps Tåler vi at dette havner øverst på VG? Russland stod bak Nortura Hacking 4. Teknisk gjennomgang av løsninger Her er det på tide å se på en klassiker som heter OWASP Top 10 og sørge for at vi har unngått disse tabbene, men dette er basic. Skal vi virkelig har kontroll på koden og løsningene må vi gå løs på andre tiltak - du finner flere av disse beskrevet under artikkelen om sikkerhetspraksiser.\nUavhengig av din bakgrunn (utvikler, tester, prosjektleder osv) kan punkt 1, 2 og 3 gjøres av alle.\n","categories":"","description":"Gratulerer du har nå blitt en av de som jobber for å skape en bedre verden! Det vanskeligste er nå gjort, så nå skal vi bare å begynne med å ta små skritt i riktig retning.\n","excerpt":"Gratulerer du har nå blitt en av de som jobber for å skape en bedre …","ref":"/no/security-champion/hva_gj%C3%B8r_en_sc/","tags":"","title":"Hva gjør en Security Champion"},{"body":"Nettverk er en grunnleggende komponent i alt vi lager, og det er viktig med en grunnleggende forståelse for hvordan dette fungerer og hvordan det kan utnyttes av andre.\nRiktig konfigurasjon av nettverk er viktig for både rene skyløsninger, hybride nettverk og rene on-prem-løsninger. Nettverk er et stort fagfelt, med store variasjoner i bruksområde, sikkerhet og kompleksitet. Under dekker vi grunnleggende konsepter for kommunikasjon til og fra servere og nettjenester.\nZero trust arkitektur Zero trust er et viktig konsept innen nettverksdrift. Kort fortalt så skal man aldri stole på noe som kommer fra andre systemer, og du skal anta at all kommunikasjon vil bli kompromittert. Zero trust kan ikke løses bare ved å sikre nettverket, men må være et mål i seg selv når en designer løsninger og infrastrukturen rundt disse. Ved å implementere zero-trust vil du fjerne mange potensielle angrepsvektorer og dermed beskytte tjenestene som benytter nettverket.\nFå oversikt over nettverket Viktig Ha kontroll på hvilke IP-adresser og porter du eksponerer, og hvilke tjenester som lytter på portene. Undersøk brannmurregler, se i logger og skann egne systemer med nmap. Ha oversikt over hvilke IP-adresser, porter og protokoller som et IT-system eksponerer mot utsiden. Dette gjelder uavhengig av om du skal sette opp et nytt, endre på eksisterende eller bare undersøke hva du allerede har. En målrettet angriper vil kartlegge åpne endepunkter for å finne angrepsmål, og det har vært flere eksempler på at datainnbrudd begynner med en bortglemt, usikker tjeneste.\nSom utviklere og systemansvarlige er det kritisk at vi vet akkurat hvilke tjenester som er åpne for hvem og hvorfor de er det.\nNår man setter opp nye systemer har man gode muligheter til å få kontroll over hva som eksponeres. Hovedregelen etter Zero trust-arkitekturen bør være å begynne med at alt er stengt, og så åpne kun de porter og protokoller som trengs. Nye komponenter bør isoleres fra eksisterende systemer.\nI eksisterende systemer kan det være vanskelig å få oversikt over hva som er eksponert, spesielt i hybride eller on-prem oppsett. Å bare stenge ned alt som ikke er dokumentert kan også være risikabelt, da dette kan ramme legitime systemer. Dersom en jobber i kundens infrastruktur, ta gjerne kontakt med en eventuell nettverksavdeling for hjelp til kartlegging.\nSkanning av nettverk For å finne åpne porter og tjenester bør man skanne både public og private IP-masker fra ulike steder. Husk at interne nettverk kan følge andre nettverksruter enn ekstern trafikk, og dermed se forskjellige åpninger. Det samme gjelder i sitasjoner der en har kontornett, VPN, DMZ/gjestenett eller andre åpne nett.\nDet finnes verktøy og tjenester som gjør kartleggingen enklere. nmap er industristandarden og FOSS, og den egner seg utmerket til å skanne IP-masker og detektere åpne UDP-, TCP- og SCTP-porter. Hvis du mangler oversikt, er nmap et godt sted å starte.\nAdvarsel Bruk av scannerverktøy som `nmap` skal alltid avklares med eiere av infrastruktur og nettverk. Dersom du sitter på et Bouvet-kontor og scanner Azure-miljøet til en kunde, kan du lett trigge alarmer hos både Bouvet og kunden, samt ISP. Isolasjon av tjenester Viktig Bruk brannmur til å begrense trafikk innad i systemer og mellom systemer og Internett. Bruk allowlist hvis mulig. Filtrer trafikk i applikasjonslaget hvis nødvendig. Brannmur er en fellesbetgegnelse på barrierer i nettverk som stopper uønsket trafikk. I de fleste sammenhenger er definisjonen litt snevrere, hvor det er snakk om barrierer i TCP/IP-laget, men en brannmur kan også operere i applikasjonslaget.\nFor å håndheve en zero-trust arkitektur må alle komponenter isoleres og kun gjøres tilgjengelig for de tjenestene som de selv skal konsumere eller levere data til. Det gjør det nødvendig med brannmur mellom komponenter i samme applikasjon, mellom applikasjoner og mellom applikasjon og Internett. Har du en applikasjon med en database, et backend-API og et web-API, er det gunstig om du kan sette brannmurregler mellom komponentene som kun tillater den trafikken som er nødvendig. Se diagrammet under for eksempel.\nBrannmurer bør alltid droppe all inngående og utgående trafikk som standard, og heller åpnes eksplisitt for legitime forbindelser. Begrens alltid portåpninger til spesifikke porter og protokoller der det er mulig. Unngå bruk av “Any” som protokoll!\nBruk også brannmurer mellom alle tjenester internt i nettverket for å sikre at en har flere lag med beskyttelse om ett skulle feile. Segmentering av nettverket slik at hver funksjon har sitt subnett vil også hjelpe.\nUnngå å sende trafikk over internett selv til egne skytjenester, bruk private endepunkter og VPN-tunneller der dette er mulig. Tjenester som må eksponeres mot andre systemer (både interne, eksterne og på internett) bør legges bak sikkerhetsfunksjoner som web application firewalls og/eller api gateways, og en må sikre at disse også beskytter mot eksempelvis DDOS-angrep.\nSend all utgående trafikk gjennom en egen proxytjeneste som blokkerer alt som standard, whitelist heller etter behov. Eksponer aldri tjenestene direkte dersom du kan unngå det. Å eksponere tjenester på andre porter enn standardportene er ikke en god ide, et scan av nettverket vil fort avsløre dette.\nKonfigurasjon Konfigurasjon av nettverk bør automatiseres i så stor grad som mulig, helst ved bruk av et CI/CD-system.\nBegrens hvem som kan konfigurere både nettverket og nettverksregler direkte Sett opp Just-in-time (JIT)-tilgang der det er mulig Begrens hvor nettverket kan redigeres fra (f.eks. kun på innsiden av en on-prem brannmur) Script alle regler som kan scriptes Bruk kildekodekontroll Ha ekstra sikkerhet på repos som inneholder kilden til nettverket, beskytt både mot lesing og skriving Bruk verktøy som Snyk for å kjøre analyse av script Scriptene bør kjøres regelmessig og automatisk (minst hvert døgn) Dersom ukjente regler oppdages skal det opprettes varsler Alle ukjente regler slettes eller deaktiveres Alternativt kan man bruke andre metoder som oppdager endring fra ønsket konfigurasjon Ta backup av eller dokumenter alle regler som settes opp uten scripting Dokumenter alle regler som settes opp / håndteres av personer utenfor ditt team Veien videre IBM: What is networking Wikipedia: Zero trust ","categories":"","description":"Introduksjon til ansvarsfordeling i leveranser - hva må vi ha klarhet i?\n","excerpt":"Introduksjon til ansvarsfordeling i leveranser - hva må vi ha klarhet …","ref":"/no/designe/nettverk/","tags":"","title":"Nettverkskonsepter"},{"body":"Secrets in development projects are represented as connection strings, passwords, keys, certificates, and any other sensitive information we do not want others to know about.\nThere are many different approaches to handling these, and this has evolved as new services emerge. For cloud solutions, services like Azure Key Vault and similar have almost become standard, as these services handle multiple aspects of how to use and manage secrets.\nBasic Principles for Handling Secrets Secrets should never be hard-coded or checked into version control systems Verify compliance by scanning the code - reject commits with secrets and rotate them immediately! Keep track of which secrets you have and what access they provide Limit the lifetime of secrets - no secrets should live more than a year, passwords and keys much shorter Team members should not always have access to all secrets; elevate or provide access as needed Cryptography and Hashing Cryptography and hashing algorithms are complex topics, and it requires significant resources and a lot of competence to build good algorithms that are secure. For this simple reason, you should never create your own, no matter how clever and secure it seems to be.\nWhat you should do instead is:\nFamiliarize yourself with best practices for your programming language, framework, and platform Ensure you are not using vulnerable algorithms such as SHA1, MD5, or DES For cryptography, understand the recommendations for key lengths and usage Remember Secrets should never be checked into the source code system! More Information Azure Key Vault - Quickstart for .NET Github: Secret scanning ","categories":"","description":"All development projects require secrets such as connection strings, identities, passwords, certificates, and much more. These must be stored securely, and we must ensure that we use them in a secure context with the right support tools and processes.\n","excerpt":"All development projects require secrets such as connection strings, …","ref":"/develop/secrets/","tags":"","title":"Secrets"},{"body":"It’s not a given that all points are relevant for every project, or that implementing all measures is desirable. Each team and delivery manager must assess cost/benefit and what responsibility and risk is assumed by not introducing measures. Security requires continuous work, so review the checklist regularly to see if there are measures that can or should be introduced so that nothing is overlooked.\nDownload the checklist and implement it as part of the source code in your project!\nPlan Is it clear what responsibilities we have in the delivery, and is the rest of the responsibility clearly allocated? Are the system’s data classified and handled accordingly? Are data in the development and test environments also handled according to the classification? If the application becomes unavailable for shorter or longer periods, what consequences does this have for us and the customer? Is there a defined SLA for the application? In the event of an incident, have we clarified who should be contacted at Bouvet and at the customer? Is there a defined plan for how and how often backups should be taken? Is there a defined plan for disaster recovery? Has the team clarified which tools should be used and how they should be handled? Have control mechanisms been defined to maintain security in the project? Design Is it clear what security requirements apply to the solution? Have the necessary sketches/diagrams of the system been created and updated? Does the team have the necessary overview of the network the system uses? Are the environments segregated to reduce exposure in the event of incidents? Has necessary authentication been set up for accessing the system? Has necessary authorization been set up for actions in the system? Has threat modeling of the solution been conducted? Does the team have the necessary expertise for the project? Develop Are the development environments well described? Are secrets and similar items handled according to best practices? Is data from other systems validated? Are there routines to protect against today’s most common attack types? Are there routines to protect against software supply chain attacks? Are there routines to secure internal components operated by the team? Is security analyzed through testing or other forms of analysis? Is necessary information about the system documented, updated, and stored securely? Deploy Have automated security measures been set up? Does the team have procedures to secure the build environment? Is a review conducted before deployment? Is penetration testing planned in connection with deployment? Manage Has the team verified that the network diagram is correctly implemented? If the customer or others require an audit of the solution, has the team planned how this can be carried out? Has the necessary logging been set up to detect and get an overview of unwanted incidents? Are logs stored so that they cannot be tampered with? Does the team have a routine to protect against vulnerable dependencies? Does the team have a routine for practicing system recovery? Does the team have a procedure for incident handling and a contingency plan if the solution is attacked or goes down? ","categories":"","description":"Security isn't just about technical measures and code scanning, but much more. This checklist provides a starting point for assessing the level of security, responsibility, and risk in deliveries, and all development teams should relate to its content unless otherwise agreed with the customer.\n","excerpt":"Security isn't just about technical measures and code scanning, but …","ref":"/checklist/","tags":"","title":"Security Checklist"},{"body":"Det er ikke gitt at alle punktene er relevante i alle prosjekter, eller at innføring av alle tiltak er ønskelig. Hvert enkelt team og leveranseansvarlig må selv vurdere kost/nytte og hvilket ansvar og risiko en påtar seg ved å ikke innføre tiltak. Sikkerhet krever kontinuerlig arbeid, så se over sjekklista jevnlig for å se om det er tiltak som kan eller bør innføres slik at en ikke overser noe.\nLast ned sjekklisten og implementer den som en del av kildekoden i ditt prosjekt!\nPlanlegge Er det klart hvilket ansvar vi har i leveransen og er øvrig ansvar klart fordelt? Er data i systemet klassifisert og håndteres deretter? Håndteres data i utvikling- og test-miljø også i henhold til klassifisering? Dersom applikasjonen blir utilgjengelig i kortere eller lengre perioder, hvilke følger får dette for oss og kunden? Er det definert en SLA for applikasjonen? Ved en hendelse, har vi avklart hvem som skal kontaktes i Bouvet og hos kunden? Er det definert en plan for hvordan og hvor ofte backup skal tas? Er det definert en plan for disaster recovery? Har teamet avklart hvilke verktøy som skal brukes og hvordan disse skal håndteres? Er det definert kontrollmekanismer for å opprettholde sikkerhet i prosjektet? Designe Er det klart hvilke sikkerhetskrav som gjelder for løsningen? Er nødvendige skisser/diagrammer av systemet laget og oppdatert? Har teamet den nødvendige oversikten over nettverket som systemet bruker? Er miljøene segregert for å redusere eksponering av hendelser? Er det satt opp nødvendig autentisering på tilgang til systemet? Er det satt opp nødvendig autorisering på handlinger i systemet? Er det gjennomført trusselmodellering av løsningen? Har teamet den nødvendige kompetansen for prosjektet? Utvikle Er utviklingsmiljøene godt beskrevet? Håndteres hemmeligheter og liknende i henhold til gjeldende best-practice? Valideres data som hentes fra andre systemer? Er det rutiner for å sikre mot dagens vanligste angrepstyper? Er det rutiner for å sikre seg mot software supply chain angrep? Er det rutiner for å sikre interne komponenter som driftes av teamet? Analyseres sikkerheten gjennom testing eller annen form for analyse? Er nødvendig informasjon om systemet dokumentert, oppdatert og lagret på et sikkert sted? Deploye Er det satt opp automatiserte sikkerhetstiltak? Har teamet et forhold til sikring av byggmiljø? Kjøres det review i forkant av deployment? Er det planlagt for penetrasjonstesting i forbindelse med deployment? Forvalte Har teamet verifisert at nettverksdiagrammet er korrekt implementert? Dersom kunde eller andre krever audit av løsningen, har teamet planlagt for hvordan dette kan foregå? Er det satt opp nødvendig logging for å oppdage og få oversikt over uønskede hendelser? Lagres loggene slik at de ikke kan manipuleres? Har teamet en rutine for å sikre mot sårbare avhengigheter? Har teamet en rutine for å øve på gjenoppretting av systemet? Har teamet en prosedyre for hendelseshåndtering og en beredskapsplan dersom løsningen angripes eller går ned? ","categories":"","description":"Sikkerhet handler ikke bare om tekniske tiltak og kodeskanning, men også mye annet. Denne sjekklisten gir et utgangspunkt for å vurdere sikkerhetsnivå, ansvar og risiko i leveranser, og alle utviklingsteam skal ha et forhold til innholdet med mindre annet er avtalt med kunden. \n","excerpt":"Sikkerhet handler ikke bare om tekniske tiltak og kodeskanning, men …","ref":"/no/sjekklisten/","tags":"","title":"Sjekklisten for sikkerhet"},{"body":"When designing a solution, it’s essential to have clear and comprehensive drawings and diagrams that show the planned design. This is already done by many development teams without necessarily being a formal requirement, but it’s still worth mentioning here.\nSystem diagrams should provide enough information to:\nValidate that the implementation matches the design Use them for threat modeling, pentesting, or similar activities Be used by those managing the solution to get a good overview of components and data flow Be used by the delivery team for onboarding new colleagues or handover to other teams Although there is a lot that can be documented here, we focus on the most important aspects:\nHigh-level system sketch with the main logical components Detailed network diagram with resources, services, and networks Data flow diagram showing how data flows between components in the solution IAM diagram showing identities, accesses, and roles and where they are sourced from Important dependencies – overview of other systems, services, resources, on-prem/cloud Examples Below are examples of the points listed above. The diagrams you produce do not need to be identical; the most important thing is that they contain enough information to be used for their intended purpose and are understandable to the team.\nTo easily get started with designing diagrams and sketches, tools like Miro or Draw.io can be used. The latter is free and offers storage of drawings in the browser, locally on the machine as XML, and much more.\nKeep in mind: The diagrams do not need to be perfect or contain every conceivable detail. Assess the need and work on gradual improvements over time. High-level System Diagram This diagram should be a high-level introduction to the solution, showing all the major components and interactions between them. Network Diagram The goal of the network diagram is to show the network topology, with all the various virtual networks, subnets and resources or servers and firewall openings between them.\nKeep in mind: Network diagrams should be created for all environments, providing necessary information on all resources in all environments, as well as connections between them. Data Flow Diagram The data flow diagram shows the data flow of the solution. This should include all direct dependencies not part of the project, so that it is possible to understand where data originates and all the nodes it interacts with.\nIAM Diagram Dependencies This can also be drawn, but often a simple list is enough. This should contain all direct dependencies of the solution being developed, with a brief summary containing descriptions of what the team depend on.\nOn-prem database server production-sql-01 Uses three views maintained by the team Data is imported via ADF Company’s data platform, datalake datalake-somedata-prod01 Consumes datasets in the container production-data-container Lineage is visible in Purview Uses only datasets approved by the data owner More Information Tool: Miro - Use SSO login at Bouvet Tool: Draw.io ","categories":"","description":"It's important to have a good foundation when building quality solutions, and drawings and diagrams showing the infrastructure, data flow, networks, and access control are crucial elements. Without this information, it is difficult to validate if the implementation matches the intended design.\n","excerpt":"It's important to have a good foundation when building quality …","ref":"/design/system-diagrams-and-drawings/","tags":"","title":"System diagrams and drawings"},{"body":"Når vi designer en løsning, er det viktig med gode og oversiktlige skisser og diagrammer som viser designet slik at det planlagt. Dette gjøres allerede av mange utviklerteam uten at det nødvendigvis stilles krav til det, men det er likevel greit å nevne her.\nSystemskissene bør gi nok informasjon til at en i etterkant kan\nValidere at implementasjonen er som designet Bruke dem ifm trusselmodellering, pentesting eller liknende Brukes av den/de som forvalter løsningen for å få en god oversikt over komponenter og dataflyt Brukes av leveranseteamet for onboarding av nye kollegaer eller handover til andre team. Selv om det er mye som kan dokumenteres her, fokuserer vi bare på det viktigste her:\nOverordnet systemskisse med de viktigste logiske komponentene Detaljert nettverksskisse med ressurser, tjenester og nettverk Dataflytdiagram - viser hvordan data flyter mellom komponenter i løsningen IAM-diagram - Viser identiteter, tilganger og roller samt hvor de hentes fra Viktige avhengigheter – oversikt over andre systemer, tjenester, ressurser, onprem/cloud Eksempler Under finner du eksempler på punktene listet ovenfor. Diagrammene du produserer trenger ikke å være like, det viktigste er at de inneholder nok informasjon til at de kan brukes for det tiltenkte formålet og at de er forståelige for teamet.\nFor enkelt å komme igang med design av diagrammer og skisser kan verktøy som Miro eller Draw.io brukes. Sistnevnte er gratis og tilbyr lagring av tegniner i nettleser, lokalt på maskinen som XML og mye annet.\nHusk Diagrammene trenger ikke å være perfekte, eller inneholde alle tenkelige detaljer. Vurder behovet og jobb med gradvise forbedringer over tid. Overordnet systemskisse Netverksdiagram Husk: Nettverksdiagram bør lages for alle miljø, slik at en får nødvendig informasjon på alle ressurser i alle miljø, samt forbindelser mellom disse. Dataflytdiagram IAM-diagram Avhengigheter On-prem databaseserver production-sql-01 Bruker tre view vedlikeholdt av teamet Data hentes inn via ADF Selskapets dataplattform, datalake datalake-somedata-prod01 Konsumerer datasett i containeren production-data-container Lineage er synlig i Purview Bruker kun datasett godkjent av dataeier Veien videre Verktøy: Miro - Bruk SSO innlogging i Bouvet Verktøy: Draw.io ","categories":"","description":"Det er viktig med et godt underlag når vi skal bygge gode løsninger, og skisser og diagrammer som viser oppbygningen av infrastruktur, dataflyt, nettverk og tilgangsstyring er viktige elementer. Uten denne informasjonen er det vanskelig å validere om sluttresultatet matcher intensjonen.\n","excerpt":"Det er viktig med et godt underlag når vi skal bygge gode løsninger, …","ref":"/no/designe/systemskisser/","tags":"","title":"Systemskisser"},{"body":"Regardless of your background (developer, tester, project manager, etc.), points 1, 2, and 3 can be done by everyone.\n1. Create Awareness in the Delivery Team You can start by asking yourself a few questions:\nWhat does this project I am working on actually do? What is critical for the system to function? How can this system be misused, what attack surfaces exist in the system? Is there an updated threat model with corresponding measures to prevent the exploitation of weaknesses? As you begin to create awareness, you can move on to find out more. Now you can start taking some initiative in your team.\nA good starting point is to organize a threat modeling exercise. You don’t need to know anything about threat modeling, but you can get some support here and on the Threatmodeling manifesto website. The goal of this threat modeling is for you and your team to become aware of threats and perhaps start the thought process around countermeasures.\nConsider establishing a bug bounty program (rewarding for finding bugs) or something that gets your team actively involved in finding challenges that should/must be solved.\nBe a bit creative and try to get the team involved; a Security Champion who doesn’t get the team involved often doesn’t accomplish as much as they would like.\n2. Do We Have Control Over Our Entire Project? If the answer is yes, let’s correct that to no. There is always more that can be done. We have created a checklist that should be checked for every single project we are involved in; all our delivery teams should have a relationship with the points in this list and understand the risks they pose if useful measures are not implemented. You can find the list here\nGoing through this list helps you gain control over, among other things:\nResponsibilities and routines Third-party software Building and deploying solutions Disaster recovery Business Continuity Infrastructure Source code Remember, you don’t have to do everything at once; get the team involved and do it part by part until you have even better control over the project. You don’t need to know everything about this, but together with your team, you should be able to figure it out.\n3. Protect Users and the Company’s Reputation Based on the ethics taught in the military, we get some clever questions we can use as a starting point.\nIs it legal? Is our solution legal, or do we risk fines from the data protection authority? Should we improve this? Is it tactically smart? Let’s strike out “tactically” and change it to smart. Is it smart to create this feature or set it up this way? Can I live with it? For example, can we tolerate creating a solution that can be used for harassment? Ref =\u003e Easy to harass via Vipps (In Norwegian) Can we handle this being on the front page of VG? Russia was behind Nortura hacking 4. Technical Review of Solutions Now it’s time to look at a classic called OWASP Top 10 and make sure we have avoided these mistakes, but this is basic. To really have control over the code and solutions, we need to tackle other measures - you can find several of these described in the article on security practices\n","categories":"","description":"Congratulations, you have now become one of those who work to create a better world! The hardest part is now done, so let's start taking small steps in the right direction.\n","excerpt":"Congratulations, you have now become one of those who work to create a …","ref":"/security-champion/the-security-champion-role/","tags":"","title":"The Security Champion Role"},{"body":"Business Continuity Planning is not an IT-technical subject. But it is our responsibility as suppliers of an IT system to remind the customer that the system can become unavailable. The answer from this planning will help describe the requirements for the solution’s robustness and security level, and is crucial for finding the right balance of cost and performance for the system.\nHere it is important to consider\nThe criticality of the solution Possible workarounds if the solution is unavailable Consequences or extra work resulting from unavailability or when the solution becomes available again. Customer Expectations Do we have a Service Level Agreement with the customer that regulates uptime, availability, and similar, or does the customer have implicit expectations for this?\nThis must be clarified so that the team is aware of the consequences of downtime. In many projects, cloud components are used, where not all variables are under one’s control. Therefore, it is important early in the project to clarify the actual needs with the customer. We can ensure redundancy on all fronts if the customer wants it, but it will then cost accordingly.\nIncident Management All customers in Bouvet should have a defined contact point for incidents in Kunder (CRM). If there are other contact points from the team to the customer, such as a security operations center (SOC) or similar, it is also wise to document this so that incidents can be resolved as quickly as possible.\nIf an incident occurs and the customer or others need to contact the team, the usual practice is for the delivery manager to be the formal contact point in the Bouvet team.\nBackup Backup is important in all projects. Even if we do not have responsibility for the operation of infrastructure, source code systems, or other tools in many projects, we should be familiar common backup strategies, so that we can design and implement a solution that allows for these.\nIf we are responsible for operations, we are also responsible for ensuring that backups are performed. Common terms here are:\nRecovery Time Objective (RTO) - acceptable time to achieve normal state after a failure Recovery Point Objective (RPO) - acceptable data loss after a failure (measured in time) The backup and recovery solution must be designed based on these requirements, and we must ensure that this is maintained. Together with the customer, we must determine:\nHow much? Which data and systems should be subject to the backup regime. Can we differentiate between them? How often? Should we take backups once a week, every night, or every hour? How far back? How long should we store the backups? A common approach to backup is to run:\nDaily backups - stored for 30 days Weekly backups - stored for 6 months Monthly backups - stored for 2 years It is also important to consider where the backups are stored, so that one is best prepared for catastrophic events. This can be solved by having offline and offsite backups, i.e., backups stored on, for example, tape and kept at a different physical location than other backups.\nTest Backups that are not tested have no value - implement a strategy that includes testing restore from backup! Disaster Recovery Disaster Recovery in the planning phase involves developing a plan for what should be done to return to normal state as quickly as possible. It can be useful to think of this as “actions on,” i.e.; “If X happens, we do Y”.\nRecovery It will not be necessary to recreate services in all disaster events. Often, less extensive and manual error correction can suffice. Regardless, one should always have a plan for complete recovery. Having this can save you in most situations.\nPhysical infrastructure (fire, flood, earthquake, etc.) Do we have infrastructure elsewhere we can use? Can we move to an alternative data center? Virtual infrastructure Can infrastructure be recreated correctly and quickly enough? Document resources, dependencies, and operational procedures The use of Infrastructure as Code (IaC) will be a significant factor here Data and databases Total / bulk recovery: How do you recover large amounts of data / entire volumes? Individual files: How do you recover a single file, table, row or column? Support systems Remember that support systems can play an important role in the overall system. These must also be replaceable or recoverable in the event of incidents Examples: Git, CI pipeline, logging, and monitoring Scenarios to Discuss Deleted service: How do you restore a service that has been deleted? Corrupt service: Do you repair or restore a VM or other services with problems? Unavailable service: What happens if the services become unavailable? Here you need the definition of what is temporary / short-term downtime. Should you deploy a new service, do you already have one running as a hot-swap, or is it okay without one for a period? Compromised security: How do you handle it when a password has been leaked in some way? Expired password: How do you resume operations if a password or certificate has expired? Compromised identity / service user: What do you do if a managed identity or a service user has been compromised? Unavailable passwords: What do you do if the key vault service in the region you use goes down? Do you have backup and failover in another region? Malware: How do you recover the system after a malware attack? Do you need a partial or total rebuild of all services? Confidentiality breach: How do you handle someone gaining access to the service(s) you operate? Compromised admin: Do you need to plan for what happens if the owner of the subscription deletes your entire Azure subscription? Critical vulnerability: What happens when someone discovers a critical vulnerability in your application? It may be wise to have protocols ready for when you need to decide whether to shut down the service. More Information Wikipedia: Disaster Recovery ","categories":"","description":"If a catastrophic event occurs, we must know who to contact and what requirements the solution and delivery team must adhere to. This not only includes typical availability requirements but also how long recovery can take, how it should be done, and what is an acceptable data loss.\n","excerpt":"If a catastrophic event occurs, we must know who to contact and what …","ref":"/plan/business-continuity/","tags":"","title":"Business Continuity"},{"body":"Business Continuity Planning er ikke utelukkende et IT-teknisk anliggende, men det er vårt ansvar som leverandører av et IT-system å minne kunden på at systemet kan bli utilgjengelig.\nSvaret fra denne planleggingen vil være med å beskrive hvilke krav som stilles til løsningens robusthet og sikkerhetsnivå, og er avgjørende for å finne riktig balanse på kostnad og ytelse hos systemet.\nHer er det viktig å ha et forhold til\nKritikaliteten av løsningen Eventuelle workarounds dersom løsningen er utilgjengelig Konsekvenser eller merarbeid som følge av utilgjengelighet eller når løsningen igjen blir tilgjengelig. Kundens forventninger Har vi definert en Service Level Agreement (SLA) med kunden som legger føringer på oppetid, tilgjengelighet og liknende, eller har kunden implisitte forventninger til dette?\nDette må avklares slik at en kjenner konsekvensene nedetid vil få. I mange prosjekter benyttes det skykomponenter der en ikke har kontroll over alle variabler selv. Derfor er det viktig å tidlig i prosjektet avklare de faktiske behovene med kunden. Vi kan sikre redundans på alle fronter dersom kunden ønsker det, men det koster da deretter.\nDersom en går opp dette i forkant er det lettere å henvise til dokumentasjon og avtaler når løsningen blir utilgjengelig for å unngå dårlig stemning.\nHåndtering av hendelser Alle kunder i Bouvet skal ha et definert kontaktpunkt for hendelser i Kunder (CRM). Dersom det er andre kontaktpunkter fra teamet inn mot kunde som sikkerhetssenter (SOC) eller liknende er det lurt å dokumentere dette også slik at en kan løse oppståtte hendelser så raskt som mulig.\nDersom en hendelse oppstår og kunde eller andre har behov for kontakt med teamet, er det vanlige at leveranseleder er det formelle kontaktpunktet i Bouvet-teamet.\nBackup Backup er viktig i alle prosjekter. Selv om vi i mange prosjekter ikke har noe ansvar for drift av infrastruktur, kildekodesystemer eller andre verktøy, bør vi gjøre oss kjent med rutiner og begrensninger på området.\nDersom vi har ansvar for drift har vi også ansvar for at backup gjennomføres. Vanlige begrep her er\nRecovery Time Objective (RTO) - akseptabel tid for å oppnå normaltilstand etter svikt Recovery Point Objective (RPO) - hva er akseptabelt datatap etter svikt (målt i tid) Løsning for backup og recovery må designes ut ifra disse kravene, og vi må sikre at dette ivaretas. En må sammen med kunden ta stilling til\nHvor mye? Hvilken data og systemer skal være underlagt backupregimet. Kan det differensieres? Hvor ofte? Skal vi ta backup 1 gang i uken, hver natt, eller hver time? Hvor langt tilbake? Hvor lenge skal vi lagre backupene? En vanlig tilnærming til backup er å kjøre\nDaglige backups - disse lagres i 30 dager Ukentlige backups - disse lagres i 6 måneder Månedtlige backups - disse lagres i 2 år Det er også viktig å ha et forhold til hvor backupene lagres, slik at en kan være best mulig rigget mot katastrofale hendelser. Dette kan løses ved å ha offline og offsite backups, altså backups lagret på eksempelvis tape og oppbevart på en annen fysisk lokasjon enn øvrige backups.\nTest! Backup som ikke testes har ingen verdi - innfør rutiner for å teste at du kan restore fra backup! Disaster recovery Disaster Recovery i planleggingsfasen handler om å utvikle et planverk for hva som skal gjøres for å raskest mulig komme tilbake til normaltilstand. Det kan være nyttig å tenkte på dette som “actions on”, altså; “Hvis X inntreffer, så gjør vi Y”.\nGjenoppretting Det vil ikke være nødvendig å gjenskape tjenestene i alle disaster hendelser. Ofte kan man slippe unna med mindre omfattende og manuell feilretting. Uavhengig av dette bør man uansett ha en plan for fullstendig gjennoppretting. Har man det kan man redde seg fra de fleste situasjoner.\nFysisk infrastruktur (brann, flom, jordskjelv, etc.) Har vi servere et annet sted vi kan benytte? Kan vi flytte til et alternativt datasenter? Virtuell infrastruktur Kan infrastruktur gjenskapes korrekt og raskt nok? Dokumenter ressurser, avhengigheter, og operasjonelle prosedyrer Her vil bruk av Infrastructure as Code (IaC) være et viktig bidrag Data og databaser Total / bulkgjennopretting: Hvordan gjenoppretter du store mengder data / hele volumer? Enkeltfiler: Hvordan gjenoppretter du en enkelt fil? Støttesystemer Husk at støttesystemer kan spille en viktig rolle i det totale systmet. Disse må også kunne erstattes eller gjennopprettes ved hendelser Eksempelvis: Git, CI-pipeline, logging og monitorering Scenarier som kan diskuteres Slettet tjeneste: Hvordan gjenoppretter du en tjeneste som har blitt slettet? Korrupt tjeneste: Reparerer eller gjenoppretter man en VM eller andre tjenester med problemer? Utilgjengelig tjeneste: Hva skjer om tjenestene blir utilgjengelige? Her trenger du definisjonen av hva som er midlertidig / kortvarig nedetid. Skal du deploye ny tjeneste, har du allerede en som kjører som hot-swap eller går det greit uten en periode? Kompromittert sikkerhet: Hvordan håndterer du det når et passord har blitt lekket på noe vis? Utgått passord: hvordan gjenopptar du driften hvis et passord eller sertifikat har utløpt? (Hint: prøv å unngå dette) Kompromittert identitet / tjenestebruker: Hva gjør du hvis en managed identitet eller en tjenestebruker har blitt kompromittert? Utilgjengelige passord: Hva gjør du hvis key vaulttjenesten i regionen du bruker går ned? Har du backup og failover i en annen region? Malware: Hvordan gjenoppretter du systemet etter et cryptolockerangrep? Trenger du en delvis eller total gjenoppbygging av alle tjenester? Konfidensialitetsbrudd: Hvordan håndterer du at noen har kommet seg inn i tjenesten(e) du drifter? Kompromittert admin: Trenger du å planlegge for hva som skjer om eieren av subscription sletter hele Azure-subscriptionen din? Kritisk sårbarhet: Hva skjer når noen oppdager en kritisk sårbarhet i din applikasjon? Det kan være lurt å ha protokoller klare for når du skal ta et valg om du stenger tjenesten ned. Veien videre Wikipedia: Disaster Recovery ","categories":"","description":"Dersom en katastrofal hendelse oppstår må vi vite hvem som skal kontaktes, og hvilke krav løsningen og leveranseteamet må forholde seg til. Dette går ikke bare på typiske krav relatert til tilgjengelighet men også hvor lang tid en kan bruke på gjenoppretting, hvordan dette skal gjøres og hva som er akseptabelt tap av data.\n","excerpt":"Dersom en katastrofal hendelse oppstår må vi vite hvem som skal …","ref":"/no/planlegge/business-continuity/","tags":"","title":"Business Continuity"},{"body":"Get Involved with Regional Security Champions Most regions in Bouvet have their own Security Champions gatherings on a regular basis, where knowledge, tips, tricks, and much more are shared. Get involved here and help build a regional security culture in the developer teams!\nAll developers should be familiar with the basic principles of security and secure development, but to achieve this, we need to go out among people and share knowledge. OWASP Top 10 is always relevant, so if you feel like it - set up a session with colleagues in the surrounding units. You can make it super fancy and run demos of every single point, but you can just as easily make it low-threshold and simply talk through the points.\nThe most important thing is that you engage and help spread knowledge!\nGet Involved Nationally There is a national Security Champions community where you can get involved to meet like-minded individuals. Several conferences and user groups in Norway related to security offer opportunities to contribute, such as:\nSikkerhetsfestivalen (Lillehammer) NDC Security (Oslo) Stavanger Security Hangout (Stavanger) ","categories":"","description":"If you are interested in raising the security culture beyond the team, get involved! At Bouvet, we hold regular gatherings - Bouvet ONE - where we host talks on everything under the sun, often with dedicated security tracks. We have also held specific Bouvet ONE events dedicated to security. Here, everyone is free to contribute - all talks are appreciated, no matter how simple you might think your topic is.\n","excerpt":"If you are interested in raising the security culture beyond the team, …","ref":"/security-champion/contributing-outside-the-team/","tags":"","title":"Contributing outside the team"},{"body":"If you receive input from users or fetch data from other systems, you should never blindly trust it. OWASP Top 10 has listed various forms of vulnerabilities related to code injection at the top of their lists since the first one was published in 2004.\nEnsure that the data contains what you expect; if you import files, they must be scanned for malware before processing them further. Also, consider the need for using sandbox environments to process such files to limit the damage potential.\nUnderstand the threat landscape for the relevant file types. For example, it is possible to embed malware in an image; if this is not mitigated, the application may be vulnerable to this threat. Other file formats entail different types of threats that require other measures.\nAlso, consider using Content Security Policies to prevent data fetched from other systems but presented to the customer from resulting in a successful XSS attack.\nMore Information OWASP: Top 10 - 3: Injection OWASP: Input Validation Cheat Sheet OWASP: Injection Prevention Cheat Sheet ","categories":"","description":"Data is an attack vector; you should never blindly trust that it is safe, regardless of the source. This also applies when retrieving data from other systems!\n","excerpt":"Data is an attack vector; you should never blindly trust that it is …","ref":"/develop/data-validation/","tags":"","title":"Data Validation"},{"body":"Dersom du henter data fra andre systemer bør du aldri stole blindt på disse. OWASP Top 10 har hatt ulike former for sårbarheter relatert til kodeinjeksjon på de øverste punktene sine siden den første lista kom i 2004.\nUavhengig av hvor dataene kommer fra, skal du alltid behandle disse på linje med brukerinput fra et sikkerhetsperspektiv. Sjekk at du får det du forventer, og dersom du henter inn filer må disse skannes for malware før du behandler dem videre. Vurder også behovet for bruk av sandbox-miljø for å prosessere slike filer, slik at skadepotensialet begrenses.\nSett deg inn i trusselbildet for filtypene som er relevante, eksempelvis er det fullt mulig å embedde malware i et bilde; dersom dette ikke mitigeres vil applikasjonen kunne være sårbar mot denne trusselen. Andre filformater medfører andre typer trusler som krever andre tiltak.\nVurder også bruk av Content Security Policies for å unngå at data som hentes fra andre systemer men presenteres til kunden kan resultere i et vellykket XSS-angrep.\n","categories":"","description":"Data er en angrepsvektor, du må aldri stole blindt på at disse er trygge uavhengig av kilde!\n","excerpt":"Data er en angrepsvektor, du må aldri stole blindt på at disse er …","ref":"/no/utvikle/datavalidering/","tags":"","title":"Datavalidering fra andre systemer"},{"body":"When setting up runtime environments, it is important to consider how the solution we are developing can be built and deployed to these in a way that makes it easy and removes the need for a person to spend time and energy doing the same thing each time.\nWhen deploying an application, you start with the artifact that was built, which is then uploaded to the desired runtime environment. To ensure consistency, it is common to build only once so that the same artifact is deployed to multiple locations - if the environments are the same and the artifact is the same, we should see the same result everywhere.\nIt is common to have several steps in the pipeline that handle deployment to different environments, so that you only deploy to the next environment if the previous step was successful. If necessary, you can also restart a step in the pipeline if unexpected errors occur to rule out that it was the deployment itself that caused this.\nIn a deployment pipeline, it is important to consider when it is appropriate to deploy. Running a deployment should not be dangerous, as the entire process is automated. However, in many cases, you want to avoid rolling out changes or new functionality in certain environments before this is cleared with the product owner. To prevent someone from accidentally deploying to the wrong environment, there should be some approval steps along the way, where it is required that others on the team approve a deployment before it can start.\nMore Information Microsoft: Azure Pipelines Github: Github Actions OWASP: Top 10 CI/CD Security Risks OWASP: CI/CD Security Cheat Sheet ","categories":"","description":"When we deploy a solution, we move it from an artifact repository into the runtime environments. How this happens depends on the platform used.\n","excerpt":"When we deploy a solution, we move it from an artifact repository into …","ref":"/deploy/deploy/","tags":"","title":"Deploy"},{"body":"Når vi setter opp kjøremiljøer er det viktig å også tenke på hvordan løsningen vi utvikler kan bygges og deployes til disse på en måte som både gjør det enkelt og fjerner behovet for at en person skal måtte bruke tid og energi på å gjøre det samme hver gang.\nNår en deployerer en applikasjon tar man utgangspunkt i artifakten som ble bygget, som så lastes opp til ønsket kjøremiljø. For å sikre konsistens er det vanlig å bare bygge en gang, slik at man deployer det samme artifaktet flere steder - dersom miljøene er like og artifaktet er det samme, skal vi se det samme overalt.\nDet er vanlig å ha flere steg i pipelinen som håndterer deployment til ulike miljø, slik at en kun deployer til neste miljø dersom steget før var vellykket. Ved behov kan en også restarte et steg i pipelinen dersom det oppstår uventede feil for å utelukke at det var selve deploymenten som resulterte i dette.\nI en deployment pipeline er det viktig å ha et forhold til når det er greit å deploye. Å kjøre en deployment skal ikke være farlig, da hele prosessen er automatisert. Men i mange tilfeller vil en unngå å rulle ut endringer eller ny funksjonalitet i enkelte miljø før dette er klarert med produkteier. For å unngå at noen ved et uhell deployer til feil miljø bør en ha noen godkjenningstrinn underveis, der en eksempelvis setter som krav at andre i teamet skal godkjenne en deployment før den får starte.\nVeien videre Microsoft: Azure Pipelines Github: Github Actions OWASP: Top 10 CI/CD Security Risks OWASP: CI/CD Security Cheat Sheet ","categories":"","description":"Når vi deployer en løsning flytter vi den fra et artifaktlager og ut i kjøremiljøene. Hvordan dette skjer avhenger av platformen som brukes. \n","excerpt":"Når vi deployer en løsning flytter vi den fra et artifaktlager og ut i …","ref":"/no/deploye/deploy/","tags":"","title":"Deployering"},{"body":"I Bouvet kjører vi jevnlige samlinger - Bouvet ONE - der det kjøres foredrag om alt mellom himmel og jord, ofte med egne sikkerhetsspor. Vi har også kjørt egne Bouvet ONE dedikert til sikkerhet. Her er det fritt frem til å bidra - alle foredrag blir satt pris på, uansett hvor enkelt du selv mener noe måtte være.\nEngasjer deg i Security Champions regionalt De fleste regionene i Bouvet har egne Security Champions samlinger på jevnlig basis, der en deler kunnskap, tips, triks og mye annet. Engasjer deg her, og bidra til å bygge opp en regional sikkerhetskultur i utviklerteamene!\nAlle utviklere bør kjenne til grunnprinsipper for sikkerhet og sikker utvikling, men for at vi skal oppnå dette er vi nødt til å gå ut blant folk og dele kunnskap. OWASP Top 10 er alltid relevant, så om du føler for det - sett opp en gjennomgang med kollegaer i enhetene rundt deg. Du kan gjøre den superfancy og kjøre demoer av hvert eneste punkt, men du kan like fint gjøre den lavterskel og bare prate gjennom punktene.\nDet viktigste er uansett at du engasjerer deg og bidrar til å spre kunnskap!\nEngasjer deg nasjonalt Det finnes et nasjonalt Security Champions-fellesskap der du kan engasjere deg for å treffe likesinnede. Det kjøres også flere konferanser og brukergrupper i Norge relatert til sikkerhet der det er mulig å bidra, som eksempelvis\nSikkerhetsfestivalen (Lillehammer) NDC Security (Oslo) Stavanger Security Hangout (Stavanger) ","categories":"","description":"Dersom du er interessert i å løfte sikkerhetskulturen utenfor teamet, engasjer deg!\n","excerpt":"Dersom du er interessert i å løfte sikkerhetskulturen utenfor teamet, …","ref":"/no/security-champion/sc_utover_teamet/","tags":"","title":"Hvordan bidra utover teamet"},{"body":"Regardless of where a solution is deployed, we should ensure that it is monitored. Even if it is only available on the intranet with only internal users working from approved devices over VPN, logging information is important if one of these is compromised. A typical DevOps team will collect some information to help debug the application’s functionality, but we also need other information to assess the security context around it.\nRemember Regardless of the need, remember that privacy applies to logs as well! Do not collect more information than you need, and logs must be deletable after a given period. The goal of logging has three primary purposes:\nIntrusion detection - We must be able to detect if someone is attacking the system Investigation basis - We must have enough information to understand what happened, how it happened, and who did it Satisfy customer or external requirements, such as from authorities What Should We Log? What we log will vary greatly depending on who the customer is, the risk and threat landscape they operate in, and their needs for log information. In some cases, the customer will have its own security organization, typically a Security Operations Center (SOC), responsible for monitoring networks and applications. They will then have requirements for what and how to log, but if this does not exist, we must define our own requirements to have a starting point.\nBelow are some points that should be an absolute minimum, but the team must understand what is logged, why it is logged, and how this information relates to other requirements such as privacy.\nAuthentications and Failed Authentication Attempts If someone logs into the solution, this should be logged. This is especially important if it occurs from a place a user does not normally log in from, or if it happens with a different browser or client than usually seen. Failed logins should also be logged so that it is possible to act on them.\nErrors during JWT validation or other session-related errors should also be logged so that they can be reviewed afterward.\nUnauthorized Access Attempts and Access Changes Events where users try to access functionality they are not normally authorized for are important signals that must be captured. This could be as simple as a user getting or testing a URL from a colleague, but it could also be an attacker trying to map or test an application. Regardless of the cause, it is important information that must be preserved - if an incident occurs later, it is important to be able to say something about movement patterns and the like leading up to it.\nIf the application supports elevating or changing permissions, these are also typical events that need to be logged. Elevation is a mechanism where a user is given additional permissions, but these must be “turned on” before they are available - often with an extra level of authentication such as MFA or similar. Examples of such mechanisms are sudo in Linux or Privileged Identity Management (PIM) in Azure. When these are activated, it is important that the logs reflect this since errors or weaknesses in these solutions would be critical for the application’s security.\nApplication Errors, Network Errors, and Similar If errors occur in the application, these should also be logged. We should never give the user more information than absolutely necessary, but the details should be included in the logs so that they can be monitored or reviewed later.\nIf the application relates to the network, for example, by monitoring network connections, connections to other resources, or similar, disruptions or outages here should also be logged as they may be important indicators.\nLogging Unexpected Inputs All applications have inputs that can be described, even free text inputs where the user can enter anything. Inputs that violate validation rules or instances where a user attempts to change information that should not normally be changeable are typical cases that need to be logged.\nIf the application supports file uploads or similar, deviations from expected files, such as discrepancies between file type and file signature or unusually large or small files, should be logged.\nHow Do We Log? How we log will also vary from project to project, the platform we run on, and the resources we are allowed to use. An important point to keep in mind when designing the logging solution is that logs are a target for attacks! An attacker who can exploit vulnerabilities and then manipulate the logs can both hide activity and plant false evidence.\nAll logs we have should be stored in a place where data can be added but not changed afterward. The advantage of using such solutions is that you can collect logs from many different sources, such as cloud resources, network components, and applications, in one place. This can give you insights from multiple dimensions when reviewing an incident, which can be useful in understanding the overall situation.\nTimestamps and Log Format Being able to determine the sequence of events is incredibly important. We must therefore understand what the different log sources use as the basis for synchronizing clocks internally to be sure that an event on node A is related to another event two seconds later on node B.\nIt is also important to standardize log formats where possible. Much logging centers around the log message itself, which is typically text-based, but all metadata should be standardized where possible. Define what you need to see and ensure this is available from the various sources.\nMore Information OWASP Proactive Controls: C9: Implement Security Logging and Monitoring OWASP: Application Logging Vocabulary Cheat Sheet OWASP: Logging Cheat Sheet ","categories":"","description":"When a solution is in operation, logging is one of the most important tools we have. Collecting information is critical to gaining insight into what is happening with the solution and responding to events, but only if we monitor it.\n","excerpt":"When a solution is in operation, logging is one of the most important …","ref":"/manage/logging-monitoring/","tags":"","title":"Logging and Monitoring"},{"body":"Uavhengig av hvor en løsning deployeres bør vi sikre at den monitoreres. Selv om den eksempelvis kun skal være tilgjengelig på intranettet der det kun finnes interne brukere som jobber fra godkjente enheter over vpn, er det viktig med logging av informasjon dersom en av disse kompromitteres. Et typisk DevOps-team vil samle inn en del informasjon for å hjelpe til med feilsøking av funksjonaliteten i applikasjonen, men vi trenger også en del annen informasjon for å kunne si noe om sikkerhetsbildet rundt den.\nHusk Uavhengig av behov, husk at personvern gjelder for logger også! Ikke samle inn mer informasjon enn det du trenger, og husk på at logger må kunne slettes etter en gitt periode. Målet med loggingen vil ha tre primære hensikter:\nInntrengelsesdeteksjon - Vi må være i stand til å kunne oppdage om noen angriper systemet Etterforskningsgrunnlag - Vi må ha nok informasjon til å forstå hva som har skjedd, hvordan det skjedde og hvem som gjorde det Tilfredsstille krav fra kunde eller eksterne som eksempelvis myndighetene Hva bør vi logge? Hva vi logger vil variere veldig ut ifra hvem kunden er, risiko- og trusselbildet denne opererer i og hvilke behov de har for logginformasjon. I noen tilfeller vil kunden ha en egen sikkerhetsorganisasjon, typisk et Security Operations Center (SOC) som er ansvarlig for å monitorere nettverk og applikasjoner. Disse vil da ha krav til hva en logger og hvordan, men dersom dette ikke finnes må vi definere noen egne krav for å ha et utgangspunkt.\nUnder finner du noen punkter som bør være et absolutt minimum, men teamet må ha et forhold til hva som logges og hvorfor det logges, og hvordan denne informasjonen forholder seg til andre krav som eksempelvis personvern.\nAutentiseringer og mislykkede autentiseringsforsøk Dersom noen logger seg på løsningen, bør dette logges. Dette er spesielt viktig dersom det skjer fra et sted en bruker normalt ikke logger seg på, eller dersom det skjer med en annen nettleser eller klient enn det man vanligvis ser. Mislykkede pålogginger må også logges slik at det er mulig å agere på det.\nFeil under validering av JWT eller andre session-relaterte feil bør også logges slik at dette kan gås opp i etterkant.\nManglende autorisering, endring av tilganger Hendelser der brukere forsøker å få tilgang til funksjonalitet de normalt ikke er autorisert for er viktige signaler som må fanges opp. Dette kan være så enkelt som at en bruker fanger opp eller får en URL fra en kollega som de tester ut selv, men det kan også være en angriper som forsøker å kartlegge eller teste en applikasjon. Uavhengig av årsak er det viktig informasjon som må tas vare på - dersom det senere oppstår en hendelse er det viktig å kunne si noe om bevegelsesmønstre og liknende i forkant av denne.\nDersom applikasjonen har støtte for elevering av, eller endring av tilganger er dette også typiske ting som må logges. Elevering er en mekanisme der en bruker gis ekstra tilganger, men der disse må “skrus på” før de er tilgjengenlige - gjerne da med et ekstra nivå med autentisering som MFA eller liknende. Eksempler på slike mekanismer er sudo i Linux eller Privileged Identity Management (PIM) i Azure. Når disse aktiveres er det viktig at loggene reflekterer dette ettersom feil eller svakheter i disse løsningene vil være kritiske for sikkerheten i applikasjonen.\nApplikasjonsfeil, nettverksfeil og liknende Dersom det oppstår feil i applikasjonen bør dette også logges. Vi bør aldri gi brukeren mer informasjon enn absolutt nødvendig, men detaljene bør være med i loggene slik at det er mulig å monitorere eller se på dette i etterkant.\nDersom applikasjonen har et forhold til nettverk, eksempelvis gjennom at den monitorerer nettverksforbindelser, forbindelsen til andre ressurser eller liknende bør forstyrrelser eller utfall her også logges da det kan være viktige indikatorer.\nLogging av uventede inputs Alle applikasjoner har inputs som kan beskrives, selv fritekstinput der brukeren kan legge inn hva som helst. Input som bryter valideringsregler eller tilfeller der en bruker forsøker å endre informasjon som normalt ikke skal kunne endres er typiske tilfeller som må logges.\nDersom applikasjonen støtter filopplasting eller liknende bør avvik fra forventede filer som eksempelvis avvik mellom filtype og filsignatur eller unormalt store eller små filer logges.\nHvordan logger vi? Hvordan vi logger vil også variere fra prosjekt til prosjekt, hvilken platform vi kjører på og hvilke ressurser vi har lov til å bruke. Et viktig moment vi må ha i bakhodet når vi designer loggeløsningen er at loggene er et angrepsmål! En angriper som kan utnytte sårbarheter og deretter manipulere loggene kan både skjule aktivitet og plante falske spor.\nAlle loggene vi har bør lagres et sted der data kan legges til men ikke endres i etterkant. Fordelen med å bruke slike løsninger er at du kan samle logger fra mange ulike kilder som eksempelvis skyressurser, nettverkskomponenter og applikasjoner på ett sted. Dette kan gi deg innsikt i flere ulike dimensjoner når du ser på en hendelse som vil kunne være nyttig for å forstå helheten i det som skjer.\nTidsstempling og loggeformat Å kunne fastslå rekkefølgen på hendelser er utrolig viktig. Vi må derfor forstå hva de ulike loggkildene bruker som basis for å synkronisere klokker internt for å vite sikkert at en hendelse som skjedde på node A henger sammen med en annen hendelse to sekunder etter på node B.\nDet er også viktig å standardisere på loggformatene der dette er mulig. Mye logging er sentrert rundt selve loggmeldingen som typisk er tekstbasert, men alt av metadata rundt bør standardiseres der dette er mulig. Definer hva dere trenger å se, og sørg så for at dette er tilgjengelig fra de ulike kildene.\nVeien videre OWASP Procactive Controls: C9: Implement Security Logging and Monitoring OWASP: Application Logging Vocabulary Cheat Sheet OWASP: Logging Cheat Sheet ","categories":"","description":"Når en løsning er i drift er logging et av de viktigste verktøyene vi har. Innsamling av informasjon er kritisk for å kunne få innblikk i hva som skjer med løsningen og agere på hendelser, men bare om vi monitorerer. \n","excerpt":"Når en løsning er i drift er logging et av de viktigste verktøyene vi …","ref":"/no/forvalte/logging-monitorering/","tags":"","title":"Logging og monitorering"},{"body":" The most important thing we can do before writing a single line of code is to clarify the division of responsibilities between us and the customer, as well as the classification of the solution and data. What requirements does the customer have, and what requirements comes from the government or other parties? Application security (AppSec) resources should already be part of the team in this phase to ensure that we meet security requirements and expectations. We must also outline what we will do when a security incident occurs - what requirements are we facing, what is needed for successful disaster recovery, backup, and similar measures, and what will the consequences of downtime be for the customer? ","categories":"","description":"","excerpt":" The most important thing we can do before writing a single line of …","ref":"/plan/","tags":"","title":"Plan"},{"body":" Det viktigste vi kan gjøre før vi skriver en eneste kodelinje er å blie enige om ansvarsfordelingen mellom oss og kunden, samt klassifiseringen av løsning og data: Hvilke krav stiller kunden og hvilke krav kommer fra lovverk eller andre parter? Kompetanse innenfor applikasjonssikkerhet (AppSec) bør være på banen allerede i denne fasen for å sikre at en ivaretar krav og forventninger til sikkerhet. Vi må også vite hva vi gjør ~~dersom~~når det oppstår en sikkerhetshendelse - hvilke krav står vi ovenfor, hva må til for at disaster recovery, backup og liknende skal lykkes, og hva vil konsekvensene av nedetid være for kunden? ","categories":"","description":"","excerpt":" Det viktigste vi kan gjøre før vi skriver en eneste kodelinje er å …","ref":"/no/planlegge/","tags":"","title":"Planlegg"},{"body":"There are many different types of vulnerabilities and weaknesses to consider when developing new applications. The Open Worldwide Application Security Project (OWASP) has published a list of the 10 most common types of vulnerabilities since 2004, primarily aimed at web applications. Although this list does not cover everything, it is often used as a starting point for vulnerabilities that must be addressed in development projects.\nCurrent Points on the OWASP Top 10: Broken Access Control Cryptographic Failures Injection Insecure Design Security Misconfiguration Vulnerable and Outdated Components Identification and Authentication Failures Software and Data Integrity Failures Security Logging and Monitoring Failures Server-Side Request Forgery If the team has no processes around secure development, this would be a good start. For teams with greater maturity in application security, other checklists, such as the Application Security Verification Standard - also from OWASP, are a further option. This is divided into three different levels; level 1 covers the main points and requires only general competence, while level 3 goes more in-depth and requires specific competence and support tools.\nOWASP publishes much more in addition, including other Top 10 lists and what they call \"Cheatsheets\"; detailed information on specific security-related topics.\nMore Information OWASP Top 10 (2021) OWASP Application Security Verification Standard The 18 CIS Critical Security Controls CISA - Secure by design OWASP: Cheatsheets ","categories":"","description":"There is much to consider when building a secure solution, and an important starting point is the OWASP Top 10.\n","excerpt":"There is much to consider when building a secure solution, and an …","ref":"/develop/security-practices/","tags":"","title":"Security Practices"},{"body":"When we build solutions, we often set up multiple environments, typically for dev, test, and prod, so that we can develop while the product owner tests new functionality and end users use the system in prod. It is important to distinguish between these environments to avoid situations where changes in one environment affect the use of another.\nWhen designing a new solution, we must consider how to separate the environments. For cloud services, a common approach is to use different subscriptions per environment where possible. One subscription cannot affect another unless explicitly configured, but there are other possibilities as well.\nBrief Overview of the Most Common Solutions (Azure): Separate subscriptions per environment: Natural separation unless explicitly defined access More overhead with managing multiple subscriptions Use of separate resource groups: Simplified administration Resource groups share some limitations and access at the subscription level Separate virtual networks: Segregation at the network level Often requires more admin to ensure there is an actual separation There are other approaches to this as well, but regardless of the solution the team chooses, it is important to consider the overall cost/benefit against the requirements to be met.\nMore Information ISO27001:2022 - Section 8.22 - Segregation of networks - Requires Bouvet user ","categories":"","description":"Development projects use different environments for various purposes, such as testing deployments in a dedicated dev environment, exposing the test environment to product owners and other key personnel, and the production environment to end users. To avoid incidents in one environment affecting another, we must segregate them at a level that makes sense for the team and the context in which we work.\n","excerpt":"Development projects use different environments for various purposes, …","ref":"/design/segregation/","tags":"","title":"Segregation of Environments"},{"body":"Når vi bygger løsninger setter vi ofte opp flere miljø, ofte for dev, test og prod slik at vi kan utvikle samtidig som at produkteier tester ny funksjonalitet og sluttbrukere bruker systemet i prod. Det er viktig at vi skiller mellom disse miljøene, slik at vi unngår å komme i situasjoner der endringer i ett miljø påvirker bruken av et annet.\nNår vi designer en ny løsning må vi derfor tenke på hvordan vi skiller mellom miljøene. For skytjenester er en vanlig tilnærming ofte å benytte seg av ulike subscriptions per miljø der dette er mulig. En subscription kan ikke påvirke en annen med mindre dette er eksplisitt satt opp, men det finnes andre muligheter også.\nKortfattet oversikt over de vanligste løsningene (Azure): Separate subscriptions per miljø: Naturlig skille med mindre en eksplisitt definerer tilganger Mer overhead med administrering av flere subscriptions Bruk av separate ressursgrupper Forenklet administrasjon Ressursgrupper deler enkelte begrensninger og tilganger på subscription-nivå Separate virtuelle nettverk Segregering på nettverksnivå Krever ofte mer admin for å sikre at en har et faktisk skille Det finnes andre tilnærminger på dette også, men uansett hvilken løsning teamet går for er det viktig å se det totale bildet med kost/nytte opp mot kravene en må forholde seg til.\nVeien videre ISO27001:2022 - Seksjon 8.22 - Segregation of networks - Krever Bouvetbruker ","categories":"","description":"Utviklingsprosjekter benytter flere ulike miljø til ulike formål som for å teste deployments i et eget dev-miljø, en eksponerer testmiljø mot produkteier og andre nøkkelpersoner samt produksjonsmiljø mot sluttbrukere. For å unngå at hendelser i ett miljø ikke påvirker et annet må vi segregere disse på et nivå som gir mening for teamet og konteksten man jobber i.  \n","excerpt":"Utviklingsprosjekter benytter flere ulike miljø til ulike formål som …","ref":"/no/designe/segregering/","tags":"","title":"Segregering av miljø"},{"body":"Autentisering og autorisering er viktig i alle utviklingsprosjekter. Kort fortalt går autentisering ut på at en skal validere at en bruker representerer den identiteten den hevder å representere, typisk gjennom å sjekke brukernavn og tilhørende passord. Autorisering går ut på å sjekke at brukeren har lov til å gjøre det den prøver på. Disse er ofte forkortet til authn for autentisering og authz for autorisering.\nAutentisering Når en skal validere en bruker, er det viktigste at en ikke lager en egen autentiseringsløsning! Å sikre at slike løsninger faktisk er sikre er en kjempejobb, og man bør istedet benytte seg av etablerte løsninger for dette!\nVanlige tilnærminger for å håndtere autentisering kan være bruk av tredjepartstjenester, eller protokoller som håndterer autentisering mot kundens AD/Entra. I mange tilfeller ønsker vi å benytte Single-Sign-On(SSO) for å unngå at brukeren må taste inn brukernavn og passord, spesielt for interne forretningsapplikasjoner.\nVanlige løsninger for å håndtere pålogging er å benytte seg av biblioteker som tar seg av hele flyten, som eksempelvis Microsoft.Identity.Web. Andre alternativer kan være bruk av\nSAML Oauth 2.0 OpenID Connect (OIDC) Kerberos LDAP Her er det viktig at en setter seg inn i behovene til løsningen og hvilke autentiseringsmetoder som er tilgjengelige og eventuelt ønskelige.\nAutorisering Skillet mellom autentisering og autorisering ligger i at autentiseringen bekrefter hvem du er, mens man i autoriseringen sjekker at du har lov til å utføre en handling.\nI likhet med autentisering finnes det flere tilnærminger for hvordan autorisering håndteres, og man er nødt til å sette seg inn i beste praksiser for språk og rammeverk som benyttes.\nDet finnes likevel noen hovedprinsipper en alltid skal ta med seg inn i utviklingsforløpet:\nStandardtilgang skal alltid være ingen tilgang Dette er også kjent som default deny, og brukes for å sikre at eksempelvis en uautorisert bruker ikke har tilgang til noe utover det som er eksplisitt tillatt.\nAutorisering skal alltid sjekkes Dersom en bruker forsøker å utføre en handling, skal det alltid sjekkes hvorvidt brukeren faktisk har tilgang til dette. Husk at denne sjekken må skje mot den autoritative kilden for tilganger, og aldri mot data brukeren kan manipulere!\nBrukere skal alltid gis minst mulig tilgang Også kjent som principle of least privilege. En bruker skal aldri få mer tilgang enn det som trengs for å utføre en spesifikk oppgave. Dette gjøres for å redusere angrepsflaten dersom en bruker kompromitteres, slik at skadeomfanget kan begrenses.\nRollebasert brukertilgang Bruk av roller, role based access control (RBAC) er en vanlig tilnærming for å gi brukertilgang. Målet er å definere standardroller for en applikasjon, slik at tilgang kan baseres på disse. En vanlig måte å håndtere dette på eksempelvis med Entra eller AD er å ha\naksessgrupper med alle brukerne. Aksessgruppene legges som medlemmer i rollegrupper, som gis tilgangen i applikasjonen. Dette gir en bedre oversikt over hvem som har tilgang til hva sammenliknet med brukere som har individuelle tilganger.\nVeien videre Wikipedia: Authentication Wikipedia: Authorization ","categories":"","description":"Autentisering og autorisering sjekker henholdsvis _hvem_ du er og _hva_ du har lov til. Dette er viktige konsepter som må implementeres korrekt for at sikkerheten i en løsning skal ivaretas. \n","excerpt":"Autentisering og autorisering sjekker henholdsvis _hvem_ du er og …","ref":"/no/designe/autentisering/","tags":"","title":"Autentisering og autorisering"},{"body":"Authentication and authorization are crucial in all development projects. In short, authentication is about validating that a user represents the identity they claim to represent, typically by checking a username and corresponding password. Authorization is about checking that the user is allowed to do what they are trying to do. These are often abbreviated to authn for authentication and authz for authorization.\nAuthentication When validating a user, the most important thing is to not create your own authentication solution! Ensuring that such solutions are actually secure is a huge task, and one should instead use established solutions for this!\nCommon approaches for handling authentication can be the use of third-party services or protocols that handle authentication against the customer’s AD/Entra. In many cases, we want to use Single Sign-On (SSO) to avoid the user having to enter username and password, especially for internal business applications.\nCommon solutions for handling login are to use libraries that take care of the entire flow, such as Microsoft.Identity.Web. Other alternatives can be the use of:\nSAML Oauth 2.0 OpenID Connect (OIDC) Kerberos LDAP It is important to understand the needs of the solution and which authentication methods are available and possibly desirable.\nAuthorization The distinction between authentication and authorization is that authentication confirms who you are, while authorization checks that you are allowed to perform an action.\nSimilar to authentication, there are several approaches to how authorization is handled, and one needs to understand the best practices for the language and framework used.\nThere are still some main principles that should always be brought into the development process:\nDefault access should always be no access This is also known as default deny, and is used to ensure that, for example, an unauthorized user does not have access to anything beyond what is explicitly allowed.\nAuthorization should always be checked If a user attempts to perform an action, it should always be checked whether the user actually has access to this. Remember that this check must be made against the authoritative source for access rights, and never against data that the user can manipulate!\nUsers should always be given the least possible access Also known as the principle of least privilege. A user should never be given more access than is needed to perform a specific task. This is done to reduce the attack surface if a user is compromised, so that the scope of damage can be limited.\nRole-Based User Access Using roles, role based access control (RBAC), is a common approach to granting user access. The goal is to define standard roles for an application so that access can be based on these. A common way to handle this, for example, with Entra or AD is to have:\naccess groups with all users. The access groups are added as members in role groups, which are given access in the application. This provides a better overview of who has access to what compared to users with individual access.\nMore Information Wikipedia: Authentication, authorization, and accounting Wikipedia: Authentication Wikipedia: Authorization ","categories":"","description":"Authentication and authorization check respectively _who_ you are and _what_ you are allowed to do. These are important concepts that must be correctly implemented to ensure the security of a solution.\n","excerpt":"Authentication and authorization check respectively _who_ you are and …","ref":"/design/authentication-and-authorization/","tags":"","title":"Authentication and Authorization"},{"body":"When the team is in maintenance mode, most of the issues mentioned in the article on Software Supply Chain still apply. You will encounter situations where:\nA critical vulnerability is discovered in a package you use Packages are deprecated and replaced with something new that is not directly compatible with the old Developers behind packages stop maintaining them Malicious actors take over a package and use it to spread malware ….and certainly other scenarios that result in you needing to do something. To ensure that packages hitting one or more of the points above are addressed, tools like Sonatype and others offer the ability to monitor various stages of the lifecycle, with the option to alert you when vulnerabilities or other events affecting quality occur.\nMore Information Sonatype: State of the software supply chain Wikipedia: Source Composition Analysis Example of CDN attack: Polyfill supply chain attack hits 100K+ sites Example of compromised library: xz-Utils ","categories":"","description":"The status of the dependencies we have will change over time, and it is inevitable that vulnerabilities will be discovered that we must mitigate. This job can be as simple as updating to a new version, but may also require more significant changes to the application.\n","excerpt":"The status of the dependencies we have will change over time, and it …","ref":"/manage/dependency-management/","tags":"","title":"Dependency Management"},{"body":" A secure solution begins with a good design! Much of the foundation for assessing whether a solution is secure comes from the design phase, where important trade-offs between cost, benefit, and risk must be made. The articles you find under the topic design on this page will focus on the design process. Although this process may include much more than we have listed, we cover the essentials such as thorough documentation of what is to be built, critical clarifications, and the need for context. ","categories":"","description":"","excerpt":" A secure solution begins with a good design! Much of the foundation …","ref":"/design/","tags":"","title":"Design"},{"body":" En sikker løsning begynner med et godt design! Mye av grunnlaget for å vurdere om en løsning er sikker, kommer fra designfasen hvor det må gjøres viktige avveininger mellom kost, nytte og risiko. Artikklene du finner under temaet Designe på denne siden vil fokusere på designprosessen. Selv om denne kan inkludere mye mer enn vi har listet opp, dekker vi det viktigste i form av god dokumentasjon på det som skal bygges, viktige avklaringer og behovet for kontekst. ","categories":"","description":"","excerpt":" En sikker løsning begynner med et godt design! Mye av grunnlaget for …","ref":"/no/designe/","tags":"","title":"Design"},{"body":"Når teamet er i forvaltningsmodus gjelder fremdeles de fleste problemstillingene nevnt i artikkelen om Software Supply Chain. Dere vil komme i situasjoner der\ndet oppdages en kritisk sårbarhet i en pakke dere bruker pakker deprekeres og erstattes med noe nytt som ikke er direkte kompatibelt med det gamle utviklere bak pakker slutter å vedlikeholde pakkene ondsinnede aktører overtar en pakke og bruker den for å spre malware ….og helt sikkert andre varianter som resulterer i at dere må gjøre noe. For å sikre at pakker som treffer ett eller flere av punktene over tas tak i. Verktøy som Sonatype og andre gir muligheten til å overvåke ulike steg i livssyklusen, med mulighet til å varsle når sårbarheter eller andre hendelser som påvirker kvaliteten inntreffer.\nVeien videre Sonatype: State of the software supply chain Wikipedia: Source Composition Analysis Eksempel på CDN-angrep: Polyfill supply chain attack hits 100K+ sites Eksempel på kompromittert bibliotek: xz-Utils ","categories":"","description":"Status på avhengighetene vi har vil endre seg over tid, og det er ikke til å unngå at svakheter oppdages som må mitigeres av oss. Denne jobben kan være så enkel som at vi oppdaterer til en ny versjon, men kan også kreve større endringer i applikasjonen.\n","excerpt":"Status på avhengighetene vi har vil endre seg over tid, og det er ikke …","ref":"/no/forvalte/avhengighetshandtering/","tags":"","title":"Forvaltning av avhengigheter"},{"body":"Proper configuration of the network is important for pure cloud solutions, hybrid networks, and on-prem solutions. Network is a vast field with significant variations in usage, security, and complexity. Below we cover basic concepts for communication to and from servers and network services.\nZero Trust Architecture Zero trust is an important concept in network operations. In short, you should never trust anything coming from other systems, and you should assume that all communication will be compromised. Zero trust cannot be solved just by securing the network, but must be a goal in itself when designing solutions and the infrastructure around them. By implementing zero-trust, you will eliminate many potential attack vectors and thus protect the services that use the network.\nGetting an Overview of the Network Important Keep track of which IP addresses and ports you expose, and which services are listening on the ports. Check firewall rules, look in logs, and scan your systems with nmap. Keep an overview of which IP addresses, ports, and protocols an IT system exposes to the outside. This applies regardless of whether you are setting up a new system, changing an existing one, or just investigating what you already have. A targeted attacker will map open endpoints to find targets, and there have been several examples of data breaches starting with a forgotten, insecure service.\nAs developers and system managers, it is critical that we know exactly which services are open to whom and why.\nWhen setting up new systems, you have good opportunities to control what is exposed. The main rule according to the Zero Trust architecture should be to start with everything closed, and then open only the ports and protocols that are needed. New components should be isolated from existing systems.\nIn existing systems, it can be difficult to get an overview of what is exposed, especially in hybrid or on-prem setups. Simply shutting down everything that is not documented can also be risky, as this can affect legitimate systems. If working in the customer’s infrastructure, feel free to contact the network department for help with mapping.\nNetwork Scanning To find open ports and services, you should scan both public and private IP ranges from different locations. Remember that internal networks can follow different routes than external traffic and thus see different openings. The same applies in situations where you have office networks, VPN, DMZ/guest networks, or other open networks.\nThere are tools and services that make mapping easier. nmap is the industry standard and FOSS, and it is excellent for scanning IP ranges and detecting open UDP, TCP, and SCTP ports. If you lack an overview, nmap is a good place to start.\nCaution The use of scanner tools like `nmap` must **always** be clarified with the owners of infrastructure and network. If you are at a Bouvet office and scanning a customer's Azure environment, you can easily trigger alarms at both Bouvet and the customer, as well as the ISP. Service Isolation Important Use a firewall to restrict traffic within systems and between systems and the Internet. Use allowlist if possible. Filter traffic at the application layer if necessary. Firewall is a common term for barriers in a network that stop unwanted traffic. In most contexts, the definition is a bit narrower, referring to barriers at the TCP/IP layer, but a firewall can also operate at the application layer.\nTo enforce a zero-trust architecture, all components must be isolated and only made available to the services that they themselves will consume or deliver data to. This makes it necessary to have a firewall between components in the same application, between applications, and between the application and the Internet. If you have an application with a database, a backend API, and a web API, it is advantageous if you can set firewall rules between the components that only allow the necessary traffic. See the diagram below for an example.\nFirewalls should always drop all incoming and outgoing traffic by default and be explicitly opened for legitimate connections. Always limit port openings to specific ports and protocols where possible. Avoid using “Any” as the protocol!\nAlso use firewalls between all services within the network to ensure multiple layers of protection if one fails. Segmenting the network so that each function has its subnet will also help.\nAvoid sending traffic over the internet even to your own cloud services, use private endpoints and VPN tunnels where possible. Services that must be exposed to other systems (both internal, external, and on the internet) should be placed behind security functions such as web application firewalls and/or API gateways, and you must ensure that these also protect against, for example, DDOS attacks.\nRoute all outgoing traffic through a dedicated proxy service that blocks everything by default, allowlisting as needed. Never expose services directly if you can avoid it. Exposing services on ports other than the standard ports is not a good idea; a network scan will quickly reveal this.\nConfiguration Network configuration should be automated as much as possible, preferably using a CI/CD system.\nLimit who can configure both the network and network rules directly Set up Just-in-time (JIT) access where possible Limit where the network can be edited from (e.g., only from inside an on-prem firewall) Script all rules that can be scripted Use source code control Have extra security on repos containing the network source, protecting both reading and writing Use tools like Snyk to run analysis of scripts Scripts should be run regularly and automatically (at least daily) If unknown rules are detected, alerts should be created All unknown rules should be deleted or disabled Alternatively, other methods can be used to detect deviations from the desired configuration Back up or document all rules set up without scripting Document all rules set up/handled by people outside your team More Information IBM: What is networking Wikipedia: Zero trust ","categories":"","description":"Network is a fundamental component in everything we create, and it is important to have a basic understanding of how it works and how it can be exploited by others.\n","excerpt":"Network is a fundamental component in everything we create, and it is …","ref":"/design/networking/","tags":"","title":"Network Concepts"},{"body":"Sikkerhetstesting og pentesting har mange fellestrekk, men der tilnærminger som DAST primært fokuserer på webapplikasjoner og mer automatiserte tester, vil en pentest være mer omfattende og typisk også inkludere underliggende infrastruktur og nettverk. I noen tilfeller vil den også kunne ha et fysisk element der pentesterne vil forsøke å komme seg inn i lokalene for å avdekke svakheter ved fysisk sikring eller rutiner.\nEn penetrasjonstest vil alltid ha et avtalt omfang som regulerer hva pentesterne kan gjøre, når de kan gjøre det og hvilke ressurser og tjenester de kan teste.\nHvorfor pentest? Det er ikke mulig å bevise at en løsning er sikker, kun at den ikke er sårbar mot gitte angrep. Dersom en leverer en løsning som har strenge krav til sikkerhet eller opererer innenfor et avtaleverk som tilsier det vil en pentest være et nyttig verktøy for å skape visshet i at en løsning og miljøet rundt er sikker.\nEtter at testingen er gjennomført vil det normalt overleveres en rapport som beskriver hva som er testet og hvordan, samt en gjennomgang og vurdering av alle funn som er gjort. I noen tilfeller vil funn kunne beskrives som sårbarheter, men uten at disse nødvendigvis må rettes opp i på grunn av andre mitigerende tiltak eller fordi risiko eller konsekvens er lav.\nHva kreves for å gjennomføre en pentest? Først og fremst trenger man en eller flere pentestere. Dette er ikke noe man gjør på egenhånd etter å ha sett noen videoer på Youtube! En pentest krever kompetanse på flere områder da noen angrep avhenger av å utnytte flere sårbarheter som hver for seg ikke er spesielt alvorlige.\nSom utviklerteam må man sikre at miljøet som skal testet er skikkelig identifisert, slik at alle forstår hvor testingen finner sted. Omfanget av testen må defineres - husk på at det må være mulig å skille et faktisk angrep fra en pentest dersom begge skjer samtidig: Dersom du ser tegn på angrep mot et miljø som ikke er en del av testen og du har segregert miljøene dine bør du ta grep!\nSom en del av planleggingen er det viktig å sjekke opp med kunden hvilke rutiner de har for pentesting. I mange tilfeller vil de ha et sikkerhetssenter (Security Operations Center, SOC) og/eller et nettverkssenter (Network Operations Center, NOC) som overvåker infrastrukturen kontinuerlig, disse må være en del av planleggingen for å unngå misforståelser eller problemer når testen begynner.\nI noen tilfeller er det ønskelig med en pentest uten at dette varsles, da en ønsker å se om en slik test fanges opp - Husk på at en pentest i praksis er et angrep.\nNår gjennomfører jeg en pentest, og hva gjør vi når den pågår? I en perfekt verden bør man gjennomføre en pentester ved alle større endringer, men dette er ikke aktuelt med unntak av hos noen få aktører med særskilte krav. Her vil hver enkelt kunde ha ulike krav og forventninger, så det er viktig å ha retningslinjer på dette før en ser for seg å gjennomføre testen.\nDersom testen er varslet i forkant er det en kjempegod anledning til å følge med på logger og annen monitorering for å se om du ser noe unormalt. Dersom du i etterkant kan korrelere denne informasjonen med testene som blir rapportert har du en god mulighet til å lage automatiske varslingsrutiner som fanger opp avvik fra normalen.\nHva gjør jeg etter en pentest? Når teamet får overlevert rapporten i etterkant av en gjennomført test er det viktig å gå gjennom denne med produkteier. Husk alltid på at sikkerhet aldri er enkeltpersoners ansvar - Det er leveranseleders ansvar å sørge for at sikkerhetstiltak implementeres, men det er teamets kollektive ansvar å sikre at det man bygger er i henhold til kravene som settes.\nIdentifiserte funn må klassifiseres og legges i backloggen. Deretter må man vurdere funnene opp mot viktigheten av å rette dem opp; noen funn kan vente, andre må tas så raskt som mulig. Dette vil variere fra leveranse til leveranse og funn til funn.\nHusk Du skal aldri gjennomføre en pentest selv med mindre du vet _veldig_ godt hva du gjør. Det er ikke tillatt å kjøre verktøy som brukes ifm pentesting på Bouvetmaskiner eller i Bouvets nettverk uten at dette er klarert med Intern IT \u0026 Sikkerhet i forkant. Veien videre Wikipedia: Penetration test OWASP: Web Security Testing Guide ","categories":"","description":"Penetrasjonstesting, ofte omtalt som pentesting er kunsten å teste et system for å finne svake punkter som kan utnyttes, samt risikoen disse svakhetene medfører for eieren av løsningen. \n","excerpt":"Penetrasjonstesting, ofte omtalt som pentesting er kunsten å teste et …","ref":"/no/deploye/pentesting/","tags":"","title":"Penetrasjonstesting"},{"body":"Security testing and pentesting have many similarities, but while approaches like DAST primarily focus on web applications and more automated tests, a pentest is more comprehensive and typically also includes underlying infrastructure and networks. In some cases, it may also have a physical element where pentesters will attempt to gain access to premises to uncover weaknesses in physical security or routines.\nA penetration test will always have an agreed scope that regulates what the pentesters can do, when they can do it, and which resources and services they can test.\nWhy Pentest? It is not possible to prove that a solution is secure, only that it is not vulnerable to certain attacks. If delivering a solution that has strict security requirements or operates within an agreement that dictates it, a pentest is a useful tool to ensure that the solution and its surrounding environment are secure.\nAfter the testing is completed, a report will usually be delivered that describes what was tested and how, as well as an assessment of all findings. In some cases, findings may be described as vulnerabilities, but these do not necessarily need to be addressed due to other mitigating measures or because the risk or consequence is low.\nWhat is Required to Conduct a Pentest? First and foremost, you need one or more pentesters. This is not something you do on your own after watching a few videos on YouTube! A pentest requires expertise in several areas, as some attacks depend on exploiting multiple vulnerabilities that are not particularly serious on their own.\nAs a development team, you must ensure that the environment to be tested is properly identified so that everyone understands where the testing is taking place. The scope of the test must be defined - remember that it must be possible to distinguish an actual attack from a pentest if both occur simultaneously: If you see signs of an attack on an environment that is not part of the test and you have segregated your environments, you should take action!\nAs part of the planning, it is important to check with the customer what routines they have for pentesting. In many cases, they will have a Security Operations Center (SOC) and/or a Network Operations Center (NOC) that continuously monitors the infrastructure. These must be part of the planning to avoid misunderstandings or problems when the test begins.\nIn some cases, it is desirable to conduct a pentest without notifying anyone, as you want to see if such a test is detected - remember that a pentest is, in practice, an attack.\nWhen to Conduct a Pentest, and What to Do While It Is Ongoing? In a perfect world, you should conduct a pentest with every major change, but this is not feasible except for a few actors with special requirements. Each customer will have different requirements and expectations, so it is important to establish guidelines for this before planning to conduct the test.\nIf the test is announced in advance, it is a great opportunity to monitor logs and other monitoring tools to see if you notice anything unusual. If you can correlate this information with the tests reported afterward, you have a good opportunity to create automatic alerting routines that detect deviations from the norm.\nWhat to Do After a Pentest? When the team receives the report after a completed test, it is important to review it with the product owner. Always remember that security is never the responsibility of individuals alone - it is the delivery manager’s responsibility to ensure that security measures are implemented, but it is the team’s collective responsibility to ensure that what is built meets the set requirements.\nIdentified findings must be classified and added to the backlog. Then, the findings must be assessed against the importance of addressing them; some findings can wait, while others must be addressed as quickly as possible. This will vary from delivery to delivery and finding to finding.\nRemember You should never conduct a pentest yourself unless you know _very_ well what you are doing. It is not allowed to run tools used in connection with pentesting on Bouvet machines or in Bouvet's network without this being cleared with Internal IT \u0026 Security in advance. More Information Wikipedia: Penetration test OWASP: Web Security Testing Guide ","categories":"","description":"Penetration testing, often referred to as pentesting, is the art of testing a system to find weak points that can be exploited and the risk these weaknesses pose to the owner of the solution.\n","excerpt":"Penetration testing, often referred to as pentesting, is the art of …","ref":"/deploy/pentesting/","tags":"","title":"Penetration Testing"},{"body":"Det finnes mange ulike typer sårbarheter og svakheter vi må forholde oss til når vi utvikler nye applikasjoner. Organisasjonen Open Worldwide Application Security Project har siden 2004 gitt ut en liste med de 10 mest vanlige typer sårbarheter, primært rettet mot webapplikasjoner. Selv om denne ikke inneholder alt, brukes den ofte som et utgangspunkt for sårbarheter som må håndteres i utviklingsprosjekter.\nGjeldende punkter på OWASP Top 10: Broken Access Control Cryptographic Failures Injection Insecure Design Security Misconfiguration Vulnerable and Outdated Components Identification and Authentication Failures Software and Data Integrity Failures Security Logging and Monitoring Failures Server-Side Request Forgery Dersom teamet ikke har noen prosesser rundt sikker utvikling, vil dette være en god start. For team med større modenhet innenfor applikasjonssikkerhet vil andre sjekklister, som Application Security Verification Standard - også fra OWASP være et videre alternativ. Denne er delt opp i tre ulike nivå, der nivå 1 dekker hovedpunktene, mens level 3 går mye mer i dybden og krever mer kompetanse og støtteverktøy.\nOWASP publiserer mye annet i tillegg, både andre Top 10-lister i tillegg til det de kaller \"Cheatsheets\"; detaljert informasjon om spesifikke sikkerhetsrelaterte tema.\nVeien videre OWASP Top 10 (2021) OWASP Application Security Verification Standard The 18 CIS Critical Security Controls CISA - Secure by design OWASP: Cheatsheets ","categories":"","description":"Det er mye å tenke på dersom en skal bygge en sikker løsning, og et viktig utgangspunkt er OWASP Top 10. \n","excerpt":"Det er mye å tenke på dersom en skal bygge en sikker løsning, og et …","ref":"/no/utvikle/sikkerhetspraksiser/","tags":"","title":"Sikkerhetspraksiser"},{"body":"All development teams use various tools in the development process, and the selection will vary from team to team depending on personal preferences, technology choices, system and customer requirements, and much more.\nA typical team will use some form of\nIDE a version control system for the code, typically git a tool for CI/CD that can perform various tasks related to building, testing, or deployment other services managed or consumed by the team, e.g., messaging services, file transfer services, or similar These tools can significantly impact security and quality in deliveries, so it is important that the team considers how these are configured.\nIDE Most IDEs today allow the installation of extensions that provide support for new languages, formatting, linting, cloud services, and much more. These can significantly improve the productivity and efficiency of the team, but we must be cautious about what is installed.\nAs with everything else downloaded and run from the internet, we must consider the risk when using extensions. It is important that we are aware of what we download, where it is downloaded from, and who is behind it to avoid problems.\nVersion Control Version control provides excellent control over all changes, but it is important that we use the tool properly.\nRemember that source code is part of the project and must be considered in relation to disaster recovery and backups!\nSecurity in the Source Code System Many rely on solutions like Azure DevOps, GitHub, or similar that handle access control, reviews, and other functions related to confidentiality and integrity of the source code.\nHowever, Git also has built-in functionality for signing commits, so that each commit can be traced to a person with a given key. This can be a useful tool for ensuring integrity and should be considered by the team.\nBranching Strategy A typical approach is to operate with a production branch, often main or master. This should be protected so that all changes occur in separate feature branches that are then merged via pull request with corresponding review from others in the team. The production branch then serves as the basis for all further deployments. There are other more complex approaches as well, such as separate branches and version tagging. This is especially useful if maintaining multiple versions in different environments, needing the ability for hotfixes, or similar:\nIn this example, all developers work in their own feature branches against the develop branch, which is protected from direct changes. This is deployed to the dev environment to verify that everything works as it should.\nWhen the team is satisfied with the state of develop, it is merged to test via a dedicated pipeline that handles version number tagging automatically. This pipeline may require approval to run, needing one person to start it and another to approve.\nThe test branch is deployed to the test environment, and when the customer is satisfied with what has been delivered, it is merged to the prod branch in the same way as to test. For both test and prod, we use the version number as part of the branch name, so we can have branches Test/v1 and Test/v2, corresponding with Prod/v1 and Prod/v2.\nIf hotfixing against prod is needed, this can be done against the relevant prod branch to quickly correct critical errors, and then the hotfix can be taken back to dev.\npre-commit A tip is to use [pre-commit](https://pre-commit.com) to run all linting, formatting, and testing, and then use the same _pre-commit_ configuration in CI/CD. This will minimize maintenance, make it easy to test locally, and catch problems early. CI/CD A good CI/CD system (Continuous Integration / Continuous Deployment) can be used to significantly increase the security of the final product by automating various checks and tests that ensure the quality of the delivery.\nBe aware that several of the points below require additional software. We currently do not have shared licenses for developers at Bouvet; this must be managed by each project depending on needs and requirements. If the team handles this on its own, be aware of license conditions and how tools work. Some tools, for example, send source code to their own servers for analysis, which is generally not allowed unless agreed upon with the customer.\nSoftware Composition Analysis (SCA) Software composition analysis (SCA) can be set up automatically as part of CI/CD. We have many dependencies on components made by others, so it is important to keep track of existing and newly discovered vulnerabilities in what we create.\nTesting Running tests in CI is beneficial for several reasons, but from a security perspective, there are specific tests that should be included.\nTest all relevant endpoints for 401/403 responses Test code that handles authorization (who gets to do what). It is advantageous if all authorization logic happens in a centralized place in the codebase. Test for strict JWT validation Static Application Security Testing (SAST) Static application security testing (SAST) should be configured to run automatically as part of CI/CD. Consider whether a build should fail if the static code analysis detects serious weaknesses in the code or low test coverage.\nSecret Scanning Secret scanning - passwords, keys, and other sensitive information that should not be in the source code is an important tool that can be implemented in the version control system and in CI/CD. Some tools only provide alerts when secrets are found, while others can also invalidate the secrets in the services they are meant for.\nMore Information Atlassian: Branching strategy: a path to greatness Github: About secret scanning ","categories":"","description":"Misconfiguration is a common source of errors and vulnerabilities, and this also applies to tools. If possible, the team should standardize the use of tools and their extensions, ensuring that everyone follows a similar (and documented) workflow.\n","excerpt":"Misconfiguration is a common source of errors and vulnerabilities, and …","ref":"/plan/tools/","tags":"","title":"Tools Used in Deliveries"},{"body":"Alle utviklingsteam benytter ulike verktøy i utviklingsprosessen, og utvalget vil varierere fra team til team avhengig av personlige preferanser, teknologivalg, system og kundekrav og mye annet.\nEt typisk team vil benytte seg av en eller annen form for\nIDE et system for versjonskontroll av koden, typisk git et verktøy for CI/CD som kan utføre ulike oppgaver relatert til bygging, testing eller deployment andre tjenester driftet eller konsumert av teamet, f.eks. meldingstjenester, filoverføringstjenester, generativ AI (copilots) eller liknende Disse verktøyene kan ha stor betydning for sikkerhet og kvalitet i leveranser, så det er viktig at teamet har et forhold til hvordan disse settes opp.\nIDE Det er mulig å installere utvidelser på de fleste IDEs idag, som gir støtte for nye språk, formatering, linting, skytjenester og annet. Disse kan forbedre produktivitet og effektiviteten til teamet betraktelig, men vi må være obs på hva som installeres.\nI likhet med alt annet som lastes ned og kjøres fra internett må vi ha et forhold til risiko, så det er viktig at vi er obs på hva vi laster ned, hvor det lastes ned fra og hvem som står bak for å unngå problemer.\nVersjonskontroll Versjonskontroll gir kjempekontroll over alle endringer, men det er viktig at vi bruker verktøyet på en god måte.\nHusk også på at kildekode er en del av prosjektet, og må vurderes i forhold til disaster recovery og backups!\nSikkerhet i kildekodesystemet Mange baserer seg på løsninger som Azure DevOps, Github eller liknende som håndterer tilgangsstyring, reviews og en del andre funksjoner knyttet til konfidensialitet og integritet mot kildekoden.\nGit har imidlertid også innebygd funksjonalitet for signering av commits, slik at hver enkelt commit kan spores til en person med en gitt nøkkel. Dette kan være et nyttig hjelpemiddel for å sikre integritet, og bør vurderes av teamet.\nBranchingstrategi En typisk tilnærming er å operere med en produksjonsbranch, ofte main eller master. Denne bør være beskyttet slik at alle endringer skjer i egne feature-branches som så merges inn via pull-request med dertilhørende review fra andre i teamet. Produksjonsbranchen blir så grunnlaget for alle deployments videre. Det finnes andre og mer komplekse tilnærminger også, eksempelvis med separate branches samt tagging av versjoner. Denne er spesielt nyttig dersom en vedlikeholder flere ulike versjoner i ulike miljø, trenger mulighet for hotfixer eller liknende:\nI dette eksempelet jobber alle utviklere i egne feature branches mot develop-branchen, som beskyttes mot direkte endringer. Denne deployes til dev-miljøet for å verifisere at alt fungerer som det skal.\nNår teamet er fornøyed med tilstanden på develop, merges denne til test via en egen pipeline som håndterer tagging av versjonsnummer automatisk. Denne pipelinen kan kreve godkjenning for å kjøre, slik at det trengs en person for å starte den, og en annen for å godkjenne.\nTest-branchen deployes til testmiljøet, og når kunden er fornøyd med det som er levert merges den til prod-branchen på samme måte som til test. For både test og prod bruker vi versjonsnummeret som en del av branchnavnet, slik at vi kan ha branchen Test/v1 og Test/v2, som korresponderer med Prod/v1 og Prod/v2.\nDersom det er behov for hotfixing mot prod kan dette eksempelvis gjøres mot den aktuelle prodbranchen slik at en får korrigert kritiske feil raskt, for så å ta hotfixen tilbake til dev.\npre-commit Et tips er å bruke [pre-commit](https://pre-commit.com) til å kjøre alt av linting, formatering, og testing, for så å bruke den samme _pre-commit_ konfigurasjonen i CI/CD. Dette vil minimerer vedlikeholdet, gjøre det enkelt å teste lokalt, og fange opp problemer tidlig. CI/CD Et godt CI/CD-system (Continuous Integration / Continuous Deployment) kan brukes til å øke sikkerheten på sluttproduktet betydelig, gjennom å automatisere ulike sjekker og tester som sikrer kvaliteten i leveransen.\nVær obs på at flere av punktene under krever tilleggssoftware. Vi har per idag ingen felleslisenser for utviklere i Bouvet, dette må gås opp per prosjekt avhengig av behov og krav. Dersom teamet håndterer dette på egenhånd, vær obs på lisensbetingelser og hvordan verktøy fungerer. Noen verktøy sender eksempelvis kildekode til egne servere for analyse, dette er i utgangspunktet ikke tillatt med mindre det på forhånd er avklart med kunden.\nSoftware compostion analysis (SCA) Software composition analysis (SCA) kan settes opp automatisk som en del av CI/CD. Vi har mange avhengigheter til komponenter laget av andre, så det er viktig å ha oversikt over eksisterende og nyoppdagede sårbarheter i det vi lager.\nTesting Å kjøre tester i CI er lurt av flere grunner, men fra et sikkerhetsperspektiv er det enkelte tester som bør være med.\nTest alle aktuelle endepunkter for 401/403 responser Test kode som håndterer autorisasjon (hvem får gjøre hva). Her vil det være en fordel om all autorisasjonslogikk skjer på et sentralisert sted i kodebasen. Test for strict JWT valdiation Statisk kodeanalyse (SAST) Statisk kodeanalyse (SAST) bør konfigueres til å kjøres automatisk som en del av CI/CD. Man kan vurdere om et bygg skal feile dersom den statiske kodeanalysen oppdager alvorlige svakheter med koden eller lav testdekning.\nSecret scanning Sjekking av hemmeligheter - passord, nøkler og annen sensitiv informasjon som ikke skal inn i kildekoden er et viktig verktøy som kan implementeres i versjonskontrollsystemet og i CI/CD. Noen verktøy har kun varsling ved funn, andre kan også ugyldiggjøre hemmelighetene i tjenestene de er ment for.\nGenerativ AI (copilots) Det eksisterer mange slike generative AI-verktøy som utviklere kan benytte. Det er viktig at enhver bruk av slike verktøy avklares med kunden før de tas i bruk. Her har Bouvet gjort mye arbeid i evaluering av flere slike verktøy og har god støtte internt for å gjøre slike vurderinger om kunden skulle ha behov for det.\nVeien videre Atlassian: Branching strategy: a path to greatness Github: About secret scanning ","categories":"","description":"Feilkonfigurasjon er en vanlig kilde til feil og sårbarheter, dette gjelder også for verktøy. Dersom mulig bør teamet standardisere på bruk av verktøy og utvidelser til disse, og sikre at alle har en mest mulig lik (og dokumentert) arbeidsprosess.\n","excerpt":"Feilkonfigurasjon er en vanlig kilde til feil og sårbarheter, dette …","ref":"/no/planlegge/verktoy-og-bruk/","tags":"","title":"Verktøy brukt i leveransen"},{"body":" It's not possible to provide a recipe on how to write secure code in a few simple and concise articles. However, it doesn't mean it's an insurmountable task reserved only for security experts! Everyone developing software at Bouvet should be familiar with OWASP Top 10, which is a good starting point to understand the challenges faced by developers. The articles you find under the topic Utvikle on this page will focus on what happens on a developer's workstation, apart from actual code. They won't delve into specific attack methods or how to defend against them. You will also find advice on how a team should work to prevent, identify, and fix vulnerable code. ","categories":"","description":"","excerpt":" It's not possible to provide a recipe on how to write secure code in …","ref":"/develop/","tags":"","title":"Develop"},{"body":"Dersom teamet har gjort alt rett til nå har dere en plan for disaster recovery som forteller dere hva som må gjøres for å gjenopprette infrastruktur, applikasjoner og data slik at en kommer tilbake til normal drift.\nÅrsakene til at en er nødt å gjenopprette kan være mange, og svært varierende i omfang. Hvem har vel ikke kjørt en delete from \u003ctable\u003e where x = 'something' med manglende eller feil parametre, eller droppet feil tabell fra en database? Eller slettet en server eller appservice fra et prodmiljø ved en feil (jeg skulle bare fikse noe kjapt….). I slike tilfeller kan det gå kjapt å gjenopprette dersom en vet hva som gikk galt, men i andre og mer komplekse tilfeller som f.eks. involverer ukjente feil i programvaren eller problemer hos en skytjenesteleverandør kan det bli mer komplekst.\nFor at planene skal ha noen reell verdi, er man nødt til å teste disse i praksis. I en perfekt verden bør planene være så detaljerte at gjenoppretting er mulig selv om hele teamet blir påkjørt av bussen, eller på annet vis blir utilgjengelige. I praksis er dette ofte vanskelig å oppnå, men teamet bør ha et mål om å lage en god oppskrift på hvordan en recovery kan foregå under gitte forutsetninger, og deretter teste denne regelmessig i et alternativt miljø.\nEn tenkt oppskrift for løsningen tegnet opp i artikkelen om systemskisser kan være som under. Premisset for planen under er at vi har kildekode og pipelines tilgjengelig i eksempelvis Azure DevOps, og at applikasjon og ressurser på mystisk vis er fjernet fra Azure:\nSjekk at nye subscriptions er på plass i Azure Konfigurer Azure Pipelines slik at de deployer til disse Verifiser at alle Entra-grupper er tilgjengelige Deploy infrastruktur-som-kode Konfigurer NSG’er og brannmurer (dersom dette ikke gjøres som kode) Skru av aksess utenfor leveranseteamet for å unngå at brukere forstyrrer restoreprosessen Verifiser at ressursene har tilgang til dataplatformen Verifiser tilganger til database Restore applikasjon og data: Restore data til database fra siste backup Deploy backend Deploy frontend Verifiser at applikasjon fungerer Publiser PowerBI-rapport Verifiser at den kan lese data fra backend Skru på aksess for sluttbrukere slik at de kan bruke applikasjonen igjen. Det er vedt å nevne at hvert av punktene kan trenge utfyllende informasjon, med henvisninger til aksesspakker eller gruppemedlemsskap for at personen som restorer skal få nødvendig tilgang.\nVeien videre Nasjonal Sikkerhetsmyndighet: Forbered virkshomheten på håndtering av hendelser ","categories":"","description":"En backup som ikke er testet er verdiløs, og det samme gjelder alt av planer for disaster recovery såsant disse ikke testes. Teamet må verifisere backups og planer jevnlig, slik at alle vet hva som må skje.  \n","excerpt":"En backup som ikke er testet er verdiløs, og det samme gjelder alt av …","ref":"/no/forvalte/preparedness/","tags":"","title":"Øv på gjenoppretting"},{"body":"If the team has done everything right so far, you have a disaster recovery plan that tells you what needs to be done to restore infrastructure, applications, and data to return to normal operations.\nThe reasons for needing to restore can be many and vary greatly in scope. Who hasn’t run a delete from \u003ctable\u003e where x = 'something' with missing or incorrect parameters, or dropped the wrong table from a database? Or deleted a server or app service from a prod environment by mistake (I was just trying to fix something quickly…). In such cases, recovery can be quick if you know what went wrong, but in other and more complex cases, such as involving unknown software errors or problems with a cloud service provider, it can be more complicated.\nFor the plans to have real value, they must be tested in practice. In a perfect world, the plans should be so detailed that recovery is possible even if the entire team gets hit by the bus or otherwise becomes unavailable. In practice, this is often difficult to achieve, but the team should aim to create a good recipe for how a recovery can occur under given conditions and then test this regularly in an alternative environment.\nAn example recipe for the solution outlined in the article on system diagrams could be as follows. The premise of the plan below is that we have source code and pipelines available in, for example, Azure DevOps, but the application and resources have mysteriously disappeared from Azure:\nCheck that new subscriptions are in place in Azure Configure Azure Pipelines to deploy to these Verify that all Entra groups are available Deploy infrastructure as code Configure NSGs and firewalls (if not done as code) Turn off access outside the delivery team to avoid user interference with the restore process Verify that resources have access to the data platform Verify access to the database Restore application and data: Restore data to the database from the latest backup Deploy backend Deploy frontend Verify that the application works Publish PowerBI report Verify that it can read data from the backend Turn on access for end-users so they can use the application again It is worth mentioning that each of the points may need additional information, with references to access packages or group memberships for the person restoring to gain the necessary access.\nMore Information Nasjonal Sikkerhetsmyndighet: Forbered virksomheten på håndtering av hendelser (in Norwegian) ","categories":"","description":"An untested backup is worthless, and the same applies to all disaster recovery plans unless they are tested. The team must verify backups and plans regularly so that everyone knows what needs to happen.\n","excerpt":"An untested backup is worthless, and the same applies to all disaster …","ref":"/manage/preparedness/","tags":"","title":"Preparedness"},{"body":"Depending on the security level a delivery aims to achieve, it may be necessary to define mechanisms for assessing security at fixed points in the development cycle, known as security checkpoints.\nThese can be defined between logical phases in the project, for example, between the design and development phases, or when transitioning from development to the first release in production. Other and additional checkpoints can also be defined, entirely depending on the requirements the delivery team must adhere to.\nIn a study by IBM it was determined that defects in applications developed for the U.S. military cost significantly less to fix early in the process compared to later.\nBy implementing security checkpoints, it becomes easier to catch weaknesses early and to ensure compliance with security and quality requirements. A typical practice using checkpoints could include\ncreating a design of the project before the development cycle starts the implementation should always follow the design verification that the design and implementation actually match before going into production More Information Dawson, Maurice, et al. “Integrating software assurance into the software development life cycle (SDLC).” Journal of Information Systems Technology and Planning 3.6 (2010): 49-53. ","categories":"","description":"A security checkpoint is a control point during a project where requirements must be met before proceeding.\n","excerpt":"A security checkpoint is a control point during a project where …","ref":"/plan/security-checkpoints/","tags":"","title":"Security Checkpoints"},{"body":"Avhengig av sikkerhetsnivået en leveranse ønsker å legge seg på, kan det være nødvendig å definere mekanismer for å vurdere sikkerheten på faste punkter i utviklingsløpet, såkalte sikkerhetskontrollpunkt.\nDisse kan defineres mellom logiske faser i prosjektet, eksempelvis mellom design og utviklingsfasene, eller når en går fra utvikling til første release i produksjon. Andre og flere kontrollpunkter kan også defineres, helt avhengig av kravene leveranseteamet må forholde seg til.\nIBM har i en studie fastslått at generelle svakheter i applikasjoner utviklet for det amerikanske forsvaret kostet langt mindre å utbedre jo tidligere de ble oppdaget.\nVed å ta i bruk sikkerhetskontrollpunkt er det ikke bare lettere å sikre etterlevelse av sikkerhet- og kvalitetskrav, men også lettere å sikre at en fanger opp svakheter tidlig. En vanlig praksis der slike kontrollpunkt benyttes er at det eksempelvis\nskal foreligge et design av prosjektet før utviklingsløpet starter at implementasjonen skal følge designet og at en har verifisert at design og implementasjon faktisk matcher før en kan gå i produksjon Veien videre Dawson, Maurice, et al. “Integrating software assurance into the software development life cycle (SDLC).” Journal of Information Systems Technology and Planning 3.6 (2010): 49-53. RedHat: Security in the software development lifecycle Implementing Smart Security Gates in Modern Software Development ","categories":"","description":"Et sikkerhetskontrollpunkt er et kontrollpunkt underveis i et prosjekt der en setter krav som må oppfylles før en går videre. \n","excerpt":"Et sikkerhetskontrollpunkt er et kontrollpunkt underveis i et prosjekt …","ref":"/no/planlegge/sikkerhetskontrollpunkt/","tags":"","title":"Sikkerhetskontrollpunkt"},{"body":"Når vi bygger software har vi avhengigheter til en hel haug med ulike tredjepartspakker, fra økosystem som npmjs, nuget, PyPi eller andre. Dette er kode “skrevet av andre”, der vi er avhengige av at disse produserer pakker uten større svakheter og uten onde hensikter. Kilder som blant annet Gartner, Sonatype og Snyk har anslått at så mye som 90% av koden i et typisk utviklingsprosjekt kan bestå av slike tredjepartspakker, så risikoen er betydelig dersom vi ikke har kontroll.\nEt viktig hjelpemiddel er å gjennomføre en såkalt Source Composition Analysis - SCA for å få oversikt over pakkene vi bruker, både direkte og indirekte (transiente) avhengigheter, samt risikoen assosiert med disse.\nSikkerhetsrisiko Det finnes flere sikkerhetsrisikoer knyttet til tredjepartspakker, men dessverre er økosystemene for slike pakker lite proaktive på sikkerhetsfronten. Infiserte pakker som identifiseres blir fjernet, men for alle som bruker automatikk for å holde avhengigheter oppdatert til siste versjon kan dette ofte være for sent.\nSårbarheter De kan inneholde kjente sårbarheter (CVE) som kan la seg utnytte. Noen av disse kan mitigeres ved å oppgradere pakkene til siste versjon, andre har mer grunnleggende utfordringer som kan mitigeres på annet vis. Det hender også at noen CVE’er lages på svakheter som teknisk sett er en sårbarhet, men der den er ‘by-design’. Et eksempel på dette er Python-pakken Pandas som blant annet har sårbarheten CVE-2020-13091. Denne lar brukeren deserialisere filer uten sjekk av hvor disse kommer fra - dette har da blitt registrert som en sårbarhet da det vil kunne være mulig utnytte dette om andre tiltak ikke er på plass.\nOndsinnet kode Pakkene vi laster ned og bruker kjøres i samme kontekst som vår kode og kan benytte de samme ressursene og tilgangene den har. Innholdet i pakkene vi konsumerer er helt utenfor vår kontroll, og dersom en av dem inneholder ondsinnet programvare (malware) kan konsekvensene bli store.\nDe siste årene har det også dukket opp eksempler på pakker som ofte betegnes som “protestware”, da de inneholder logikk som utfører handlinger dersom brukerne kan geolokaliseres til spesifikke land. Pakken “peacenotwar” er et slikt eksempel, som ble lagt til som en avhengighet til node-ipc som er en mye brukt pakke. Dette resulterte i at peacenotwar også ble lastet ned hos mange brukere; de som ble geolokalisert til Russland eller Belarus fikk data slettet og ble utsatt for DOS-angrep via pakken.\nUavhengig av om noe er ment som malware eller protestware er konsekvensene alvorlige, og alle utviklingsprosjekter bør ha på plass tiltak for å begrense risiko og konsekvens dersom en hendelse inntreffer.\nBruk av CDN Content-delivery-networks for å distribuere Javascript-bibliotek har blitt brukt av mange som en enkel måte å inkludere disse i koden uten å måtte inkludere dette i build eller deploy-prosessen. Tanken er god, men du får da en direkte avhengighet til en kilde du ikke har noen kontroll på som kan misbrukes til å spre malware.\nLisensmodell Det finnes mange ulike lisensmodeller; noen er helt frie og får ingen konsekvenser for brukerne, mens andre som AGPL og GPL stiller klare krav til alle som konsumerer kode under denne lisensen, også inkludert det øvrige systemet som benytter seg av den. De aller fleste økosystemer tillater også bruk av proprietære lisenser, som kan begrense hva du kan bruke en pakke til. Noen har spesifikke krav i lisensen, andre er gratis for personlig bruk, men krever at du kjøper en lisens dersom den skal brukes kommersielt.\nHvordan sikrer vi oss? For å beskytte systemet mot disse truslene er det flere effektive tiltak vi kan gjøre. Mange av disse er allerede dekket andre steder, men det er likevel noen som er unike for eksterne pakker.\nTrusselmodell og kompleksitet I mange tilfeller har vi avhengigheter til mange pakker som ikke brukes av oss direkte, såkalte transitive avhengigheter. Hver enkelt pakke vi avhenger av representerer en økning i kompleksitet og angrepsflate, og øker sjansen for at noe skjærer seg på et senere tidspunkt.\nEt viktig spørsmål alle må stille seg er “trenger vi denne pakken?” Hva er kosten ved å lage funksjonaliteten selv sammenliknet med risikoen og kompleksiteten assosiert med å legge den til?\nOvervåkning av avhengigheter Et viktig hjelpemiddel er analyseverktøy som hjelper oss å ha kontroll på sårbarheter og risiko i avhengighetene våre. Det finnes mange aktører på markedet, alt i fra helt enkle som Githubs Advanced Security med Dependabot, til mer avanserte som Snyk og Sonatype. I mange tilfeller er det datagrunnlaget for løsningen som utgjør den store forskjellen, men det finnes også en del nyttige funksjoner en bør vurdere:\nPolicystyring - Sonatype tagger alle pakker med metadata, slik at du kan definere policyer som sier noe om hva som kan brukes eller ei. Automatisk utbedring - Verktøy som dependabot (Github) oppgraderer automatisk pakker når sårbarheter oppdages og oppdateringer er tilgjengelige. Integrasjoner og varsling - Mange verktøy som eksempelvis Snyk SCA kan integreres i IDE og i CICD. Risikobilde - Mange løsninger gir deg en totaloversikt der du kan se det totale risikobildet for enkeltapplikasjoner eller større deler av porteføljen Modenhet Denne kan være vanskelig å si noe konkret om, men hvor aktivt er miljøet rundt en pakke? Vedlikeholdes den av enkeltpersoner, grupper med utviklere eller har den økonomisk eller annen støtte fra et selskap?\nHvor sannsynlig er det at pakken fortsatt kommer til å være vedlikeholdt om eksempelvis 5 år? Hvordan er historikken i forhold til sårbarheter og kvalitet; finnes det et aktivt miljø som rapporterer svakheter som deretter utbedres, eller henger innmeldte saker i limbo over lengre tid? Verktøy som libraries.io og Security Scorecard kan være nyttige for å finne ut mer.\nPinning av versjoner En av angrepsvektorene er når ondsinnede aktører overtar populære pakker, og publiserer sin egen versjon med ondsinnet innhold. Dersom vi har bygg eller deployprosesser som henter siste versjon av avhengighetene hver gang, vil disse automatisk hente den infiserte pakken. Et tiltak her kan være å låse pakkeversjonene vi bruker, eksempelvis i package-lock.json eller liknende.\nBruk av SBOM Software Bill Of Materials (SBOM) er en tilnærming der vi genererer en oversikt over alle avhengigheter med versjoner fra løsningene våre. Det finnes flere mer eller mindre standardiserte filformater for dette, disse kan også arkiveres eller legges inn i andre løsninger for å forenkle monitorering fra sentralt hold.\nVeien videre Sonatype: State of the software supply chain Wikipedia: Source Composition Analysis Eksempel på CDN-angrep: Polyfill supply chain attack hits 100K+ sites Eksempel på kompromittert bibliotek: xz-Utils ","categories":"","description":"Alle som lager programvare bruker tredjepartspakker. Alle tredjepartspakker representerer kode skrevet av andre, og utgjør en risiko for leveransen dersom vi ikke har kontroll over hva vi bruker og oversikt over svakheter og risiko assosiert med disse.\n","excerpt":"Alle som lager programvare bruker tredjepartspakker. Alle …","ref":"/no/utvikle/software-supply-chain/","tags":"","title":"Software supply chain"},{"body":"When we build software, we depend on a multitude of different third-party packages from ecosystems like npmjs, nuget, PyPi, or others. This is code “written by others,” where we rely on these producing packages without major weaknesses and without malicious intent. Sources such as Gartner, Sonatype, and Snyk have estimated that as much as 90% of the code in a typical development project may consist of such third-party packages, so the risk is significant if we do not have control.\nAn important tool is to conduct a so-called Source Composition Analysis - SCA to get an overview of the packages we use, both direct and indirect (transient) dependencies, as well as the risks associated with them.\nSecurity Risks There are several security risks associated with third-party packages, but unfortunately, the ecosystems for such packages are not very proactive on the security front. Infected packages that are identified are removed, but for those using automation to keep dependencies updated to the latest version, this is often too late.\nVulnerabilities They may contain known vulnerabilities (CVE) that can be exploited. Some of these can be mitigated by upgrading the packages to the latest version, while others have more fundamental challenges that can be mitigated in other ways. Sometimes, some CVEs are created for weaknesses that are technically a vulnerability but are ‘by design’. An example of this is the Python package Pandas which among others has the vulnerability CVE-2020-13091. This allows users to deserialize files without checking where they come from - this has been registered as a vulnerability as it could be exploited if other measures are not in place.\nMalicious Code The packages we download and use run in the same context as our code and can use the same resources and accesses it has. The content of the packages we consume is entirely beyond our control, and if one of them contains malicious software (malware), the consequences can be significant.\nIn recent years, there have also been examples of packages often referred to as “protestware,” as they contain logic that performs actions if users can be geolocated to specific countries. The package “peacenotwar” is one such example, which was added as a dependency to node-ipc, a widely used package. This resulted in peacenotwar also being downloaded by many users; those geolocated to Russia or Belarus had data deleted and were subjected to DOS attacks via the package.\nWhether something is meant as malware or protestware, the consequences are serious, and all development projects should have measures in place to limit risk and consequences in case an incident occurs.\nUse of CDN Content-delivery-networks to distribute Javascript libraries have been used by many as an easy way to include these in the code without having to include them in the build or deploy process. The idea is good, but you then have a direct dependency on a source you have no control over, which can be abused to spread malware.\nLicense Model There are many different license models for available components; some are completely free and impose no requirements for use, while others like AGPL and GPL can have significant consequences for what you develop. Most ecosystems also allow the use of proprietary licenses, which can limit what you can use a package for without a valid license. Some have specific requirements in the license, others are free for personal use but require you to purchase a license if used commercially.\nHow Do We Secure Ourselves? To protect the system against these threats, there are several effective measures we can take. Many of these are already covered elsewhere, but there are still some threats unique to external packages.\nThreat Model and Complexity In many cases, we depend on many packages that we do not use directly, so-called transitive dependencies. Each package in a solution represents an increase in complexity and attack surface, increasing the chance that something will go wrong at a later stage.\nAn important question everyone must ask is “do we need this package?” What is the cost of creating the functionality ourselves compared to the risk and complexity associated with adding it?\nMonitoring Dependencies An important tool is analysis tools that help us control vulnerabilities and risks in our dependencies. There are many actors on the market, ranging from simple ones like GitHub’s Advanced Security with Dependabot to more advanced ones like Snyk and Sonatype. In many cases, the data basis for the solution makes the big difference, but there are also a number of useful features to consider:\nPolicy Management - Sonatype tags all packages with metadata, allowing you to define policies that dictate what can be used or not. Automatic Remediation - Tools like dependabot (GitHub) automatically upgrade packages when vulnerabilities are discovered, and updates are available. Integrations and Notifications - Many tools like Snyk SCA can integrate into IDEs and CICD. Risk Overview - Many solutions provide an overall view where you can see the total risk picture for individual applications or larger parts of the portfolio. Maturity This can be difficult to quantify, but how active is the community around a package? Is it maintained by individuals, groups of developers, or does it have economic or other support from a company?\nHow likely is it that the package will still be maintained in, for example, 5 years? How is the history in terms of vulnerabilities and quality; is there an active community reporting weaknesses that are then addressed, or do reported issues linger in limbo for extended periods? Tools like libraries.io and Security Scorecard can be useful for finding out more.\nPinning Versions One attack vector is when malicious actors take over popular packages and publish their own version with malicious content. If we have build or deploy processes that fetch the latest version of dependencies each time, they will automatically fetch the infected package. A measure here can be to pin the package versions we use, for example, in package-lock.json or similar.\nUse of SBOM Software Bill Of Materials (SBOM) is an approach where we generate an overview of all dependencies with versions from our solutions. There are several more or less standardized file formats for this, which can also be archived or included in other solutions to simplify central monitoring.\nMore Information Sonatype: State of the software supply chain Wikipedia: Source Composition Analysis Example of CDN attack: Polyfill supply chain attack hits 100K+ sites Example of compromised library: xz-Utils ","categories":"","description":"Everyone who develops software uses third-party packages. All third-party packages represent code written by others and pose a risk to the delivery if we do not have control over what we use and an overview of weaknesses and risks associated with them.\n","excerpt":"Everyone who develops software uses third-party packages. All …","ref":"/develop/software-supply-chain/","tags":"","title":"Software Supply Chain"},{"body":"This is a brief introduction to threat modeling, data flow diagrams, STRIDE, and attack trees.\nYou may have already done simple threat modeling without realizing it. For example, have you ever thought about why the users of the system you’re creating need to log in with a username and password?\nWhen these choices were made, you automatically performed simple threat modeling. You certainly don’t want unauthorized individuals to access data in your system, and you don’t want anyone to see the data transferred between your users and your website.\nThe whole point of threat modeling is to think like an attacker.\nIdentifying Threats There are several ways to identify threats to a system. The simplest method, which doesn’t require much, is to gather the development team for a social evening or workshop and try to think about how to attack the system. This will likely result in many potential threats. Some are probably already addressed, while others may need to be tested and possibly investigated further. Once all threats have been addressed and it has been verified that countermeasures are implemented, the process is repeated. To get an overview of the process, it is often wise to draw a diagram of the system.\nThe process often starts with drawing a diagram/overview of the system, identifying threats, addressing the threats, and finally validating that countermeasures are implemented, then repeating the process.\nIf you want to use more formalized tools and processes, there are two widely used methods for threat modeling: attack trees and data flow diagrams + STRIDE.\nAttack Trees Using attack trees is a good way to identify threats if you are good at thinking like an attacker. If this doesn’t come naturally, using data flow diagrams is often a better method.\nAn attack tree consists of a main goal at the top of the tree, with various ways to achieve the main goal as nodes.\nIn this example, the main goal of an attacker is to access reports in a time tracking system. To achieve the main goal, the attacker can either use a valid password in the system or find a vulnerability in the solution that grants access. One way to obtain a valid password is to bribe an employee. This way, you add different ways to reach the main goal and subgoals. You then go through the identified threats and verify that countermeasures are in place or decide to accept that there are threats to the system that you will not protect against. The cost of countermeasures should always be weighed against the value of what is being protected.\nMore information and examples of attack trees can be found in the article Attack Trees by Bruce Schneier.\nData Flow Diagram + STRIDE Start by creating a detailed data flow diagram of the system or part of the system you are threat modeling.\nOnce the data flow and trust boundaries of the system have been drawn, use STRIDE to identify threats. STRIDE is an acronym for:\nSpoofing - Can you trust that the user is who they claim to be? Tampering - Can someone modify data intentionally or unintentionally? Repudiation - Can it be proven who performed a given action in the system? Information disclosure - Can data be stolen or leaked? Denial of Service - Can someone make services unavailable? Elevation of privilege - Can someone gain elevated rights in the system? Here is an example of a data flow diagram showing the data flow during login with username and password. The arrows between services represent calls. The SSL proxy is a security layer that encrypts information between services. HTTPS are calls where the information sent is encrypted, and HTTP are calls where the information sent is not encrypted.\nIn the data flow diagram above, you can see that there is a risk that someone with access to the network between the SSL proxy and the time tracking system can read and modify the username and password that are not encrypted over HTTP. By going through all data flows while thinking about possible attacks according to the STRIDE model, you can build a list of potential threats to the system.\nMoving Forward The threat model must be versioned and kept up to date. Once threats have been identified, countermeasures must be described, and their effectiveness assessed. A common approach is to give the threat a value indicating severity, for example, 1-10 where 10 is the worst. Countermeasures are assessed similarly but with the opposite scale where 1 has little effect and 10 (or up to criticality) has the highest effect. The sum of these gives a residual risk that indicates the remaining risk:\nIdentified Threats Criticality Countermeasures Residual Risk Threat 1 8 8 0 Threat 2 2 0 2 Threat 3 4 3 1 Total 14 11 3 When a risk is identified, it is important that the risk owner is involved, as they are responsible for ensuring that the project delivers quality in line with expectations and requirements.\nIt is important that countermeasures are validated for them to be effective. The threat model should be reviewed regularly to see how the situation has changed, and if the total criticality or residual risk exceeds a threshold, consider measures to reduce them.\nMore Information Tools Microsoft Threat Modeling Tool gives you a kick-start by describing common threats for various services. This tool is especially useful if you operate in Microsoft Azure. OWASP Threat Dragon is a similar open-source tool worth checking out. Draw.io with this package drawio-threatmodeling is a tool available both on the web and in common clients. Courses and Lectures Threat Modeling Fundamentals (pluralsight) Trusselmodellering - hva er det? (BouvetOne 2020 - requires Bouvet user account) An Introduction to threat modeling (Javazone 2018) Threat Modeling in 2019 (RSA Conference 2019) Other Sources Threat Modelling Manifesto Trusselmodellering - Martin Gilje Jaatun, Senior Researcher, Dr. Philos, SINTEF OWASP Application Threat Modeling ","categories":"","description":"Threat modeling is an exercise aimed at identifying threats so that the risk of these can be identified and assessed against the overall security of the solution. From a threat model, mitigating measures can be identified and implemented to reduce risk.\n","excerpt":"Threat modeling is an exercise aimed at identifying threats so that …","ref":"/design/threat-modelling/","tags":"","title":"Threat Modeling"},{"body":"Dette er en kort introduksjon til trusselmodellering, dataflytdiagrammer, STRIDE og angrepstrær.\nDu har nok allerede gjort en enkel trusselmodellering uten at du selv er klar over det. Har du for eksempel tenkt på hvorfor brukerne av systemet du lager må logge seg inn med brukernavn og passord?\nNår disse valgene ble tatt så har du automatisk gjort en enkel trusselmodellering. Du ønsker jo selvfølgelig ikke at uvedkommende skal kunne få tilgang til data i systemet ditt og du ønsker ikke at hvem som helst skal se data som overføres mellom brukerne dine og nettstedet ditt.\nHele poenget med trusselmodellering er å tenke som en angriper.\nIdentifisere trusler Det finnes flere måter å identifisere trusler mot et system. Den enkleste metoden som ikke krever så mye, er å samle utviklingsteamet til en sosial kveld eller workshop, og prøve å tenke på hvordan man kan angripe systemet. Da vil man antagelig komme opp med mange potensielle trusler. Noen er sikkert allerede adressert, mens andre kanskje må testes ut og eventuelt graves dypere i. Når man har adressert alle trusselene og verifisert at mottiltak er implementert, så gjentar man prosessen. For å få et overblikk over prosessen er det ofte lur å tegne en oversikt (diagram) av systemet.\nProsessen starter ofte med å tegne opp et diagram/oversikt av systemet, så identifisere trusler, adressere truslene, og til slutt validere at mottiltak er implementert, så gjenta. Dersom man ønsker å benytte mer formaliserte verktøy og prosesser så finnes det to mye brukte metoder for trusselmodellering, angrepstre og datafylytdiagrammer + STRIDE.\nAngrepstre Bruk av angrepstrær er en fin måte å identifisere trusler på dersom man er god til å tenke som en angriper. Dersom dette ikke faller naturlig er bruk av dataflydiagrammer ofte en bedre metode.\nEt angrepstre består av et hovedmål på toppen av treet, og med ulike måter å nå hovedmålet som noder.\nI dette eksempelet er hovedmålet til en angriper å få tilgang til rapporter i et timeføringssystem. For å nå hovedmålet kan angriperen enten benytte et gyldig passord i systemet eller finne en svakhet i løsningen som gir tilgang. En måte å få tak i et gyldig passord er å bestikke en ansatt. Slik fyller man på med ulike måter for å nå hovedmålet og delmålene. Man går deretter gjennom de identifiserte truslene og verifisere at man har mottiltak på plass eller eventuelt velger å godta at det finnes trusler mot systemet som man ikke vil beskytte seg mot. Kostnaden på mottiltakene bør alltid veies opp mot verdiene som skal beskyttes.\nMer informasjon og flere eksempler på angrepstrær finnes i artikkelen Attack Trees av Bruce Schneier.\nDataflytdiagram + STRIDE Man starter med å lage et detaljert dataflytdiagram over systemet eller en del av systemet man skal trusselmodellering av.\nNår man har tegnet opp dataflyten og tillitsgrensene til systemet, så bruker man STRIDE for å identifisere trusler. STRIDE er et akronym for\nSpoofing - Kan man stole på at brukeren er man tror? Tampering - Kan noen endre på data med vilje eller uforvarende? Repudiation - Kan det bevises hvem som gjorde en gitt handling i systemet? Information disclosure - Kan data stjeles eller komme på avveie? Denial of Service - Kan noen gjøre at tjenester blir utilgjengelige? Elevation of privilege - Kan noen tilegne seg utvidede rettighter i systemet? Her er et eksempel på et dataflytdiagram som viser dataflyten ved innlogging med brukernavn og passord. Pilene mellom tjenestene representerer kall. SSL-proxy er et sikkerhetslag som krypterer informasjon mellom tjenester. HTTPS er kall der informasjonen som sendes med er kryptert, og HTTP er kall der informasjonen som sendes med ikke er kryptert. I dataflytdiagrammet over kan man se at det er en fare for at noen med tilgang til nettverket mellom SSL-proxyen og timeføringssystemet kan lese og endre brukernavnet og passordet som ikke er kryptert over HTTP. Ved å gå gjennom alle dataflytene mens man tenker på mulige angrep i henhold til STRIDE-modellen kan man bygge opp en liste over mulige trusler mot systemet.\nTrusselmodellen må versjoneres og holdes oppdatert. Når en har identifisert trusler må mottiltak beskrives og effekten av disse vurderes. En vanlige tilnærming er å gi trusselen en verdi som indikerer alvorlighetsgrad, eksempelvis 1-10 der 10 er verst. Mottiltak vurderes tilsvarende, men med motsatt skala der 1 er liten effekt og 10 (eller opp til kritikalitet) er høyest effekt. Summen av disse gir en residuell risiko som sier noe om hva en sitter igjen med:\nIdentifiserte trusler Kritikalitet Mottiltak Gjenstående risk Trussel 1 8 8 0 Trussel 2 2 0 2 Trussel 3 4 3 1 Total 14 11 3 Når en har identifisert en risiko, er det viktig at den som eier denne risikoen involveres, da det er denne som har ansvaret for å påse at prosjektet leverer kvalitet i tråd med forventninger og krav.\nDet er viktig at mottiltak valideres for at dette skal ha noen hensikt. Trusselmodellen bør hentes opp med jevne mellomrom for å se hvordan situasjonen har endret seg, og dersom den totale kritikaliteten eller den residuelle risikoen overstiger en grense bør en vurdere tiltak for å redusere disse.\nVeien videre Verktøy Microsoft Threat Modeling Tool gir deg en kick-start ved at en del vanlige trusler for diverse tjenester allerede er beskrevet. Dette verktøyet er særlig nyttig dersom man opererer i Microsoft Azure. OWASP Threat Dragon er et tilsvarende open source verktøy, som det kan være verdt å ta en titt på. Draw.io med denne pakken drawio-threatmodeling er et verktøy som både på web og i de vanligste klientene Kurs og foredrag Threat Modeling Fundamentals (pluralsight) Trusselmodellering - hva er det? (BouvetOne 2020) An Introduction to threat modeling (Javazone 2018) Threat Modeling in 2019 (RSA Conference 2019) Andre kilder Threat Modelling Manifesto Trusselmodellering - Martin Gilje Jaatun, Seniorforsker, Dr. Philos, SINTEF OWASP Application Threat Modeling ","categories":"","description":"Trusselmodellering er en øvelse der målet er å identifisere trusler i og rundt en løsning. Dette gjør at risikoene  kan identifiseres og vurderes opp mot et totalbilde av sikkerheten i løsningen. Fra en trusselmodell kan mitigerende tiltak identifiseres og implementeres for å redusere risiko.  \n","excerpt":"Trusselmodellering er en øvelse der målet er å identifisere trusler i …","ref":"/no/designe/trusselmodellering/","tags":"","title":"Trusselmodellering"},{"body":" Det er ikke mulig å gi en oppskrift på hvordan man skriver sikker programkode i noen få, enkle og kortfattelige artikler. Det betyr derimot ikke at det er en uoverkommelig oppgave forbeholdt sikkerhetseksperter! Alle som utvikler programvare i Bouvet skal være kjent med OWASP Top 10, som er et godt utgangspunkt for å bli kjent med hvilke utfordinger man står ovenfor som utvikler. Artikklene du finner under temaet Utvikle på denne siden vil fokusere på det som foregår på en utviklers arbeidsmaskin, som ikke er konkret kode. De vil ikke gå i dybden på konkrete angreps metoder eller hvordan beskytte mot disse. Du vil også finne råd om hvordan et team bør arbeide for å være i stand til å forebygge, identifisere, og fikse sårbar kode. ","categories":"","description":"","excerpt":" Det er ikke mulig å gi en oppskrift på hvordan man skriver sikker …","ref":"/no/utvikle/","tags":"","title":"Utvikle"},{"body":"Mange tenker gjerne på sikkerhetshendelser som målrettede angrep der noen angriper en løsning ved å hacke den. I noen tilfeller er dette gjerne korrekt, men en hendelse kan være mye mer.\nNSM definerer en sikkerhetshendelse som “En avvikssituasjon hvor det er et potensiale for tap av konfidensialitet, integritet, og/eller tilgjengelighet for informasjon eller IKT-tjenester. En sikkerhetshendelse kan oppstå som følge av et dataangrep, teknisk svikt, eller utilsiktede feilhandlinger.” Med andre ord kan en hendelse være nesten hva som helst som påvirker konfidensialitet, integritet og tilgjengelighet, og avhengig av konteksten vil ulike kunder ha ulike krav til når vi må rapportere og/eller agere på dette.\nForberedelser Dette er dekket i flere artikler under “Planlegge”, men noe av det viktigste du gjør er å dokumentere hvilke krav vi må etterleve og hvilket ansvar vi har innenfor de ulike fasene i tillegg til kontaktpunkter hos kunden. Noen kunder er tett på sikkerhet og vil monitorere og varsle leveranseteam på egenhånd, andre basererer seg på at teamene selv følger med.\nNSM lister en del nyttige punkter en også bør vurdere innad i teamet; flere av disse peker på organisasjonen som helhet, men det kan være viktig for teamet å være kjent med de ulike tiltakene.\nNår hendelsen inntreffer Hendelser kan ta mange ulike former. En hendelse kan være svakheter eller sårbarheter som oppdages i en applikasjon, avhengigheter eller kjøremiljø, men det kan også være angrep - både åpenbare eller mer i det skjulte.\nDersom dere oppdager, eller har grunn til å tro at en løsning er under angrep må dette varsles til kunden umiddelbart. Det er ikke alltid tilfelle at løsningen som angripes er den som er målet, i mange tilfeller er en løsning bare et springbrett videre til en annen. Derfor er det også viktig å vite hvilke tilganger og nettverksåpninger denne har til andre løsninger, slik at kundens IT-organisasjon kan analysere disse for å se etter tegn på angrep der.\nOm dere kommer over tegn på at en løsning har blitt angrepet eller brukt til et angrep er det også viktig å si ifra, slik at kunden kan sikre informasjon og bevis på dette for videre etterforskning.\nHusk Håndtering av, og etterforskning av hendelser er et eget fagfelt. Dersom dere kommer over tegn på at noe kan ha skjedd, _si ifra_ til deres kontaktpunkt og avvent beskjed fra denne _før_ dere gjør noe. Veien videre Fortinet: The CIA Triad Nasjonal Sikkerhetsmyndighet: Forbered virkshomheten på håndtering av hendelser ","categories":"","description":"Når en hendelse først oppstår er det viktig å være forberedt slik at en unngår å kaste bort verdifull tid på aktiviteter som burde vært klart i forkant. Hvem skal varsles, hvem har ansvar og hvem kan hjelpe? \n","excerpt":"Når en hendelse først oppstår er det viktig å være forberedt slik at …","ref":"/no/forvalte/hendelseshandtering/","tags":"","title":"Beredskapsplaner og hendelseshåndtering"},{"body":"Security is an unknown and perhaps somewhat intimidating area for many, where they don’t quite know where to start. Therefore, when a new project is initiated, it is important to assess the need for competence building among team members. Initially, this is aimed at topics related to security, but the use of new technology can also pose a risk if used incorrectly.\nIt is important that the team reviews the entire development process in all phases and evaluates each point against what the team knows, what is relevant for the project, and where assistance can be obtained.\nWe have many different security environments and individuals with high competence who can contribute within Bouvet; if your team needs help, feel free to bring it up in your local Security Champions channel on Bouvet-Slack, #sikkerhet or with your regional quality leader.\nMore Information Bouvet: Kurs ","categories":"","description":"Having the right competence is crucial for all teams, especially when it comes to security. The team must identify any gaps they have, so that measures such as training can be implemented to cover these gaps.\n","excerpt":"Having the right competence is crucial for all teams, especially when …","ref":"/design/competence-building/","tags":"","title":"Competence Building"},{"body":"Many people think of security incidents as targeted attacks where someone attacks a solution by hacking it. In some cases, this may be correct, but an incident can be much more.\nNSM defines a security incident as “A deviation situation where there is a potential for loss of confidentiality, integrity, and/or availability of information or ICT services. A security incident can occur as a result of a data attack, technical failure, or unintentional errors.” In other words, an incident can be almost anything that affects confidentiality, integrity, and availability, and depending on the context, different customers will have different requirements for when we need to report and/or act on this.\nPreparations This is covered in several articles under “Plan,” but one of the most important things you can do is document the requirements we must comply with and our responsibilities within the different phases, in addition to contact points with the customer. Some customers are very security-focused and will monitor and alert the delivery team on their own, while others rely on the teams to monitor themselves.\nNSM lists several useful points that should also be considered within the team; many of these point to the organization as a whole, but it can be important for the team to be aware of the different measures.\nWhen an Incident Occurs Incidents can take many forms. An incident can be weaknesses or vulnerabilities discovered in an application, dependencies, or the runtime environment, but it can also be attacks - both obvious and more covert.\nIf you discover or have reason to believe that a solution is under attack, this must be reported to the customer immediately. It is not always the case that the attacked solution is the target; in many cases, a solution is just a stepping stone to another. Therefore, it is also important to know what accesses and network openings it has to other solutions, so the customer’s IT organization can check these for signs of attacks.\nIf you come across signs that a solution has been attacked or used for an attack, it is also important to notify the customer so they can secure information and evidence for further investigation.\nKeep in mind Handling and investigating incidents is a specialized field. If you come across signs that something may have happened, inform your contact point and wait for instructions from them before taking any action. More Information Fortinet: The CIA Triad Nasjonal Sikkerhetsmyndighet: Forbered virksomheten på håndtering av hendelser (in Norwegian) ","categories":"","description":"When an incident occurs, it is important to be prepared to avoid wasting valuable time on activities that should have been ready in advance. Who should be notified, who is responsible, and who can help?\n","excerpt":"When an incident occurs, it is important to be prepared to avoid …","ref":"/manage/incident-response/","tags":"","title":"Contingency Plans and Incident Management"},{"body":" Once the solution is designed and the code is written, it's \"just\" about deploying, and then we're done, right? We often use CI/CD solutions to build and deploy, run tests, and much more. If someone can compromise pipelines, the build agent building the solution, or the connection to the resources we deploy to, we will have major problems. Even though it's challenging to cover everything in a few short articles, we still try to provide insights into the issues that delivery teams should address. ","categories":"","description":"","excerpt":" Once the solution is designed and the code is written, it's \"just\" …","ref":"/deploy/","tags":"","title":"Deploy"},{"body":" Når løsningen er designet og koden er skrevet er det \"bare\" å deploye, så er vi i mål, eller hva? Vi bruker ofte CICD-løsninger for å bygge og deploye, samt kjøre tester og mye annet. Dersom noen kan kompromittere pipelines, byggagenten som bygger løsningen eller forbindelsen mot ressursene vi deployer til vil vi ha store problemer. Selv om det er vanskelig å dekke alt i noen få korte artikler, forsøker vi likevel å gi et innblikk i problemstillinger en bør ta opp i leveranseteamet. ","categories":"","description":"","excerpt":" Når løsningen er designet og koden er skrevet er det \"bare\" å …","ref":"/no/deploye/","tags":"","title":"Deploye"},{"body":"Documentation is often seen as a necessary evil, and we are not always good enough at documenting our projects. Many believe that the source code is the best documentation, but it only says how an application works, not necessarily why it works the way it does, or what the actual intention is.\nThere are many reasons why we need to document the solution we are building; the most obvious is to ensure that new team members can understand what the project is about and also to ensure that information does not only live in the heads of individuals. Another important aspect of this is the documentation concerning the security of the project. If we do not document what measures are taken and why, or what threats we face and how we handle them, we place a huge responsibility on the team members who come after us: What seems like a logical and reasonable solution given a security context can seem backward and cumbersome to someone without the same context and competence, and we risk that important measures are removed to simplify the solution - at the expense of security.\nDocumentation Solution The project must find a solution for where the documentation is stored that makes sense for the project. Remember that good documentation is as sensitive as the source code and must be treated accordingly. In many cases, it may be wise to use tools that support version control - in many cases, it may be wise to place the documentation together with the source code, or in separate repositories that can be used, for example, with Azure DevOps wiki.\nWhat Should Be Documented What we should document will vary from project to project. We should always have a design that provides insight into, for example, infrastructure, IAM, and data flow so that it is possible to review this at a later date.\nThe threat model must always be documented and maintained, and any mitigating measures must also be documented.\nOWASP Top 10 has several points that can relate to the development environment and its setup, so if there are special configurations that need to be in place, this should also be documented to avoid weaknesses or vulnerabilities that arise if someone forgets important steps that are not written down.\nOne must also consider the criticality of the solution; if it is a system with 24/7 uptime requirements and is critical for the customer, the documentation must reflect this so that even the least experienced person on the team can troubleshoot problems without knowing the solution in detail.\nMore Information Mastering the Art of Software Documentation: A Comprehensive Guide for Developers and Tech Professionals Why documentation matters, and why you should include it in your code ","categories":"","description":"All development projects must be documented. This is not only important for the continuity of the project but also for documenting security-related measures and any incidents.\n","excerpt":"All development projects must be documented. This is not only …","ref":"/develop/documentation/","tags":"","title":"Documentation"},{"body":"Many development teams do more than just write code. You might have virtual machines in the cloud or on-premise, with applications or services used in the delivery to the customer. You may manage integration solutions for the customer, containers, application servers, and much more.\nDo you have a routine for keeping these updated, and are they part of the overall security efforts?\nImportant Reminders Updates If you manage servers, services, or other assets within the team, they must be kept up to date. You need to familiarize yourself with the release routines for new versions from the supplier’s side so that you can keep everything updated. It’s not always desirable to go for the latest version all the time, so it’s important to read the release notes or other documentation about the release to understand why it came out and what it solves.\nRemember that the software we use should be supported to avoid errors and problems resulting from a component not supporting the latest version of another component.\nSecurity Practices All components we use must be part of the overall design, and we must have control over network openings, IAM, and how these are exposed both internally and externally. Without knowledge of this, it is difficult to say what threats we may face and thus also the mitigating measures.\nRemember that the security of a solution should never depend on a single measure; therefore, try to isolate components as much as possible. By default, nothing should be allowed - whether it concerns access to resources or network in/out, but explicitly open for what should be permitted.\nLogging, Monitoring, and Incident Handling Remember that internal components must also be monitored. Even if it is off-the-shelf software, the same measures must be implemented here to ensure that we know what is happening and that the logs are trustworthy and cannot be manipulated, just like everything else we monitor.\nMore Information ","categories":"","description":"If the team relies on internal components such as servers, applications, or other assets managed by the team itself, there must be a routine for keeping these updated.\n","excerpt":"If the team relies on internal components such as servers, …","ref":"/develop/internal-components/","tags":"","title":"Internal Components"},{"body":"Sikkerhet er for mange et ukjent og kanskje litt skummelt område, der en ikke helt vet hvor man skal begynne. Når et nytt prosjekt startes opp er det derfor viktig at en vurderer behovet for kompetanseheving hos teammedlemmene. I utgangspunktet er dette rettet mot tema relatert til sikkerhet, men bruk av ny teknologi kan også utgjøre en risiko dersom en bruker den på feil måte.\nDet er viktig at teamet ser over hele utviklingsløpet med alle fasene og vurderer hvert enkelt punkt opp mot hva teamet kan, hva en ser på som relevant for prosjektet og hvor en kan få bistand.\nVi har mange ulike sikkerhetsmiljøer og enkeltpersoner med høy kompetanse som kan bidra innad i Bouvet; dersom akkurat ditt team har behov, ta det gjerne opp på din lokale Security-Champions-kanal på Bouvet-Slack, #sikkerhet eller med din regionale kvalitetsleder.\nVeien videre Bouvet: Kurs ","categories":"","description":"Riktig kompetanse er viktig for alle team, ikke minst når det kommer til sikkerhet. Teamet må identifisere hvilke gap en har, slik at tiltak som eksempelvis opplæring kan iverksettes for å dekke disse. \n","excerpt":"Riktig kompetanse er viktig for alle team, ikke minst når det kommer …","ref":"/no/designe/kompetanseheving/","tags":"","title":"Kompetanseheving"},{"body":"Security testing should always be an element of all deliveries. Many associate security testing with penetration testing, but it is much more than that. Some forms of testing can be done automatically as part of CICD, while others are more manual and typically performed against a deployed solution.\nBefore starting security testing, it is important to understand what it can provide you - there is no single measure that solves all security problems, and no single test method that uncovers all weaknesses. Security testing is also one of the areas that often require specific expertise for the results to be good and/or interpreted correctly.\nWarning The use of tools like `nmap` and others used in connection with security testing must **always** be clarified with the owners of infrastructure and network, as it is difficult to distinguish between friendly testing and malicious attacks. This also applies internally at Bouvet; Intern-IT \u0026 Security must always be in the loop before you start a security test! If this is not taken into account, it can have consequences, both for the customer relationship and for technical solutions against the network provider and Microsoft. Test Environment When conducting security testing against a running environment, it is important to always clarify this well in advance. Many types of testing can be destructive, so if the environments are not sufficiently separated, you risk affecting other environments than intended.\nA good solution, especially if using infrastructure-as-code (IaC), is to have a pipeline that deploys a dedicated environment for security testing. If this is designed into the delivery from the start, it is often easy to set up environments identical to the production environment, where you can also copy databases and possibly run anonymization processes on the data.\nStatic Application Security Testing (SAST) Static code analysis is a low-threshold technique that analyzes the code with dependencies to find weaknesses. SAST can be carried out completely automatically, and there are many good tools that can integrate this into CICD so that you can scan as part of the processes here.\nSAST only checks the solution being created; it does not reveal anything about the configuration of the runtime environment, network, or other surrounding dependencies. Tools used to perform SAST are language-specific, so it is important to understand which tools provide the best results for the language and possibly framework used.\nDynamic Application Security Testing (DAST) In contrast to SAST, DAST is a technique where a solution is tested in a running state. This is a language-agnostic test method, where, for example, a web application is tested by testing the frontend solution to find weaknesses. DAST can be automated, but often needs to be run manually for certain types of weaknesses to be tested.\nDAST will only cover functionality exposed in the running solution, so if there is code that is part of the solution but not accessible to the DAST tool, it will not be tested either.\nMore Information Wikipedia: Static application security testing Wikipedia: Dynamic application security testing OWASP: Web Security Testing Guide ","categories":"","description":"In line with other elements associated with team _quality_, we depend on testing to verify that we have achieved the goal. Security testing is an important part of this, as it allows us to demonstrate that the delivery is not vulnerable to certain attack methods.\n","excerpt":"In line with other elements associated with team _quality_, we depend …","ref":"/develop/security-testing/","tags":"","title":"Security Testing"},{"body":"Sikkerhetstesting bør alltid være et element av alle leveranser. Mange assosierer sikkerhetstesting med penetrasjonstesting, men det er mye mer enn dette. Noen former for testing kan gjøres automatisk som del av CICD, andre er mer manuelle og skjer typisk mot en deployert løsning.\nFør en setter i gang med sikkerhetstesting er det viktig å sette seg inn i hva dette kan gi deg - det finnes ingen enkelttiltak som løser alle sikkerhetsproblemer, og heller ingen enkelt testmetode som avdekker alle svakheter. Sikkerhetstesting er også et av områdene som ofte krever spesifikk kompetanse for at resultatene skal bli gode og/eller tolket korrekt.\nAdvarsel Bruk av verktøy som `nmap` og annet som brukes i forbindelse med sikkerhetstesting må **alltid** avklares med eiere av infrastruktur og nettverk, da det er vanskelig å skille vennligsinnet testing fra ondsinnede angrep. Dette gjelder også internt i Bouvet; Intern-IT \u0026 Sikkerhet skal alltid være i loopen før du starter en sikkerhetstest! Dersom dette ikke tas hensyn til kan det få konsekvenser, både for kundeforholdet men også for tekniske løsninger mot nettleverandør og Microsoft. Testmiljø Når en skal bedrive sikkerhetstesting mot et kjørende miljø er det viktig at en alltid avklarer dette godt i forkant. Mange typer testing kan være destruktiv, så dersom miljøene ikke er godt nok adskilt kan en risikere å påvirke andre miljø enn tiltenkt.\nEn god løsning, spesielt dersom en bruker infrastruktur-som-kode (IAC) er å ha en pipeline som deployer et eget miljø som kan brukes for sikkerhetstesting. Dersom dette designes inn i leveransen fra starten, vil det ofte være enkelt å sette opp miljø som er identiske med produksjonsmiljøet, der en også kan kopiere databaser og eventuelt kjøre anonymiseringsprosesser mot dataene.\nStatisk kodeanalyse (SAST) Statisk kodeanalyse er et lavterskelteknikk som analyserer koden med avhengigheter for å finne svakheter. SAST kan gjennomføres helt automatisk, og det finnes mange gode verktøy som kan bygge dette inn i CICD slik at du kan skanne som en del av prosessene her.\nSAST sjekker kun løsningen som lages, den avdekker ingenting rundt konfigurasjon av kjøremiljø, nettverk eller andre omkringliggende avhengigheter. Verktøy som brukes for å gjennomføre SAST er språkspesifikke, så det er viktig å sette seg inn i hvilke verktøy som gir best resultat for språk og eventuelt rammeverk som benyttes.\nDynamisk applikasjonssikkerhetstesting (DAST) I motsetning til SAST er DAST en teknikk der en tester en løsning i kjørende tilstand. Dette er en språkagnostisk testmetode, der en eksempelvis tester en webapplikasjon gjennom å teste frontendløsningen for å finne svakheter. DAST kan automatisers, men må ofte kjøres manuelt for at enkelte typer svakheter skal testes.\nDAST vil kun dekke funksjonalitet eksponert i den kjørende løsningen, så dersom en har kode som er en del av løsningen men som ikke er tilgjengelig for DAST-verktøyet vil dette heller ikke kunne testes.\nVeien videre Wikipedia: Static application security testing Wikipedia: Dynamic application security testing OWASP: Web Security Testing Guide ","categories":"","description":"På linje med annen elementer assosiert med teamet _kvalitet_ er vi avhengige av å kunne teste for å verifisere at vi har oppnådd målet. Sikkerhetstesting er et viktig ledd i dette, da vi gjennom testingen kan vise at leveransen ikke er sårbar for gitte angrepsmetoder.\n","excerpt":"På linje med annen elementer assosiert med teamet _kvalitet_ er vi …","ref":"/no/utvikle/sikkerhetstesting/","tags":"","title":"Sikkerhetstesting"},{"body":"Dokumentasjon er ofte sett på som et nødvendig onde, og vi er ikke alltid gode nok til å dokumentere prosjektene våre. Mange mener at kildekoden er den beste dokumentasjonen, men denne sier kun hvordan en applikasjon fungerer, ikke nødvendigvis hvorfor den fungerer som den gjør, eller hva som er den egentlige intensjonen.\nDet er mange årsaker til at vi må dokumentere løsningen vi bygger; den mest åpenbare er for å sikre at nye teammedlemmer kan få en forståelse av hva prosjektet går ut på og også for at informasjonen ikke bare skal leve i hodet til enkeltpersoner. Et annet viktig aspekt av dette er dokumentasjon av hensyn til sikkerheten i prosjektet. Dersom vi ikke dokumenterer hvilke tiltak som gjøres og hvorfor, eller hvilke trusler vi står ovenfor og hvordan vi håndterer dette legger vi et kjempestort ansvar på teammedlemmene som kommer etter: Det som for oss er en logisk og fornuftig løsning gitt en sikkerhetskontekst kan virke bakvendt og tungt for noen uten den samme konteksten og kompetansen, og vi risikerer da at viktige tiltak fjernes for å forenkle løsningen - på beskostning av sikkerheten.\nDokumentasjonsløsning Prosjektet må finne en løsning for hvor dokumentasjon oppbevares som gir mening i prosjektet. Husk at god dokumentasjon er like sensitivt som kildekoden, og må behandles deretter. I mange tilfeller kan det være lurt med verktøy som støtter versjonskontroll - i mange tilfeller kan det være lurt å legge dokumentasjon sammen med kildekoden, eller evt i egne repos som kan brukes f.eks. med Azure DevOps wiki.\nHva skal dokumenteres Hva vi bør dokumentere vil variere fra prosjekt til prosjekt. Vi bør alltid ha et design som gir et innblikk i eksempelvis infrastruktur, IAM og dataflyt slik at det er mulig å ettergå dette på senere tidspunkt.\nTrusselmodell må alltid dokumenteres og vedlikeholdes, og eventuelle mitigerende tiltak må også dokumenteres.\nOWASP Top 10 har flere punkter som kan relateres til utviklingsmiljøet og oppsettet av dette, så dersom det er spesielle konfigurasjoner som må på plass bør dette også dokumenteres, slik at en unngår svakheter eller sårbarheter som oppstår dersom noen glemmer viktige steg som ikke er skrevet ned.\nEn må også ta inn over seg kritikaliteten til løsningen; dersom det er et system som har 24/7-oppetidskrav og er kritisk for kunden må dokumentasjonen stå i stil med dette, slik at selv den minst erfarne personen i teamet kan feilsøke problemer uten å kjenne løsningen i detalj.\nVeien videre ","categories":"","description":"Alle utviklingsprosjekter må dokumenteres. Dette er ikke bare viktig for kontinuiteten i prosjektet, men også for å dokumentere sikkerhetsrelaterte tiltak og eventuelle hendelser. \n","excerpt":"Alle utviklingsprosjekter må dokumenteres. Dette er ikke bare viktig …","ref":"/no/utvikle/dokumentasjon/","tags":"","title":"Dokumentasjon"},{"body":" Når løsningen er designet, utviklet og deployet starter en annen jobb som for mange kanskje er litt fremmed: Forvaltning. Uavhengig av hvor mye utvikling som skjer, har vi likevel et ansvar for å forvalte det vi ruller ut i produksjon (eller til andre miljøer). Disse må monitoreres, vi må sikre at vi har jevnlige backups _som også må testes_, at vi har oppdaterte planer for disaster recovery, følger opp sårbare avhengigheter og mye annet. ","categories":"","description":"","excerpt":" Når løsningen er designet, utviklet og deployet starter en annen jobb …","ref":"/no/forvalte/","tags":"","title":"Forvalte"},{"body":" When the solution is designed, developed, and deployed, another job begins that may be a bit unfamiliar to many: Management. Regardless of how much development is happening, we still have a responsibility to manage what we roll out into production (or to other environments). These need to be monitored, we must ensure we have regular backups _that also need to be tested_, that we have up-to-date disaster recovery plans, follow up on vulnerable dependencies, and much more. ","categories":"","description":"","excerpt":" When the solution is designed, developed, and deployed, another job …","ref":"/manage/","tags":"","title":"Manage"},{"body":"Mange utviklingsteam gjør mer enn å skrive kode. Du har gjerne virtuelle maskiner i sky eller on-premise, med applikasjoner eller tjenester som brukes i leveransen hos kunden. Du drifter kanskje integrasjonsløsninger for kunden, containere, applikasjonsservere og mye annet.\nHar dere en rutine for å holde disse oppdatert, og inngår de som en del av det øvrige sikkerhetsarbeidet?\nViktige huskeregler Oppdateringer Dersom dere drifter servere, tjenester eller andre assets innad i teamet må de holdes oppdatert. Dere må sette dere inn i rutinene for release av nye versjoner fra leverandørens side, slik at dere kan holde alt oppdatert. Det er ikke alltid en ønsker å gå for siste versjon hele tiden, så det er viktig å sette seg inn i release notes eller annen dokumentasjon rundt releasen for å forstå hvorfor den kom, og hva den løser.\nHusk på at software vi bruker bør være supportert slik at vi unngår feil og problemer som følge av at en komponent ikke støtter siste versjon av en annen komponent.\nSikkerhetspraksiser Alle komponenter vi bruker må inngå i det totale designet, og vi må ha kontroll på nettverksåpninger, IAM og hvordan disse er eksponert både internt og eksternt. Uten kjennskap til dette er det vanskelig å si noe om hvilke trusler en kan stå overnfor og dermed også mitigerende tiltak.\nHusk på at sikkerheten i en løsning aldri skal avhenge av ett enkelt tiltak; forsøk derfor å isolere komponenter så mye som mulig. Som standard bør ingenting være lov - enten det gjelder tilgang på ressurser eller nettverk inn/ut, men åpne heller eksplisitt for det som skal tillates.\nLogging, monitorering og hendelseshåndtering Husk på at interne komponenter også må monitoreres. Selv om det er hyllevare må samme tiltak gjennomføres her også for å sikre at vi vet hva som skjer og at loggene er til å stole på og ikke kan manipuleres på linje med alt annet vi overvåker.\nVeien videre ","categories":"","description":"Dersom teamet avhenger av interne komponenter som servere, applikasjoner eller annet som driftes av teamet selv, må en ha en rutine for å holde disse oppdatert.  \n","excerpt":"Dersom teamet avhenger av interne komponenter som servere, …","ref":"/no/utvikle/interne-komponenter/","tags":"","title":"Interne komponenter"},{"body":" A Security Champion is a person who acts as a driving force and motivator for security work within a team or department/unit. The responsibility for security lies with the team as a whole, but as a Security Champion, you contribute to awareness and focus. Simply put, a Security Champion is an ambassador for security, the team's security conscience. ","categories":"","description":"","excerpt":" A Security Champion is a person who acts as a driving force and …","ref":"/security-champion/","tags":"","title":"Security Champion"},{"body":" En Security Champion er en person som fungerer som en pådriver og motivator for sikkerhetsarbeidet i et team eller en avdeling/enhet. Ansvaret for sikkerheten ligger på teamet i sin helhet, men som Security Champion bidrar du til bevisstgjøring og fokus. Enkelt forklart så er en Security Champion en ambassadør for sikkerhet, teamets sikkerhetssamvittighet. ","categories":"","description":"","excerpt":" En Security Champion er en person som fungerer som en pådriver og …","ref":"/no/security-champion/","tags":"","title":"Security Champion"},{"body":"Since everything written on this site is freely available on the Internet, it’s important to follow some simple rules and guidelines for content.\nLanguage and Style The content on these pages is primarily for technicians, so technical language is to be expected. However, if terms are used that cannot be assumed to be well known, they must be explained. The language should be readable and understandable by most technicians, not just those who have worked with security for decades!\nRemember that all articles should have an introduction that can be read and understood by everyone from managers and delivery organizations to security experts and junior developers.\nArticle Structure All articles should have the following structure:\n--- title: Page title weight: integer, denotes the menu order translationKey: string, used to map articles across languages description: \u003e The introduction. Typically one or two sentences. --- The introduction should be summarizing and use language that can be read and understood by everyone. ## Main Text All articles should be technology-agnostic. Feel free to use specific technology in examples, but avoid articles that only make sense on Azure or AWS. Use features in MD / Hugo to emphasize or highlight important points. Use code fencing to show examples and break up the content with headings (no one likes a wall of text). ## Further Reading * [Eksternal link 1](URL) * [Eksternal link 2](URL) External Links Use permalinks where possible. The purpose of the Further Reading section is to point to resources with more in-depth content so that it is possible to delve further into a topic after getting a taste from an article.\nIf you use text from another article or source, it must be referenced.\nHelp! Need help with Markdown?\nMarkdown Help Markdown Emojis Hugo Any questions about content, what you can contribute, etc.? Contact us on Slack or see this issue\n","categories":"","description":"It's great that you want to contribute content!\n","excerpt":"It's great that you want to contribute content!\n","ref":"/content-guidelines/","tags":"","title":"Content Guidelines"},{"body":"Siden alt som skrives på denne siden er fritt tilgjengelig på Internet, er det viktig å følge noen enkle regler og retningslinjer for innhold.\nSpråk og stil Innholdet på disse sidene er primært for teknikere og teknisk språk er derfor å forvente. Men, om uttrykk brukes som ikke kan antas å være godt kjent må de beskrives. Språket skal kunne leses og forstås av de fleste teknikere, ikke bare de som har jobbet med sikkerhet i flere tiår!\nHusk også at alle artikler skal ha en inngress som skal kunne leses og forstås av alle fra ledere og leveranseorganisasjon til sikkerhetseksperten og juniorutvikleren.\nArtikeloppbygging Alle artiklene skal ha følgende oppbygning\n--- title: Sidetittel weight: heltall, angir rekkefølgen i menyen translationKey: tekststreng, brukes for å mappe artikler mellom språk description: \u003e Ingressen. Typisk en setning eller to. --- Ingressen skal være oppsummerende og bruke et språk som kan leses og forstås av alle. ## Brødtekst Alle artikler skal være teknologi-agnostiske. Bruk gjerne spesifikk teknologi i eksempler, men unngå artikler som kun gir mening på Azure eller AWS. Bruk features i MD / Hugo til å understreke eller utheve viktige punkter. Bruk code fencing til å vise eksempler og del opp innholdet med headings (ingen liker wall of text) Husk at løsningen baserer seg på at sidetittel er øverste heading-nivå; alt under denne må ha minimum nivå 2 - ## ## Veien videre * [Ekstern lenke 1](URL) * [Ekstern lenke 2](URL) Eksterne lenker Bruk permalenker der dette er mulig. Hensikten med seksjonen Veien videre er å peke på ressurser med mer dyptgående innhold slik at det er mulig å fordype seg videre etter å ha fått en smakebit fra et tema.\nBruker du tekst fra en annen artikkel eller kilde så må dette refereres til.\nHjelp! Trenger du hjelp med Markdown?\nMarkdown hjelp Markdown emojis Hugo Noe du lurer på angående innhold, hva du kan bidra med osv? Ta kontakt med oss på Slack eller se følgende issue\n","categories":"","description":"Så fint at du vil bidra med innhold!\n","excerpt":"Så fint at du vil bidra med innhold!\n","ref":"/no/retningslinjer-for-innhold/","tags":"","title":"Retningslinjer for innhold"},{"body":"","categories":"","description":"","excerpt":"","ref":"/no/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/no/search/","tags":"","title":"Søkeresultat"},{"body":"","categories":"","description":"","excerpt":"","ref":"/no/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"},{"body":"Help, I’m Stuck - Who Can Help? Bouvet is a growing company with many units across various regions, each focusing on different areas. If you need more in-depth expertise or help getting started with application security, it might be helpful to reach out to other colleagues for valuable input.\nIf you have general questions, the #sikkerhet channel on Slack is a great place to start. There, you’ll connect with many skilled colleagues with diverse backgrounds and expertise on most topics covered on sikkerhet.bouvet.no.\nIf you are responsible for delivery and working on a project that requires additional assistance or specialized security expertise, it is wise to contact units in your region. Below is an updated list of units that can assist in this area - don’t hesitate to reach out!\nAkershus, Buskerud \u0026 Innlandet Bergen Nord Rogaland βiga - Application Security\nSør Øst ","categories":"","description":"","excerpt":"Help, I’m Stuck - Who Can Help? Bouvet is a growing company with many …","ref":"/index3/","tags":"","title":"Who Can Help?"}]