<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Develop on Sikkerhet.bouvet.no - For Security Champions in Bouvet</title><link>https://sikkerhet.bouvet.no/develop/</link><description>Recent content in Develop on Sikkerhet.bouvet.no - For Security Champions in Bouvet</description><generator>Hugo</generator><language>en</language><atom:link href="https://sikkerhet.bouvet.no/develop/index.xml" rel="self" type="application/rss+xml"/><item><title>Development Environment, Tools, and Build Environment</title><link>https://sikkerhet.bouvet.no/develop/dev_environments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sikkerhet.bouvet.no/develop/dev_environments/</guid><description>&lt;p>The development environment and build environment are some of the most important aspects of a development project, and it is crucial that we have control over these dependencies.&lt;/p>
&lt;p>There are many different ways to approach these environments; some develop and build locally on their own laptop, while others use a combination of dedicated development and build environments - based on cloud services like Azure DevBox or on-prem development servers.&lt;/p>
&lt;p>Regardless of the solution chosen, there are some important points that should be documented and maintained - both to have a basis that can be threat modeled and validated, but also so that new team members can quickly onboard and get a &amp;ldquo;right&amp;rdquo; environment.&lt;/p></description></item><item><title>Secrets</title><link>https://sikkerhet.bouvet.no/develop/secrets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sikkerhet.bouvet.no/develop/secrets/</guid><description>&lt;p>Secrets in development projects are represented as &lt;em>connection strings&lt;/em>, &lt;em>passwords&lt;/em>, &lt;em>keys&lt;/em>, &lt;em>certificates&lt;/em>, and any other sensitive information we do not want others to know about.&lt;/p>
&lt;p>There are many different approaches to handling these, and this has evolved as new services emerge. For cloud solutions, services like Azure Key Vault and similar have almost become standard, as these services handle multiple aspects of how to use and manage secrets.&lt;/p>
&lt;h2 id="basic-principles-for-handling-secrets">Basic Principles for Handling Secrets&lt;a class="td-heading-self-link" href="#basic-principles-for-handling-secrets" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Secrets should never be hard-coded or checked into version control systems&lt;/li>
&lt;li>Verify compliance by scanning the code - reject commits with secrets and rotate them immediately!&lt;/li>
&lt;li>Keep track of which secrets you have and what access they provide&lt;/li>
&lt;li>Limit the lifetime of secrets - no secrets should live more than a year, passwords and keys much shorter&lt;/li>
&lt;li>Team members should not always have access to all secrets; elevate or provide access as needed&lt;/li>
&lt;/ul>
&lt;h1 id="cryptography-and-hashing">Cryptography and Hashing&lt;a class="td-heading-self-link" href="#cryptography-and-hashing" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Cryptography and hashing algorithms are complex topics, and it requires significant resources and &lt;em>a lot&lt;/em> of competence to build good algorithms that are secure. For this simple reason, you should &lt;strong>never&lt;/strong> create your own, no matter how clever and secure it seems to be.&lt;/p></description></item><item><title>Data Validation</title><link>https://sikkerhet.bouvet.no/develop/data-validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sikkerhet.bouvet.no/develop/data-validation/</guid><description>&lt;p>If you receive input from users or fetch data from other systems, you should never blindly trust it. OWASP Top 10 has listed various forms of vulnerabilities related to code injection at the top of their lists since the first one was published in 2004.&lt;/p>
&lt;p>Ensure that the data contains what you expect; if you import files, they must be scanned for malware before processing them further. Also, consider the need for using sandbox environments to process such files to limit the damage potential.&lt;/p></description></item><item><title>Security Practices</title><link>https://sikkerhet.bouvet.no/develop/security-practices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sikkerhet.bouvet.no/develop/security-practices/</guid><description>&lt;p>There are many different types of vulnerabilities and weaknesses to consider when developing new applications. The Open Worldwide Application Security Project (OWASP) has published a list of the 10 most common types of vulnerabilities since 2004, primarily aimed at web applications. Although this list does not cover everything, it is often used as a starting point for vulnerabilities that must be addressed in development projects.&lt;/p>
&lt;h2 id="current-points-on-the-owasp-top-10">Current Points on the OWASP Top 10:&lt;a class="td-heading-self-link" href="#current-points-on-the-owasp-top-10" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ol>
&lt;li>Broken Access Control&lt;/li>
&lt;li>Cryptographic Failures&lt;/li>
&lt;li>Injection&lt;/li>
&lt;li>Insecure Design&lt;/li>
&lt;li>Security Misconfiguration&lt;/li>
&lt;li>Vulnerable and Outdated Components&lt;/li>
&lt;li>Identification and Authentication Failures&lt;/li>
&lt;li>Software and Data Integrity Failures&lt;/li>
&lt;li>Security Logging and Monitoring Failures&lt;/li>
&lt;li>Server-Side Request Forgery&lt;/li>
&lt;/ol>
&lt;p>If the team has no processes around secure development, this would be a good start. For teams with greater maturity in application security, other checklists, such as the Application Security Verification Standard - also from OWASP, are a further option. This is divided into three different levels; level 1 covers the main points and requires only general competence, while level 3 goes more in-depth and requires specific competence and support tools.&lt;/p></description></item><item><title>Software Supply Chain</title><link>https://sikkerhet.bouvet.no/develop/software-supply-chain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sikkerhet.bouvet.no/develop/software-supply-chain/</guid><description>&lt;p>When we build software, we depend on a multitude of different third-party packages from ecosystems like npmjs, nuget, PyPi, or others. This is code &amp;ldquo;written by others,&amp;rdquo; where we rely on these producing packages without major weaknesses and without malicious intent. Sources such as Gartner, Sonatype, and Snyk have estimated that as much as 90% of the code in a typical development project may consist of such third-party packages, so the risk is significant if we do not have control.&lt;/p></description></item><item><title>Documentation</title><link>https://sikkerhet.bouvet.no/develop/documentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sikkerhet.bouvet.no/develop/documentation/</guid><description>&lt;p>Documentation is often seen as a necessary evil, and we are not always good enough at documenting our projects. Many believe that the source code is the best documentation, but it only says how an application works, not necessarily why it works the way it does, or what the actual intention is.&lt;/p>
&lt;p>There are many reasons why we need to document the solution we are building; the most obvious is to ensure that new team members can understand what the project is about and also to ensure that information does not only live in the heads of individuals. Another important aspect of this is the documentation concerning the security of the project. If we do not document what measures are taken and why, or what threats we face and how we handle them, we place a huge responsibility on the team members who come after us: What seems like a logical and reasonable solution given a security context can seem backward and cumbersome to someone without the same context and competence, and we risk that important measures are removed to &lt;em>simplify&lt;/em> the solution - at the expense of security.&lt;/p></description></item><item><title>Internal Components</title><link>https://sikkerhet.bouvet.no/develop/internal-components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sikkerhet.bouvet.no/develop/internal-components/</guid><description>&lt;p>Many development teams do more than just write code. You might have virtual machines in the cloud or on-premise, with applications or services used in the delivery to the customer. You may manage integration solutions for the customer, containers, application servers, and much more.&lt;/p>
&lt;p>Do you have a routine for keeping these updated, and are they part of the overall security efforts?&lt;/p>
&lt;h2 id="important-reminders">Important Reminders&lt;a class="td-heading-self-link" href="#important-reminders" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="updates">Updates&lt;a class="td-heading-self-link" href="#updates" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>If you manage servers, services, or other assets within the team, they must be kept up to date. You need to familiarize yourself with the release routines for new versions from the supplier&amp;rsquo;s side so that you can keep everything updated. It&amp;rsquo;s not always desirable to go for the latest version all the time, so it&amp;rsquo;s important to read the release notes or other documentation about the release to understand why it came out and what it solves.&lt;/p></description></item><item><title>Security Testing</title><link>https://sikkerhet.bouvet.no/develop/security-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sikkerhet.bouvet.no/develop/security-testing/</guid><description>&lt;p>Security testing should always be an element of all deliveries. Many associate security testing with penetration testing, but it is much more than that. Some forms of testing can be done automatically as part of CICD, while others are more manual and typically performed against a deployed solution.&lt;/p>
&lt;p>Before starting security testing, it is important to understand what it can provide you - there is no single measure that solves all security problems, and no single test method that uncovers all weaknesses. Security testing is also one of the areas that often require specific expertise for the results to be good and/or interpreted correctly.&lt;/p></description></item></channel></rss>