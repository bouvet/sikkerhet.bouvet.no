<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sikkerhet.bouvet.no on Sikkerhet.bouvet.no - For Security Champions i Bouvet</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/</link><description>Recent content in sikkerhet.bouvet.no on Sikkerhet.bouvet.no - For Security Champions i Bouvet</description><generator>Hugo</generator><language>no</language><atom:link href="https://chrish.github.io/sikkerhet.bouvet.no/no/index.xml" rel="self" type="application/rss+xml"/><item><title>Ansvarsfordeling</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/planlegge/ansvarsfordeling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/planlegge/ansvarsfordeling/</guid><description>&lt;p>Bouvet gjennomfører utviklingsprosjekter på mange ulike måter, der vi tar mer eller mindre ansvar for prosjektledelse, planlegging, utviklingsfasen, kvalitetssikring og ikke minst drift og forvaltning av løsningen. Vi har også ulike innslag av eget, kundens og tredjepartsutstyr, både under utvikling og forvaltning av løsningen.&lt;/p>
&lt;p>Uavhengig av hvordan prosjektet gjennomføres er det viktig at vi har kontroll på ansvarsfordelingen. Denne skal være regulert i avtalen med kunden, og vi må sikre at vi&lt;/p></description></item><item><title>Bouvet Security Champion</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/security-champion/hva_er_en_security_champion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/security-champion/hva_er_en_security_champion/</guid><description>&lt;h2 id="hvorfor-security-champion">Hvorfor &amp;ldquo;Security Champion&amp;rdquo;&lt;a class="td-heading-self-link" href="#hvorfor-security-champion" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Begrepet &amp;ldquo;Security Champion&amp;rdquo; har etterhvert blitt et etablert begrep for å favne om folk som ikke nødvendigvis jobber direkte med sikkerhet, men som kan være en brobygger mellom de formelle sikkerhetsrollene og utviklerteamene.&lt;/p>
&lt;p>Det finnes mange måter å implementere et Security Champion-program på; OWASP har en &lt;a href="https://owasp.org/www-project-security-culture/stable/4-Security_Champions/">forholdsvis utfyllende liste&lt;/a> med punkter for et program der Security Champions har en mer formell rolle. I Bouvet har vi valgt en annen løsning inspirert av &lt;a href="https://sikkerhet.nav.no/docs/bli-security-champion/">NAV&lt;/a> og &lt;a href="https://equinor.github.io/appsec/security-champion/">Equinor&lt;/a> der det hele er mer uformellt, og hver enkelt kan bidra med det en kan og har kapasitet til.&lt;/p></description></item><item><title>CI/CD</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/deploye/cicd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/deploye/cicd/</guid><description>&lt;p>Når vi setter opp kjøremiljøer er det viktig å også tenke på hvordan løsningen vi utvikler kan bygges og deployes til disse på en måte som både gjør det enkelt og fjerner behovet for at en person skal måtte bruke tid og energi på å gjøre det samme hver gang.&lt;/p>

&lt;figure>
 &lt;img src="../cicd.png"/> 
&lt;/figure>

&lt;h2 id="bruk-av-cicd">Bruk av CI/CD&lt;a class="td-heading-self-link" href="#bruk-av-cicd" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Continuous Integration og Continuous Delivery, ofte forkortet CI/CD er vanlige tilnærminger for hvordan software bygges og deployes til kjøremiljø, ofte ved hjelp av skript i form av pipelines eller actions. Navn og begreper her avhenger av hvilke verktøy en bruker, men prinsippet er mye det samme.&lt;/p></description></item><item><title>Introduksjon</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/introduksjon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/introduksjon/</guid><description>&lt;p>Det overordnede innholdet og temaene som diskuteres på disse sidene er også støttende for prosjektledere, rådgivere og andre som skal følge opp sikkerhet i prosjekter.&lt;/p>
&lt;p>Bouvet er &lt;a href="https://www.bouvet.no/om-bouvet/vare-iso-sertifiseringer">sertifisert under ISO27001&lt;/a>, som også stiller krav til sikkerhet i leveranser. &lt;a href="https://chrish.github.io/sikkerhet.bouvet.no/no/sjekklisten/">Sjekklista&lt;/a> vil gi deg et godt utgangspunkt for tiltak som dekker vanlige sikkerhetshull og hjelper til å sikre kvalitet i leveransen. Hvert av punktene i sjekklista dekkes av mer utfyllende informasjon slik at det skal være lett å komme igang uten forkunnskaper om et tema.&lt;/p></description></item><item><title>Sikkerhetskrav</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/designe/sikkerhetskrav/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/designe/sikkerhetskrav/</guid><description>&lt;p>Noen krav er implisitte, som eksempelvis bruk av HTTPS/TLS, mens andre vil være eksplisitte og definert av lovverk, kunde eller tredjepart. Dersom kunden ikke har noen spesifikke krav er det likevel viktig at leveranseteamet lager en kravliste slik at rammene for prosjektet er dokumentert.&lt;/p>
&lt;p>De fleste prosjekter må forholde seg til ulike krav fra Bouvet, kunden og eksterne parter. Alle utviklingsteam må ha kontroll på hvilke krav som stilles til leveransen:&lt;/p></description></item><item><title>Utviklingsmiljø, verktøy og byggmiljø</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/utviklingsmiljoer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/utviklingsmiljoer/</guid><description>&lt;p>Utviklingsmiljøet og byggmiljøet er noe av det viktigste vi har i et utviklingsprosjekt, og er en avhengighet det er utrolig viktig at vi har kontroll på.&lt;/p>
&lt;p>Det finnes mange ulike måter å forholde seg til disse miljøene; noen utvikler og bygger lokalt på egen laptop, mens andre bruker en kombinasjon av dedikerte utvikling- og byggmiljø - basert på skytjenester som Azure DevBox eller on-prem utviklingsservere.&lt;/p>
&lt;p>Uavhengig av hvilken løsning en går for, er det noen viktige momenter som bør dokumenteres og vedlikeholdes - både for å ha et utgangspunkt som kan trusselmodelleres og valideres, men også for at nye teammedlemmer raskt kan onboardes og få et miljø som er &amp;ldquo;rett&amp;rdquo;.&lt;/p></description></item><item><title>Verifiser designet</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/forvalte/verifisering-av-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/forvalte/verifisering-av-design/</guid><description>&lt;p>Når vi lager et &lt;a href="https://chrish.github.io/sikkerhet.bouvet.no/no/designe/systemskisser/">design&lt;/a> for en ny løsning hender det at det er detaljer vi ikke kjenner, eller at det oppstår uventede komplikasjoner underveis i implementeringen. Dette kan resultere i at designet vi opprinnelig laget avviker fra den ferdige løsningen.&lt;/p>
&lt;p>Dokumentasjonen er viktig for å forstå hvordan en løsning er satt opp og hvordan den fungerer, spesielt om det oppstår en hendelse som krever redeployment eller disaster recovery. For å sikre at gapet mellom dokumentasjon og ferdig produkt ikke er for stort bør vi derfor alltid validere designet i etterkant.&lt;/p></description></item><item><title>Audit eller revisjon av prosjekt eller leveranse</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/forvalte/audit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/forvalte/audit/</guid><description>&lt;p>Det er langt fra alle leveranser som er aktuelle for revisjon eller audit fra kundens side, dette vil typisk gjelde leveranser der Bouvet har tatt styring og kunden i større grad mottar en løsning uten at de er tungt involvert i driften av prosjektet. En revisjon er verktøy kunden kan benytte for å sikre at Bouvet har gjort jobben som avtalt, der kunden har mulighet til å gjennomgå våre rutiner og arbeidsprosesser for å sikre at vi har levert som vi skal.&lt;/p></description></item><item><title>Bygging</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/deploye/bygg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/deploye/bygg/</guid><description>&lt;p>Bygging er ofte det første steget i prosessen, og gjøres typisk bare en gang per release. Byggmiljøene brukt i en CI/CD prosess, ofte kalt byggagenter kommer ofte i to former:&lt;/p>
&lt;ul>
&lt;li>skyleverandørstyrte agenter&lt;/li>
&lt;li>selvstyrte agenter - disse kan hostes både i sky eller on-premise&lt;/li>
&lt;/ul>
&lt;p>Med agenter styrt av skyleverandøren brukes standardimages ferdig konfigurert for denne oppgaven. De deployes når du starter en byggeprosess, og inneholder alt av verktøy som trengs for byggingen. Når de er ferdig deployet sjekker de ut kildekoden din, bygger den, lagrer artifakten i et egnet system før instansen stanses og slettes.&lt;/p></description></item><item><title>Data og Klassifisering</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/planlegge/data-og-klassifisering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/planlegge/data-og-klassifisering/</guid><description>&lt;div class="tip-box">
 &lt;strong>Kort oppsummert&lt;/strong>
 &lt;p>
De fleste organisasjoner opererer med ulike klassifikasjonsnivå på både data og systemer. Klassifiseringen gjøres ofte med bakgrunn i hvordan data brukes, hvor det lagres og hvem som kan aksessere disse. Dette er nøkkelkrav for ethvert utviklingsprosjekt og må avklares i forkant.
&lt;/p>
&lt;/div>
&lt;h2 id="klassifisering">Klassifisering&lt;a class="td-heading-self-link" href="#klassifisering" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>De aller fleste organisasjoner har rutiner og prosesser for klassifisering av data, for eksempel i følgende nivå:&lt;/p>
&lt;ul>
&lt;li>Åpent&lt;/li>
&lt;li>Internt&lt;/li>
&lt;li>Konfidensielt&lt;/li>
&lt;li>Begrenset&lt;/li>
&lt;/ul>
&lt;p>Avhengig av denne klassifiseringen kan det foreligge ulike krav til sikring av data. Åpne data har typisk ingen begrensninger, mens data klassifisert som &amp;ldquo;begrenset&amp;rdquo; kan ha begrensninger som at en&lt;/p></description></item><item><title>Hemmeligheter</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/hemmeligheter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/hemmeligheter/</guid><description>&lt;p>Hemmeligheter er representert i utviklingsprosjekter i form av &lt;em>connection strings&lt;/em>, &lt;em>passord&lt;/em>, &lt;em>nøkler&lt;/em>, &lt;em>sertifikater&lt;/em> og alt annet som regnes som sensitiv informasjon vi ikke ønsker at andre skal få kjennskap til.&lt;/p>
&lt;p>Det finnes mange ulike tilnærminger til hvordan disse skal håndteres, og dette har også endret seg etter hvert som nye tjenester dukker opp. For skyløsninger har tjenester som Azure Key Vault og liknende nærmest blitt en standard, da disse tjenestene håndterer flere aspekter av hvordan en bruker og forvalter hemmeligheter.&lt;/p></description></item><item><title>Hva gjør en Security Champion</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/security-champion/hva_gj%C3%B8r_en_sc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/security-champion/hva_gj%C3%B8r_en_sc/</guid><description>&lt;h2 id="1-skap-bevissthet-i-leveranseteamet">1. Skap bevissthet i leveranseteamet&lt;a class="td-heading-self-link" href="#1-skap-bevissthet-i-leveranseteamet" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Du kan gjerne begynne med å stille deg selv noen spørsmål?&lt;/p>
&lt;ul>
&lt;li>Hva gjør dette prosjektet jeg jobber med egentlig?&lt;/li>
&lt;li>Hva er kritisk for at systemet skal fungerer?&lt;/li>
&lt;li>Hvordan kan dette systemet misbrukes, hvilke angrepsflater eksisterer i systemet?&lt;/li>
&lt;li>Eksisterer det en oppdatert trusselmodell med dertil tiltak for å forhindre utnyttelse av svakhetene?&lt;/li>
&lt;/ul>
&lt;p>Når du begynner å skape deg en bevissthet så kan vi gå videre å finne ut av mer. Nå kan du begynne å ta litt initiativ i teamet ditt.&lt;/p></description></item><item><title>Nettverkskonsepter</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/designe/nettverk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/designe/nettverk/</guid><description>&lt;p>Nettverk er en grunnleggende komponent i alt vi lager, og det er viktig med en grunnleggende forståelse for hvordan dette fungerer og hvordan det kan utnyttes av andre.&lt;/p>
&lt;p>Riktig konfigurasjon av nettverk er viktig for både rene skyløsninger, hybride nettverk og rene on-prem-løsninger. Nettverk er et stort fagfelt, med store variasjoner i bruksområde, sikkerhet og kompleksitet. Under dekker vi grunnleggende konsepter for kommunikasjon til og fra servere og nettjenester.&lt;/p>
&lt;h2 id="zero-trust-arkitektur">Zero trust arkitektur&lt;a class="td-heading-self-link" href="#zero-trust-arkitektur" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Zero_trust_security_model">Zero trust&lt;/a> er et viktig konsept innen nettverksdrift. Kort fortalt så skal man aldri stole på noe som kommer fra andre systemer, og du skal anta at all kommunikasjon vil bli kompromittert. Zero trust kan ikke løses bare ved å sikre nettverket, men må være et mål i seg selv når en designer løsninger og infrastrukturen rundt disse. Ved å implementere zero-trust vil du fjerne mange potensielle angrepsvektorer og dermed beskytte tjenestene som benytter nettverket.&lt;/p></description></item><item><title>Sjekklisten for sikkerhet</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/sjekklisten/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/sjekklisten/</guid><description>&lt;p>Det er ikke gitt at alle punktene er relevante i alle prosjekter, eller at innføring av alle tiltak er ønskelig. Hvert enkelt team og leveranseansvarlig må selv vurdere kost/nytte og hvilket ansvar og risiko en påtar seg ved å ikke innføre tiltak. Sikkerhet krever kontinuerlig arbeid, så se over sjekklista jevnlig for å se om det er tiltak som kan eller bør innføres slik at en ikke overser noe.&lt;/p>
&lt;p>Last ned sjekklisten og implementer den som en del av kildekoden i ditt prosjekt!&lt;/p></description></item><item><title>Systemskisser</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/designe/systemskisser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/designe/systemskisser/</guid><description>&lt;p>Når vi designer en løsning, er det viktig med gode og oversiktlige skisser og diagrammer som viser designet slik at det planlagt. Dette gjøres allerede av mange utviklerteam uten at det nødvendigvis stilles krav til det, men det er likevel greit å nevne her.&lt;/p>
&lt;p>Systemskissene bør gi nok informasjon til at en i etterkant kan&lt;/p>
&lt;ul>
&lt;li>Validere at implementasjonen er som designet&lt;/li>
&lt;li>Bruke dem ifm trusselmodellering, pentesting eller liknende&lt;/li>
&lt;li>Brukes av den/de som forvalter løsningen for å få en god oversikt over komponenter og dataflyt&lt;/li>
&lt;li>Brukes av leveranseteamet for onboarding av nye kollegaer eller handover til andre team.&lt;/li>
&lt;/ul>
&lt;p>Selv om det er mye som kan dokumenteres her, fokuserer vi bare på det viktigste her:&lt;/p></description></item><item><title>Business Continuity</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/planlegge/business-continuity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/planlegge/business-continuity/</guid><description>&lt;p>&lt;em>Business Continuity Planning&lt;/em> er &lt;em>ikke&lt;/em> utelukkende et IT-teknisk anliggende, men det er vårt ansvar som leverandører av et IT-system å minne kunden på at systemet kan bli utilgjengelig.&lt;br>
Svaret fra denne planleggingen vil være med å beskrive hvilke krav som stilles til løsningens robusthet og sikkerhetsnivå, og er avgjørende for å finne riktig balanse på kostnad og ytelse hos systemet.&lt;/p>
&lt;p>Her er det viktig å ha et forhold til&lt;/p>
&lt;ul>
&lt;li>Kritikaliteten av løsningen&lt;/li>
&lt;li>Eventuelle workarounds dersom løsningen er utilgjengelig&lt;/li>
&lt;li>Konsekvenser eller merarbeid som følge av utilgjengelighet eller når løsningen igjen blir tilgjengelig.&lt;/li>
&lt;/ul>
&lt;h2 id="kundens-forventninger">Kundens forventninger&lt;a class="td-heading-self-link" href="#kundens-forventninger" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Har vi definert en Service Level Agreement (SLA) med kunden som legger føringer på oppetid, tilgjengelighet og liknende, eller har kunden implisitte forventninger til dette?&lt;/p></description></item><item><title>Datavalidering fra andre systemer</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/datavalidering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/datavalidering/</guid><description>&lt;p>Dersom du henter data fra andre systemer bør du aldri stole blindt på disse. OWASP Top 10 har hatt ulike former for sårbarheter relatert til kodeinjeksjon på de øverste punktene sine siden den første lista kom i 2004.&lt;/p>
&lt;p>Uavhengig av hvor dataene kommer fra, skal du alltid behandle disse på linje med brukerinput fra et sikkerhetsperspektiv. Sjekk at du får det du forventer, og dersom du henter inn filer må disse skannes for malware før du behandler dem videre. Vurder også behovet for bruk av sandbox-miljø for å prosessere slike filer, slik at skadepotensialet begrenses.&lt;/p></description></item><item><title>Deployering</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/deploye/deploy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/deploye/deploy/</guid><description>&lt;p>Når vi setter opp kjøremiljøer er det viktig å også tenke på hvordan løsningen vi utvikler kan bygges og deployes til disse på en måte som både gjør det enkelt og fjerner behovet for at en person skal måtte bruke tid og energi på å gjøre det samme hver gang.&lt;/p>

&lt;figure>
 &lt;img src="../cicd.png"/> 
&lt;/figure>

&lt;p>Når en deployerer en applikasjon tar man utgangspunkt i artifakten som ble bygget, som så lastes opp til ønsket kjøremiljø. For å sikre konsistens er det vanlig å bare bygge en gang, slik at man deployer det samme artifaktet flere steder - dersom miljøene er like og artifaktet er det samme, skal vi se det samme overalt.&lt;/p></description></item><item><title>Hvordan bidra utover teamet</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/security-champion/sc_utover_teamet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/security-champion/sc_utover_teamet/</guid><description>&lt;p>I Bouvet kjører vi jevnlige samlinger - Bouvet ONE - der det kjøres foredrag om alt mellom himmel og jord, ofte med egne sikkerhetsspor. Vi har også kjørt egne Bouvet ONE dedikert til sikkerhet. Her er det fritt frem til å bidra - alle foredrag blir satt pris på, uansett hvor enkelt du selv mener noe måtte være.&lt;/p>
&lt;h2 id="engasjer-deg-i-security-champions-regionalt">Engasjer deg i Security Champions regionalt&lt;a class="td-heading-self-link" href="#engasjer-deg-i-security-champions-regionalt" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>De fleste regionene i Bouvet har egne Security Champions samlinger på jevnlig basis, der en deler kunnskap, tips, triks og mye annet. Engasjer deg her, og bidra til å bygge opp en regional sikkerhetskultur i utviklerteamene!&lt;/p></description></item><item><title>Logging og monitorering</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/forvalte/logging-monitorering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/forvalte/logging-monitorering/</guid><description>&lt;p>Uavhengig av hvor en løsning deployeres bør vi sikre at den monitoreres. Selv om den eksempelvis &lt;em>kun&lt;/em> skal være tilgjengelig på intranettet der det kun finnes interne brukere som jobber fra godkjente enheter over vpn, er det viktig med logging av informasjon dersom en av disse kompromitteres. Et typisk DevOps-team vil samle inn en del informasjon for å hjelpe til med feilsøking av funksjonaliteten i applikasjonen, men vi trenger også en del annen informasjon for å kunne si noe om sikkerhetsbildet rundt den.&lt;/p></description></item><item><title>Segregering av miljø</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/designe/segregering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/designe/segregering/</guid><description>&lt;p>Når vi bygger løsninger setter vi ofte opp flere miljø, ofte for dev, test og prod slik at vi kan utvikle samtidig som at produkteier tester ny funksjonalitet og sluttbrukere bruker systemet i prod. Det er viktig at vi skiller mellom disse miljøene, slik at vi unngår å komme i situasjoner der endringer i ett miljø påvirker bruken av et annet.&lt;/p>
&lt;p>Når vi designer en ny løsning må vi derfor tenke på hvordan vi skiller mellom miljøene. For skytjenester er en vanlig tilnærming ofte å benytte seg av ulike subscriptions per miljø der dette er mulig. En subscription kan ikke påvirke en annen med mindre dette er eksplisitt satt opp, men det finnes andre muligheter også.&lt;/p></description></item><item><title>Autentisering og autorisering</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/designe/autentisering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/designe/autentisering/</guid><description>&lt;p>Autentisering og autorisering er viktig i alle utviklingsprosjekter. Kort fortalt går &lt;em>autentisering&lt;/em> ut på at en skal validere at en bruker representerer den identiteten den hevder å representere, typisk gjennom å sjekke brukernavn og tilhørende passord. &lt;em>Autorisering&lt;/em> går ut på å sjekke at brukeren har lov til å gjøre det den prøver på. Disse er ofte forkortet til &lt;em>authn&lt;/em> for autentisering og &lt;em>authz&lt;/em> for autorisering.&lt;/p>
&lt;h2 id="autentisering">Autentisering&lt;a class="td-heading-self-link" href="#autentisering" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Når en skal validere en bruker, er det viktigste at en &lt;em>ikke&lt;/em> lager en egen autentiseringsløsning! Å sikre at slike løsninger faktisk er sikre er en kjempejobb, og man bør istedet benytte seg av etablerte løsninger for dette!&lt;/p></description></item><item><title>Forvaltning av avhengigheter</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/forvalte/avhengighetshandtering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/forvalte/avhengighetshandtering/</guid><description>&lt;p>Når teamet er i forvaltningsmodus gjelder fremdeles de fleste problemstillingene nevnt i artikkelen om &lt;a href="https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/software-supply-chain/">Software Supply Chain&lt;/a>. Dere vil komme i situasjoner der&lt;/p>
&lt;ul>
&lt;li>det oppdages en kritisk sårbarhet i en pakke dere bruker&lt;/li>
&lt;li>pakker deprekeres og erstattes med noe nytt som ikke er direkte kompatibelt med det gamle&lt;/li>
&lt;li>utviklere bak pakker slutter å vedlikeholde pakkene&lt;/li>
&lt;li>ondsinnede aktører overtar en pakke og bruker den for å spre malware&lt;/li>
&lt;/ul>
&lt;p>&amp;hellip;.og helt sikkert andre varianter som resulterer i at dere må gjøre &lt;em>noe&lt;/em>. For å sikre at pakker som treffer ett eller flere av punktene over tas tak i. Verktøy som Sonatype og andre gir muligheten til å overvåke ulike steg i livssyklusen, med mulighet til å varsle når sårbarheter eller andre hendelser som påvirker kvaliteten inntreffer.&lt;/p></description></item><item><title>Penetrasjonstesting</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/deploye/pentesting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/deploye/pentesting/</guid><description>&lt;p>&lt;a href="https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/sikkerhetstesting/">Sikkerhetstesting&lt;/a> og pentesting har mange fellestrekk, men der tilnærminger som DAST primært fokuserer på webapplikasjoner og mer automatiserte tester, vil en pentest være mer omfattende og typisk også inkludere underliggende infrastruktur og nettverk. I noen tilfeller vil den også kunne ha et fysisk element der pentesterne vil forsøke å komme seg inn i lokalene for å avdekke svakheter ved fysisk sikring eller rutiner.&lt;/p>
&lt;p>En penetrasjonstest vil &lt;em>alltid&lt;/em> ha et avtalt omfang som regulerer hva pentesterne kan gjøre, når de kan gjøre det og hvilke ressurser og tjenester de kan teste.&lt;/p></description></item><item><title>Sikkerhetspraksiser</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/sikkerhetspraksiser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/sikkerhetspraksiser/</guid><description>&lt;p>Det finnes mange ulike typer sårbarheter og svakheter vi må forholde oss til når vi utvikler nye applikasjoner. Organisasjonen Open Worldwide Application Security Project har siden 2004 gitt ut en liste med de 10 mest vanlige typer sårbarheter, primært rettet mot webapplikasjoner. Selv om denne ikke inneholder alt, brukes den ofte som et utgangspunkt for sårbarheter som må håndteres i utviklingsprosjekter.&lt;/p>
&lt;h2 id="gjeldende-punkter-på-owasp-top-10">Gjeldende punkter på OWASP Top 10:&lt;a class="td-heading-self-link" href="#gjeldende-punkter-p%c3%a5-owasp-top-10" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ol>
&lt;li>Broken Access Control&lt;/li>
&lt;li>Cryptographic Failures&lt;/li>
&lt;li>Injection&lt;/li>
&lt;li>Insecure Design&lt;/li>
&lt;li>Security Misconfiguration&lt;/li>
&lt;li>Vulnerable and Outdated Components&lt;/li>
&lt;li>Identification and Authentication Failures&lt;/li>
&lt;li>Software and Data Integrity Failures&lt;/li>
&lt;li>Security Logging and Monitoring Failures&lt;/li>
&lt;li>Server-Side Request Forgery&lt;/li>
&lt;/ol>
&lt;p>Dersom teamet ikke har noen prosesser rundt sikker utvikling, vil dette være en god start. For team med større modenhet innenfor applikasjonssikkerhet vil andre sjekklister, som Application Security Verification Standard - også fra OWASP være et videre alternativ. Denne er delt opp i tre ulike nivå, der nivå 1 dekker hovedpunktene, mens level 3 går mye mer i dybden og krever mer kompetanse og støtteverktøy.&lt;/p></description></item><item><title>Verktøy brukt i leveransen</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/planlegge/verktoy-og-bruk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/planlegge/verktoy-og-bruk/</guid><description>&lt;p>Alle utviklingsteam benytter ulike verktøy i utviklingsprosessen, og utvalget vil varierere fra team til team avhengig av personlige preferanser, teknologivalg, system og kundekrav og mye annet.&lt;/p>
&lt;p>Et typisk team vil benytte seg av en eller annen form for&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Integrated_development_environment">IDE&lt;/a>&lt;/li>
&lt;li>et system for versjonskontroll av koden, typisk &lt;em>git&lt;/em>&lt;/li>
&lt;li>et verktøy for &lt;a href="https://chrish.github.io/sikkerhet.bouvet.no/no/deploye/cicd/">CI/CD&lt;/a> som kan utføre ulike oppgaver relatert til bygging, testing eller deployment&lt;/li>
&lt;li>andre tjenester driftet eller konsumert av teamet, f.eks. meldingstjenester, filoverføringstjenester, generativ AI (copilots) eller liknende&lt;/li>
&lt;/ul>
&lt;p>Disse verktøyene kan ha stor betydning for sikkerhet og kvalitet i leveranser, så det er viktig at teamet har et forhold til hvordan disse settes opp.&lt;/p></description></item><item><title>Øv på gjenoppretting</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/forvalte/preparedness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/forvalte/preparedness/</guid><description>&lt;p>Dersom teamet har gjort alt rett til nå har dere en plan for &lt;a href="https://chrish.github.io/sikkerhet.bouvet.no/no/planlegge/business-continuity/">disaster recovery&lt;/a> som forteller dere hva som må gjøres for å gjenopprette infrastruktur, applikasjoner og data slik at en kommer tilbake til normal drift.&lt;/p>
&lt;p>Årsakene til at en er nødt å gjenopprette kan være mange, og svært varierende i omfang. Hvem har vel ikke kjørt en &lt;code>delete from &amp;lt;table&amp;gt; where x = 'something'&lt;/code> med manglende eller feil parametre, eller droppet feil tabell fra en database? Eller slettet en server eller appservice fra et prodmiljø ved en feil (&lt;em>jeg skulle bare fikse noe kjapt&amp;hellip;.&lt;/em>). I slike tilfeller kan det gå kjapt å gjenopprette dersom en vet hva som gikk galt, men i andre og mer komplekse tilfeller som f.eks. involverer ukjente feil i programvaren eller problemer hos en skytjenesteleverandør kan det bli mer komplekst.&lt;/p></description></item><item><title>Sikkerhetskontrollpunkt</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/planlegge/sikkerhetskontrollpunkt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/planlegge/sikkerhetskontrollpunkt/</guid><description>&lt;p>Avhengig av sikkerhetsnivået en leveranse ønsker å legge seg på, kan det være nødvendig å definere mekanismer for å vurdere sikkerheten på faste punkter i utviklingsløpet, såkalte sikkerhetskontrollpunkt.&lt;/p>
&lt;p>Disse kan defineres mellom logiske faser i prosjektet, eksempelvis mellom design og utviklingsfasene, eller når en går fra utvikling til første release i produksjon. Andre og flere kontrollpunkter kan også defineres, helt avhengig av kravene leveranseteamet må forholde seg til.&lt;/p>

&lt;figure>
 &lt;img src="../ibm_relative_cost2.png"/> 
&lt;/figure>

&lt;p>IBM har &lt;a href="https://www.researchgate.net/figure/IBM-System-Science-Institute-Relative-Cost-of-Fixing-Defects_fig1_255965523">i en studie&lt;/a> fastslått at generelle svakheter i applikasjoner utviklet for det amerikanske forsvaret kostet langt mindre å utbedre jo tidligere de ble oppdaget.&lt;/p></description></item><item><title>Software supply chain</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/software-supply-chain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/software-supply-chain/</guid><description>&lt;p>Når vi bygger software har vi avhengigheter til en hel haug med ulike tredjepartspakker, fra økosystem som npmjs, nuget, PyPi eller andre. Dette er kode &amp;ldquo;skrevet av andre&amp;rdquo;, der vi er avhengige av at disse produserer pakker uten større svakheter og uten onde hensikter. Kilder som blant annet Gartner, Sonatype og Snyk har anslått at så mye som 90% av koden i et typisk utviklingsprosjekt kan bestå av slike tredjepartspakker, så risikoen er betydelig dersom vi ikke har kontroll.&lt;/p></description></item><item><title>Trusselmodellering</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/designe/trusselmodellering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/designe/trusselmodellering/</guid><description>&lt;p>&lt;strong>Dette er en kort introduksjon til trusselmodellering, dataflytdiagrammer, STRIDE og angrepstrær.&lt;/strong>&lt;/p>
&lt;p>Du har nok allerede gjort en enkel trusselmodellering uten at du selv er klar over det. Har du for eksempel tenkt på hvorfor brukerne av systemet du lager må logge seg inn med brukernavn og passord?&lt;/p>
&lt;p>Når disse valgene ble tatt så har du automatisk gjort en enkel trusselmodellering. Du ønsker jo selvfølgelig ikke at uvedkommende skal kunne få tilgang til data i systemet ditt og du ønsker ikke at hvem som helst skal se data som overføres mellom brukerne dine og nettstedet ditt.&lt;/p></description></item><item><title>Beredskapsplaner og hendelseshåndtering</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/forvalte/hendelseshandtering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/forvalte/hendelseshandtering/</guid><description>&lt;p>Mange tenker gjerne på sikkerhetshendelser som målrettede angrep der &lt;em>noen&lt;/em> angriper en løsning ved å &lt;em>hacke&lt;/em> den. I noen tilfeller er dette gjerne korrekt, men en hendelse kan være mye mer.&lt;/p>
&lt;p>NSM definerer en sikkerhetshendelse som &lt;em>&amp;ldquo;En avvikssituasjon hvor det er et potensiale for tap av konfidensialitet, integritet, og/eller tilgjengelighet for informasjon eller IKT-tjenester. En sikkerhetshendelse kan oppstå som følge av et dataangrep, teknisk svikt, eller utilsiktede feilhandlinger.&amp;rdquo;&lt;/em> Med andre ord kan en hendelse være nesten hva som helst som påvirker konfidensialitet, integritet og tilgjengelighet, og avhengig av konteksten vil ulike kunder ha ulike krav til når vi må rapportere og/eller agere på dette.&lt;/p></description></item><item><title>Kompetanseheving</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/designe/kompetanseheving/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/designe/kompetanseheving/</guid><description>&lt;p>Sikkerhet er for mange et ukjent og kanskje litt skummelt område, der en ikke helt vet hvor man skal begynne. Når et nytt prosjekt startes opp er det derfor viktig at en vurderer behovet for kompetanseheving hos teammedlemmene. I utgangspunktet er dette rettet mot tema relatert til sikkerhet, men bruk av ny teknologi kan også utgjøre en risiko dersom en bruker den på feil måte.&lt;/p>
&lt;p>Det er viktig at teamet ser over hele utviklingsløpet med alle fasene og vurderer hvert enkelt punkt opp mot hva teamet kan, hva en ser på som relevant for prosjektet og hvor en kan få bistand.&lt;/p></description></item><item><title>Sikkerhetstesting</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/sikkerhetstesting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/sikkerhetstesting/</guid><description>&lt;p>Sikkerhetstesting bør alltid være et element av alle leveranser. Mange assosierer sikkerhetstesting med penetrasjonstesting, men det er mye mer enn dette. Noen former for testing kan gjøres automatisk som del av CICD, andre er mer manuelle og skjer typisk mot en deployert løsning.&lt;/p>
&lt;p>Før en setter i gang med sikkerhetstesting er det viktig å sette seg inn i hva dette kan gi deg - det finnes ingen enkelttiltak som løser alle sikkerhetsproblemer, og heller ingen enkelt testmetode som avdekker alle svakheter. Sikkerhetstesting er også et av områdene som ofte krever spesifikk kompetanse for at resultatene skal bli gode og/eller tolket korrekt.&lt;/p></description></item><item><title>Dokumentasjon</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/dokumentasjon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/dokumentasjon/</guid><description>&lt;p>Dokumentasjon er ofte sett på som et nødvendig onde, og vi er ikke alltid gode nok til å dokumentere prosjektene våre. Mange mener at kildekoden er den beste dokumentasjonen, men denne sier kun hvordan en applikasjon fungerer, ikke nødvendigvis hvorfor den fungerer som den gjør, eller hva som er den egentlige intensjonen.&lt;/p>
&lt;p>Det er mange årsaker til at vi må dokumentere løsningen vi bygger; den mest åpenbare er for å sikre at nye teammedlemmer kan få en forståelse av hva prosjektet går ut på og også for at informasjonen ikke bare skal leve i hodet til enkeltpersoner. Et annet viktig aspekt av dette er dokumentasjon av hensyn til sikkerheten i prosjektet. Dersom vi ikke dokumenterer hvilke tiltak som gjøres og hvorfor, eller hvilke trusler vi står ovenfor og hvordan vi håndterer dette legger vi et kjempestort ansvar på teammedlemmene som kommer etter: Det som for oss er en logisk og fornuftig løsning gitt en sikkerhetskontekst kan virke bakvendt og tungt for noen uten den samme konteksten og kompetansen, og vi risikerer da at viktige tiltak fjernes for å &lt;em>forenkle&lt;/em> løsningen - på beskostning av sikkerheten.&lt;/p></description></item><item><title>Interne komponenter</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/interne-komponenter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/interne-komponenter/</guid><description>&lt;p>Mange utviklingsteam gjør mer enn å skrive kode. Du har gjerne virtuelle maskiner i sky eller on-premise, med applikasjoner eller tjenester som brukes i leveransen hos kunden. Du drifter kanskje integrasjonsløsninger for kunden, containere, applikasjonsservere og mye annet.&lt;/p>
&lt;p>Har dere en rutine for å holde disse oppdatert, og inngår de som en del av det øvrige sikkerhetsarbeidet?&lt;/p>
&lt;h2 id="viktige-huskeregler">Viktige huskeregler&lt;a class="td-heading-self-link" href="#viktige-huskeregler" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="oppdateringer">Oppdateringer&lt;a class="td-heading-self-link" href="#oppdateringer" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Dersom dere drifter servere, tjenester eller andre assets innad i teamet må de holdes oppdatert. Dere må sette dere inn i rutinene for release av nye versjoner fra leverandørens side, slik at dere kan holde alt oppdatert. Det er ikke alltid en ønsker å gå for siste versjon hele tiden, så det er viktig å sette seg inn i release notes eller annen dokumentasjon rundt releasen for å forstå hvorfor den kom, og hva den løser.&lt;/p></description></item><item><title>Retningslinjer for innhold</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/retningslinjer-for-innhold/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/retningslinjer-for-innhold/</guid><description>&lt;p>Siden alt som skrives på denne siden er fritt tilgjengelig på Internet, er det viktig å følge noen enkle regler og retningslinjer for innhold.&lt;/p>
&lt;h2 id="språk-og-stil">Språk og stil&lt;a class="td-heading-self-link" href="#spr%c3%a5k-og-stil" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Innholdet på disse sidene er primært for teknikere og teknisk språk er derfor å forvente. Men, om uttrykk brukes som ikke kan antas å være godt kjent må de beskrives. Språket skal kunne leses og forstås av de fleste teknikere, ikke bare de som har jobbet med sikkerhet i flere tiår!&lt;/p></description></item><item><title>Søkeresultat</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/search/</guid><description/></item></channel></rss>