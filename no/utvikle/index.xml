<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Utvikle on Sikkerhet.bouvet.no - For Security Champions i Bouvet</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/</link><description>Recent content in Utvikle on Sikkerhet.bouvet.no - For Security Champions i Bouvet</description><generator>Hugo</generator><language>no</language><atom:link href="https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/index.xml" rel="self" type="application/rss+xml"/><item><title>Utviklingsmiljø, verktøy og byggmiljø</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/utviklingsmiljoer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/utviklingsmiljoer/</guid><description>&lt;p>Utviklingsmiljøet og byggmiljøet er noe av det viktigste vi har i et utviklingsprosjekt, og er en avhengighet det er utrolig viktig at vi har kontroll på.&lt;/p>
&lt;p>Det finnes mange ulike måter å forholde seg til disse miljøene; noen utvikler og bygger lokalt på egen laptop, mens andre bruker en kombinasjon av dedikerte utvikling- og byggmiljø - basert på skytjenester som Azure DevBox eller on-prem utviklingsservere.&lt;/p>
&lt;p>Uavhengig av hvilken løsning en går for, er det noen viktige momenter som bør dokumenteres og vedlikeholdes - både for å ha et utgangspunkt som kan trusselmodelleres og valideres, men også for at nye teammedlemmer raskt kan onboardes og få et miljø som er &amp;ldquo;rett&amp;rdquo;.&lt;/p></description></item><item><title>Hemmeligheter</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/hemmeligheter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/hemmeligheter/</guid><description>&lt;p>Hemmeligheter er representert i utviklingsprosjekter i form av &lt;em>connection strings&lt;/em>, &lt;em>passord&lt;/em>, &lt;em>nøkler&lt;/em>, &lt;em>sertifikater&lt;/em> og alt annet som regnes som sensitiv informasjon vi ikke ønsker at andre skal få kjennskap til.&lt;/p>
&lt;p>Det finnes mange ulike tilnærminger til hvordan disse skal håndteres, og dette har også endret seg etter hvert som nye tjenester dukker opp. For skyløsninger har tjenester som Azure Key Vault og liknende nærmest blitt en standard, da disse tjenestene håndterer flere aspekter av hvordan en bruker og forvalter hemmeligheter.&lt;/p></description></item><item><title>Datavalidering fra andre systemer</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/datavalidering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/datavalidering/</guid><description>&lt;p>Dersom du henter data fra andre systemer bør du aldri stole blindt på disse. OWASP Top 10 har hatt ulike former for sårbarheter relatert til kodeinjeksjon på de øverste punktene sine siden den første lista kom i 2004.&lt;/p>
&lt;p>Uavhengig av hvor dataene kommer fra, skal du alltid behandle disse på linje med brukerinput fra et sikkerhetsperspektiv. Sjekk at du får det du forventer, og dersom du henter inn filer må disse skannes for malware før du behandler dem videre. Vurder også behovet for bruk av sandbox-miljø for å prosessere slike filer, slik at skadepotensialet begrenses.&lt;/p></description></item><item><title>Sikkerhetspraksiser</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/sikkerhetspraksiser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/sikkerhetspraksiser/</guid><description>&lt;p>Det finnes mange ulike typer sårbarheter og svakheter vi må forholde oss til når vi utvikler nye applikasjoner. Organisasjonen Open Worldwide Application Security Project har siden 2004 gitt ut en liste med de 10 mest vanlige typer sårbarheter, primært rettet mot webapplikasjoner. Selv om denne ikke inneholder alt, brukes den ofte som et utgangspunkt for sårbarheter som må håndteres i utviklingsprosjekter.&lt;/p>
&lt;h2 id="gjeldende-punkter-på-owasp-top-10">Gjeldende punkter på OWASP Top 10:&lt;a class="td-heading-self-link" href="#gjeldende-punkter-p%c3%a5-owasp-top-10" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ol>
&lt;li>Broken Access Control&lt;/li>
&lt;li>Cryptographic Failures&lt;/li>
&lt;li>Injection&lt;/li>
&lt;li>Insecure Design&lt;/li>
&lt;li>Security Misconfiguration&lt;/li>
&lt;li>Vulnerable and Outdated Components&lt;/li>
&lt;li>Identification and Authentication Failures&lt;/li>
&lt;li>Software and Data Integrity Failures&lt;/li>
&lt;li>Security Logging and Monitoring Failures&lt;/li>
&lt;li>Server-Side Request Forgery&lt;/li>
&lt;/ol>
&lt;p>Dersom teamet ikke har noen prosesser rundt sikker utvikling, vil dette være en god start. For team med større modenhet innenfor applikasjonssikkerhet vil andre sjekklister, som Application Security Verification Standard - også fra OWASP være et videre alternativ. Denne er delt opp i tre ulike nivå, der nivå 1 dekker hovedpunktene, mens level 3 går mye mer i dybden og krever mer kompetanse og støtteverktøy.&lt;/p></description></item><item><title>Software supply chain</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/software-supply-chain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/software-supply-chain/</guid><description>&lt;p>Når vi bygger software har vi avhengigheter til en hel haug med ulike tredjepartspakker, fra økosystem som npmjs, nuget, PyPi eller andre. Dette er kode &amp;ldquo;skrevet av andre&amp;rdquo;, der vi er avhengige av at disse produserer pakker uten større svakheter og uten onde hensikter. Kilder som blant annet Gartner, Sonatype og Snyk har anslått at så mye som 90% av koden i et typisk utviklingsprosjekt kan bestå av slike tredjepartspakker, så risikoen er betydelig dersom vi ikke har kontroll.&lt;/p></description></item><item><title>Sikkerhetstesting</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/sikkerhetstesting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/sikkerhetstesting/</guid><description>&lt;p>Sikkerhetstesting bør alltid være et element av alle leveranser. Mange assosierer sikkerhetstesting med penetrasjonstesting, men det er mye mer enn dette. Noen former for testing kan gjøres automatisk som del av CICD, andre er mer manuelle og skjer typisk mot en deployert løsning.&lt;/p>
&lt;p>Før en setter i gang med sikkerhetstesting er det viktig å sette seg inn i hva dette kan gi deg - det finnes ingen enkelttiltak som løser alle sikkerhetsproblemer, og heller ingen enkelt testmetode som avdekker alle svakheter. Sikkerhetstesting er også et av områdene som ofte krever spesifikk kompetanse for at resultatene skal bli gode og/eller tolket korrekt.&lt;/p></description></item><item><title>Dokumentasjon</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/dokumentasjon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/dokumentasjon/</guid><description>&lt;p>Dokumentasjon er ofte sett på som et nødvendig onde, og vi er ikke alltid gode nok til å dokumentere prosjektene våre. Mange mener at kildekoden er den beste dokumentasjonen, men denne sier kun hvordan en applikasjon fungerer, ikke nødvendigvis hvorfor den fungerer som den gjør, eller hva som er den egentlige intensjonen.&lt;/p>
&lt;p>Det er mange årsaker til at vi må dokumentere løsningen vi bygger; den mest åpenbare er for å sikre at nye teammedlemmer kan få en forståelse av hva prosjektet går ut på og også for at informasjonen ikke bare skal leve i hodet til enkeltpersoner. Et annet viktig aspekt av dette er dokumentasjon av hensyn til sikkerheten i prosjektet. Dersom vi ikke dokumenterer hvilke tiltak som gjøres og hvorfor, eller hvilke trusler vi står ovenfor og hvordan vi håndterer dette legger vi et kjempestort ansvar på teammedlemmene som kommer etter: Det som for oss er en logisk og fornuftig løsning gitt en sikkerhetskontekst kan virke bakvendt og tungt for noen uten den samme konteksten og kompetansen, og vi risikerer da at viktige tiltak fjernes for å &lt;em>forenkle&lt;/em> løsningen - på beskostning av sikkerheten.&lt;/p></description></item><item><title>Interne komponenter</title><link>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/interne-komponenter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/no/utvikle/interne-komponenter/</guid><description>&lt;p>Mange utviklingsteam gjør mer enn å skrive kode. Du har gjerne virtuelle maskiner i sky eller on-premise, med applikasjoner eller tjenester som brukes i leveransen hos kunden. Du drifter kanskje integrasjonsløsninger for kunden, containere, applikasjonsservere og mye annet.&lt;/p>
&lt;p>Har dere en rutine for å holde disse oppdatert, og inngår de som en del av det øvrige sikkerhetsarbeidet?&lt;/p>
&lt;h2 id="viktige-huskeregler">Viktige huskeregler&lt;a class="td-heading-self-link" href="#viktige-huskeregler" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="oppdateringer">Oppdateringer&lt;a class="td-heading-self-link" href="#oppdateringer" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Dersom dere drifter servere, tjenester eller andre assets innad i teamet må de holdes oppdatert. Dere må sette dere inn i rutinene for release av nye versjoner fra leverandørens side, slik at dere kan holde alt oppdatert. Det er ikke alltid en ønsker å gå for siste versjon hele tiden, så det er viktig å sette seg inn i release notes eller annen dokumentasjon rundt releasen for å forstå hvorfor den kom, og hva den løser.&lt;/p></description></item></channel></rss>