<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design on sikkerhet.bouvet.no</title><link>https://chrish.github.io/sikkerhet.bouvet.no/design/</link><description>Recent content in Design on sikkerhet.bouvet.no</description><generator>Hugo</generator><language>en</language><atom:link href="https://chrish.github.io/sikkerhet.bouvet.no/design/index.xml" rel="self" type="application/rss+xml"/><item><title>Security Requirements</title><link>https://chrish.github.io/sikkerhet.bouvet.no/design/security-requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/design/security-requirements/</guid><description>&lt;p>Some requirements are implicit, such as the use of HTTPS/TLS, while others will be explicit and defined by customers or third parties. Even if the customer has no specific requirements, it is still important for the delivery team to create a list of requirements to ensure that the project&amp;rsquo;s framework is documented.&lt;/p>
&lt;p>Most projects must adhere to various requirements from Bouvet, the customer, and external parties. All development teams must have control over the requirements that apply to the delivery:&lt;/p></description></item><item><title>System diagrams and drawings</title><link>https://chrish.github.io/sikkerhet.bouvet.no/design/system-diagrams-and-drawings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/design/system-diagrams-and-drawings/</guid><description>&lt;p>When designing a solution, it&amp;rsquo;s essential to have clear and comprehensive drawings and diagrams that show the planned design. This is already done by many development teams without necessarily being a formal requirement, but it&amp;rsquo;s still worth mentioning here.&lt;/p>
&lt;p>System diagrams should provide enough information to:&lt;/p>
&lt;ul>
&lt;li>Validate that the implementation matches the design&lt;/li>
&lt;li>Use them for threat modeling, pentesting, or similar activities&lt;/li>
&lt;li>Be used by those managing the solution to get a good overview of components and data flow&lt;/li>
&lt;li>Be used by the delivery team for onboarding new colleagues or handover to other teams&lt;/li>
&lt;/ul>
&lt;p>Although there is a lot that can be documented here, we focus on the most important aspects:&lt;/p></description></item><item><title>Segregation of Environments</title><link>https://chrish.github.io/sikkerhet.bouvet.no/design/segregation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/design/segregation/</guid><description>&lt;p>When we build solutions, we often set up multiple environments, typically for dev, test, and prod, so that we can develop while the product owner tests new functionality and end users use the system in prod. It is important to distinguish between these environments to avoid situations where changes in one environment affect the use of another.&lt;/p>
&lt;p>When designing a new solution, we must consider how to separate the environments. For cloud services, a common approach is to use different subscriptions per environment where possible. One subscription cannot affect another unless explicitly configured, but there are other possibilities as well.&lt;/p></description></item><item><title>Authentication and Authorization</title><link>https://chrish.github.io/sikkerhet.bouvet.no/design/authentication-and-authorization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/design/authentication-and-authorization/</guid><description>&lt;p>Authentication and authorization are crucial in all development projects. In short, &lt;em>authentication&lt;/em> is about validating that a user represents the identity they claim to represent, typically by checking a username and corresponding password. &lt;em>Authorization&lt;/em> is about checking that the user is allowed to do what they are trying to do. These are often abbreviated to &lt;em>authn&lt;/em> for authentication and &lt;em>authz&lt;/em> for authorization.&lt;/p>
&lt;h2 id="authentication">Authentication&lt;a class="td-heading-self-link" href="#authentication" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>When validating a user, the most important thing is to &lt;em>not&lt;/em> create your own authentication solution! Ensuring that such solutions are actually secure is a huge task, and one should instead use established solutions for this!&lt;/p></description></item><item><title>Network Concepts</title><link>https://chrish.github.io/sikkerhet.bouvet.no/design/networking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/design/networking/</guid><description>&lt;p>Proper configuration of the network is important for pure cloud solutions, hybrid networks, and on-prem solutions. Network is a vast field with significant variations in usage, security, and complexity. Below we cover basic concepts for communication to and from servers and network services.&lt;/p>
&lt;h2 id="zero-trust-architecture">Zero Trust Architecture&lt;a class="td-heading-self-link" href="#zero-trust-architecture" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Zero_trust_security_model">Zero trust&lt;/a> is an important concept in network operations. In short, you should never trust anything coming from other systems, and you should assume that all communication will be compromised. Zero trust cannot be solved just by securing the network, but must be a goal in itself when designing solutions and the infrastructure around them. By implementing zero-trust, you will eliminate many potential attack vectors and thus protect the services that use the network.&lt;/p></description></item><item><title>Threat Modeling</title><link>https://chrish.github.io/sikkerhet.bouvet.no/design/threat-modelling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/design/threat-modelling/</guid><description>&lt;p>&lt;strong>This is a brief introduction to threat modeling, data flow diagrams, STRIDE, and attack trees.&lt;/strong>&lt;/p>
&lt;p>You may have already done simple threat modeling without realizing it. For example, have you ever thought about why the users of the system you&amp;rsquo;re creating need to log in with a username and password?&lt;/p>
&lt;p>When these choices were made, you automatically performed simple threat modeling. You certainly don&amp;rsquo;t want unauthorized individuals to access data in your system, and you don&amp;rsquo;t want anyone to see the data transferred between your users and your website.&lt;/p></description></item><item><title>Competence Building</title><link>https://chrish.github.io/sikkerhet.bouvet.no/design/competence-building/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chrish.github.io/sikkerhet.bouvet.no/design/competence-building/</guid><description>&lt;p>Security is an unknown and perhaps somewhat intimidating area for many, where they don&amp;rsquo;t quite know where to start. Therefore, when a new project is initiated, it is important to assess the need for competence building among team members. Initially, this is aimed at topics related to security, but the use of new technology can also pose a risk if used incorrectly.&lt;/p>
&lt;p>It is important that the team reviews the entire development process in all phases and evaluates each point against what the team knows, what is relevant for the project, and where assistance can be obtained.&lt;/p></description></item></channel></rss>